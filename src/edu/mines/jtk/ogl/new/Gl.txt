Field Detail
GL_FALSE

public static final int GL_FALSE

See Also:
    Constant Field Values

GL_TRUE

public static final int GL_TRUE

See Also:
    Constant Field Values

GL_BYTE

public static final int GL_BYTE

See Also:
    Constant Field Values

GL_UNSIGNED_BYTE

public static final int GL_UNSIGNED_BYTE

See Also:
    Constant Field Values

GL_SHORT

public static final int GL_SHORT

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT

public static final int GL_UNSIGNED_SHORT

See Also:
    Constant Field Values

GL_INT

public static final int GL_INT

See Also:
    Constant Field Values

GL_UNSIGNED_INT

public static final int GL_UNSIGNED_INT

See Also:
    Constant Field Values

GL_FLOAT

public static final int GL_FLOAT

See Also:
    Constant Field Values

GL_DOUBLE

public static final int GL_DOUBLE

See Also:
    Constant Field Values

GL_2_BYTES

public static final int GL_2_BYTES

See Also:
    Constant Field Values

GL_3_BYTES

public static final int GL_3_BYTES

See Also:
    Constant Field Values

GL_4_BYTES

public static final int GL_4_BYTES

See Also:
    Constant Field Values

GL_POINTS

public static final int GL_POINTS

See Also:
    Constant Field Values

GL_LINES

public static final int GL_LINES

See Also:
    Constant Field Values

GL_LINE_LOOP

public static final int GL_LINE_LOOP

See Also:
    Constant Field Values

GL_LINE_STRIP

public static final int GL_LINE_STRIP

See Also:
    Constant Field Values

GL_TRIANGLES

public static final int GL_TRIANGLES

See Also:
    Constant Field Values

GL_TRIANGLE_STRIP

public static final int GL_TRIANGLE_STRIP

See Also:
    Constant Field Values

GL_TRIANGLE_FAN

public static final int GL_TRIANGLE_FAN

See Also:
    Constant Field Values

GL_QUADS

public static final int GL_QUADS

See Also:
    Constant Field Values

GL_QUAD_STRIP

public static final int GL_QUAD_STRIP

See Also:
    Constant Field Values

GL_POLYGON

public static final int GL_POLYGON

See Also:
    Constant Field Values

GL_MATRIX_MODE

public static final int GL_MATRIX_MODE

See Also:
    Constant Field Values

GL_MODELVIEW

public static final int GL_MODELVIEW

See Also:
    Constant Field Values

GL_PROJECTION

public static final int GL_PROJECTION

See Also:
    Constant Field Values

GL_TEXTURE

public static final int GL_TEXTURE

See Also:
    Constant Field Values

GL_POINT_SMOOTH

public static final int GL_POINT_SMOOTH

See Also:
    Constant Field Values

GL_POINT_SIZE

public static final int GL_POINT_SIZE

See Also:
    Constant Field Values

GL_POINT_SIZE_GRANULARITY

public static final int GL_POINT_SIZE_GRANULARITY

See Also:
    Constant Field Values

GL_POINT_SIZE_RANGE

public static final int GL_POINT_SIZE_RANGE

See Also:
    Constant Field Values

GL_LINE_SMOOTH

public static final int GL_LINE_SMOOTH

See Also:
    Constant Field Values

GL_LINE_STIPPLE

public static final int GL_LINE_STIPPLE

See Also:
    Constant Field Values

GL_LINE_STIPPLE_PATTERN

public static final int GL_LINE_STIPPLE_PATTERN

See Also:
    Constant Field Values

GL_LINE_STIPPLE_REPEAT

public static final int GL_LINE_STIPPLE_REPEAT

See Also:
    Constant Field Values

GL_LINE_WIDTH

public static final int GL_LINE_WIDTH

See Also:
    Constant Field Values

GL_LINE_WIDTH_GRANULARITY

public static final int GL_LINE_WIDTH_GRANULARITY

See Also:
    Constant Field Values

GL_LINE_WIDTH_RANGE

public static final int GL_LINE_WIDTH_RANGE

See Also:
    Constant Field Values

GL_POINT

public static final int GL_POINT

See Also:
    Constant Field Values

GL_LINE

public static final int GL_LINE

See Also:
    Constant Field Values

GL_FILL

public static final int GL_FILL

See Also:
    Constant Field Values

GL_CW

public static final int GL_CW

See Also:
    Constant Field Values

GL_CCW

public static final int GL_CCW

See Also:
    Constant Field Values

GL_FRONT

public static final int GL_FRONT

See Also:
    Constant Field Values

GL_BACK

public static final int GL_BACK

See Also:
    Constant Field Values

GL_POLYGON_MODE

public static final int GL_POLYGON_MODE

See Also:
    Constant Field Values

GL_POLYGON_SMOOTH

public static final int GL_POLYGON_SMOOTH

See Also:
    Constant Field Values

GL_POLYGON_STIPPLE

public static final int GL_POLYGON_STIPPLE

See Also:
    Constant Field Values

GL_EDGE_FLAG

public static final int GL_EDGE_FLAG

See Also:
    Constant Field Values

GL_CULL_FACE

public static final int GL_CULL_FACE

See Also:
    Constant Field Values

GL_CULL_FACE_MODE

public static final int GL_CULL_FACE_MODE

See Also:
    Constant Field Values

GL_FRONT_FACE

public static final int GL_FRONT_FACE

See Also:
    Constant Field Values

GL_POLYGON_OFFSET_FACTOR

public static final int GL_POLYGON_OFFSET_FACTOR

See Also:
    Constant Field Values

GL_POLYGON_OFFSET_UNITS

public static final int GL_POLYGON_OFFSET_UNITS

See Also:
    Constant Field Values

GL_POLYGON_OFFSET_POINT

public static final int GL_POLYGON_OFFSET_POINT

See Also:
    Constant Field Values

GL_POLYGON_OFFSET_LINE

public static final int GL_POLYGON_OFFSET_LINE

See Also:
    Constant Field Values

GL_POLYGON_OFFSET_FILL

public static final int GL_POLYGON_OFFSET_FILL

See Also:
    Constant Field Values

GL_COMPILE

public static final int GL_COMPILE

See Also:
    Constant Field Values

GL_COMPILE_AND_EXECUTE

public static final int GL_COMPILE_AND_EXECUTE

See Also:
    Constant Field Values

GL_LIST_BASE

public static final int GL_LIST_BASE

See Also:
    Constant Field Values

GL_LIST_INDEX

public static final int GL_LIST_INDEX

See Also:
    Constant Field Values

GL_LIST_MODE

public static final int GL_LIST_MODE

See Also:
    Constant Field Values

GL_NEVER

public static final int GL_NEVER

See Also:
    Constant Field Values

GL_LESS

public static final int GL_LESS

See Also:
    Constant Field Values

GL_EQUAL

public static final int GL_EQUAL

See Also:
    Constant Field Values

GL_LEQUAL

public static final int GL_LEQUAL

See Also:
    Constant Field Values

GL_GREATER

public static final int GL_GREATER

See Also:
    Constant Field Values

GL_NOTEQUAL

public static final int GL_NOTEQUAL

See Also:
    Constant Field Values

GL_GEQUAL

public static final int GL_GEQUAL

See Also:
    Constant Field Values

GL_ALWAYS

public static final int GL_ALWAYS

See Also:
    Constant Field Values

GL_DEPTH_TEST

public static final int GL_DEPTH_TEST

See Also:
    Constant Field Values

GL_DEPTH_BITS

public static final int GL_DEPTH_BITS

See Also:
    Constant Field Values

GL_DEPTH_CLEAR_VALUE

public static final int GL_DEPTH_CLEAR_VALUE

See Also:
    Constant Field Values

GL_DEPTH_FUNC

public static final int GL_DEPTH_FUNC

See Also:
    Constant Field Values

GL_DEPTH_RANGE

public static final int GL_DEPTH_RANGE

See Also:
    Constant Field Values

GL_DEPTH_WRITEMASK

public static final int GL_DEPTH_WRITEMASK

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT

public static final int GL_DEPTH_COMPONENT

See Also:
    Constant Field Values

GL_LIGHTING

public static final int GL_LIGHTING

See Also:
    Constant Field Values

GL_LIGHT0

public static final int GL_LIGHT0

See Also:
    Constant Field Values

GL_LIGHT1

public static final int GL_LIGHT1

See Also:
    Constant Field Values

GL_LIGHT2

public static final int GL_LIGHT2

See Also:
    Constant Field Values

GL_LIGHT3

public static final int GL_LIGHT3

See Also:
    Constant Field Values

GL_LIGHT4

public static final int GL_LIGHT4

See Also:
    Constant Field Values

GL_LIGHT5

public static final int GL_LIGHT5

See Also:
    Constant Field Values

GL_LIGHT6

public static final int GL_LIGHT6

See Also:
    Constant Field Values

GL_LIGHT7

public static final int GL_LIGHT7

See Also:
    Constant Field Values

GL_SPOT_EXPONENT

public static final int GL_SPOT_EXPONENT

See Also:
    Constant Field Values

GL_SPOT_CUTOFF

public static final int GL_SPOT_CUTOFF

See Also:
    Constant Field Values

GL_CONSTANT_ATTENUATION

public static final int GL_CONSTANT_ATTENUATION

See Also:
    Constant Field Values

GL_LINEAR_ATTENUATION

public static final int GL_LINEAR_ATTENUATION

See Also:
    Constant Field Values

GL_QUADRATIC_ATTENUATION

public static final int GL_QUADRATIC_ATTENUATION

See Also:
    Constant Field Values

GL_AMBIENT

public static final int GL_AMBIENT

See Also:
    Constant Field Values

GL_DIFFUSE

public static final int GL_DIFFUSE

See Also:
    Constant Field Values

GL_SPECULAR

public static final int GL_SPECULAR

See Also:
    Constant Field Values

GL_SHININESS

public static final int GL_SHININESS

See Also:
    Constant Field Values

GL_EMISSION

public static final int GL_EMISSION

See Also:
    Constant Field Values

GL_POSITION

public static final int GL_POSITION

See Also:
    Constant Field Values

GL_SPOT_DIRECTION

public static final int GL_SPOT_DIRECTION

See Also:
    Constant Field Values

GL_AMBIENT_AND_DIFFUSE

public static final int GL_AMBIENT_AND_DIFFUSE

See Also:
    Constant Field Values

GL_COLOR_INDEXES

public static final int GL_COLOR_INDEXES

See Also:
    Constant Field Values

GL_LIGHT_MODEL_TWO_SIDE

public static final int GL_LIGHT_MODEL_TWO_SIDE

See Also:
    Constant Field Values

GL_LIGHT_MODEL_LOCAL_VIEWER

public static final int GL_LIGHT_MODEL_LOCAL_VIEWER

See Also:
    Constant Field Values

GL_LIGHT_MODEL_AMBIENT

public static final int GL_LIGHT_MODEL_AMBIENT

See Also:
    Constant Field Values

GL_FRONT_AND_BACK

public static final int GL_FRONT_AND_BACK

See Also:
    Constant Field Values

GL_SHADE_MODEL

public static final int GL_SHADE_MODEL

See Also:
    Constant Field Values

GL_FLAT

public static final int GL_FLAT

See Also:
    Constant Field Values

GL_SMOOTH

public static final int GL_SMOOTH

See Also:
    Constant Field Values

GL_COLOR_MATERIAL

public static final int GL_COLOR_MATERIAL

See Also:
    Constant Field Values

GL_COLOR_MATERIAL_FACE

public static final int GL_COLOR_MATERIAL_FACE

See Also:
    Constant Field Values

GL_COLOR_MATERIAL_PARAMETER

public static final int GL_COLOR_MATERIAL_PARAMETER

See Also:
    Constant Field Values

GL_NORMALIZE

public static final int GL_NORMALIZE

See Also:
    Constant Field Values

GL_CLIP_PLANE0

public static final int GL_CLIP_PLANE0

See Also:
    Constant Field Values

GL_CLIP_PLANE1

public static final int GL_CLIP_PLANE1

See Also:
    Constant Field Values

GL_CLIP_PLANE2

public static final int GL_CLIP_PLANE2

See Also:
    Constant Field Values

GL_CLIP_PLANE3

public static final int GL_CLIP_PLANE3

See Also:
    Constant Field Values

GL_CLIP_PLANE4

public static final int GL_CLIP_PLANE4

See Also:
    Constant Field Values

GL_CLIP_PLANE5

public static final int GL_CLIP_PLANE5

See Also:
    Constant Field Values

GL_ACCUM_RED_BITS

public static final int GL_ACCUM_RED_BITS

See Also:
    Constant Field Values

GL_ACCUM_GREEN_BITS

public static final int GL_ACCUM_GREEN_BITS

See Also:
    Constant Field Values

GL_ACCUM_BLUE_BITS

public static final int GL_ACCUM_BLUE_BITS

See Also:
    Constant Field Values

GL_ACCUM_ALPHA_BITS

public static final int GL_ACCUM_ALPHA_BITS

See Also:
    Constant Field Values

GL_ACCUM_CLEAR_VALUE

public static final int GL_ACCUM_CLEAR_VALUE

See Also:
    Constant Field Values

GL_ACCUM

public static final int GL_ACCUM

See Also:
    Constant Field Values

GL_ADD

public static final int GL_ADD

See Also:
    Constant Field Values

GL_LOAD

public static final int GL_LOAD

See Also:
    Constant Field Values

GL_MULT

public static final int GL_MULT

See Also:
    Constant Field Values

GL_RETURN

public static final int GL_RETURN

See Also:
    Constant Field Values

GL_ALPHA_TEST

public static final int GL_ALPHA_TEST

See Also:
    Constant Field Values

GL_ALPHA_TEST_REF

public static final int GL_ALPHA_TEST_REF

See Also:
    Constant Field Values

GL_ALPHA_TEST_FUNC

public static final int GL_ALPHA_TEST_FUNC

See Also:
    Constant Field Values

GL_BLEND

public static final int GL_BLEND

See Also:
    Constant Field Values

GL_BLEND_SRC

public static final int GL_BLEND_SRC

See Also:
    Constant Field Values

GL_BLEND_DST

public static final int GL_BLEND_DST

See Also:
    Constant Field Values

GL_ZERO

public static final int GL_ZERO

See Also:
    Constant Field Values

GL_ONE

public static final int GL_ONE

See Also:
    Constant Field Values

GL_SRC_COLOR

public static final int GL_SRC_COLOR

See Also:
    Constant Field Values

GL_ONE_MINUS_SRC_COLOR

public static final int GL_ONE_MINUS_SRC_COLOR

See Also:
    Constant Field Values

GL_SRC_ALPHA

public static final int GL_SRC_ALPHA

See Also:
    Constant Field Values

GL_ONE_MINUS_SRC_ALPHA

public static final int GL_ONE_MINUS_SRC_ALPHA

See Also:
    Constant Field Values

GL_DST_ALPHA

public static final int GL_DST_ALPHA

See Also:
    Constant Field Values

GL_ONE_MINUS_DST_ALPHA

public static final int GL_ONE_MINUS_DST_ALPHA

See Also:
    Constant Field Values

GL_DST_COLOR

public static final int GL_DST_COLOR

See Also:
    Constant Field Values

GL_ONE_MINUS_DST_COLOR

public static final int GL_ONE_MINUS_DST_COLOR

See Also:
    Constant Field Values

GL_SRC_ALPHA_SATURATE

public static final int GL_SRC_ALPHA_SATURATE

See Also:
    Constant Field Values

GL_FEEDBACK

public static final int GL_FEEDBACK

See Also:
    Constant Field Values

GL_RENDER

public static final int GL_RENDER

See Also:
    Constant Field Values

GL_SELECT

public static final int GL_SELECT

See Also:
    Constant Field Values

GL_2D

public static final int GL_2D

See Also:
    Constant Field Values

GL_3D

public static final int GL_3D

See Also:
    Constant Field Values

GL_3D_COLOR

public static final int GL_3D_COLOR

See Also:
    Constant Field Values

GL_3D_COLOR_TEXTURE

public static final int GL_3D_COLOR_TEXTURE

See Also:
    Constant Field Values

GL_4D_COLOR_TEXTURE

public static final int GL_4D_COLOR_TEXTURE

See Also:
    Constant Field Values

GL_POINT_TOKEN

public static final int GL_POINT_TOKEN

See Also:
    Constant Field Values

GL_LINE_TOKEN

public static final int GL_LINE_TOKEN

See Also:
    Constant Field Values

GL_LINE_RESET_TOKEN

public static final int GL_LINE_RESET_TOKEN

See Also:
    Constant Field Values

GL_POLYGON_TOKEN

public static final int GL_POLYGON_TOKEN

See Also:
    Constant Field Values

GL_BITMAP_TOKEN

public static final int GL_BITMAP_TOKEN

See Also:
    Constant Field Values

GL_DRAW_PIXEL_TOKEN

public static final int GL_DRAW_PIXEL_TOKEN

See Also:
    Constant Field Values

GL_COPY_PIXEL_TOKEN

public static final int GL_COPY_PIXEL_TOKEN

See Also:
    Constant Field Values

GL_PASS_THROUGH_TOKEN

public static final int GL_PASS_THROUGH_TOKEN

See Also:
    Constant Field Values

GL_FEEDBACK_BUFFER_POINTER

public static final int GL_FEEDBACK_BUFFER_POINTER

See Also:
    Constant Field Values

GL_FEEDBACK_BUFFER_SIZE

public static final int GL_FEEDBACK_BUFFER_SIZE

See Also:
    Constant Field Values

GL_FEEDBACK_BUFFER_TYPE

public static final int GL_FEEDBACK_BUFFER_TYPE

See Also:
    Constant Field Values

GL_SELECTION_BUFFER_POINTER

public static final int GL_SELECTION_BUFFER_POINTER

See Also:
    Constant Field Values

GL_SELECTION_BUFFER_SIZE

public static final int GL_SELECTION_BUFFER_SIZE

See Also:
    Constant Field Values

GL_FOG

public static final int GL_FOG

See Also:
    Constant Field Values

GL_FOG_MODE

public static final int GL_FOG_MODE

See Also:
    Constant Field Values

GL_FOG_DENSITY

public static final int GL_FOG_DENSITY

See Also:
    Constant Field Values

GL_FOG_COLOR

public static final int GL_FOG_COLOR

See Also:
    Constant Field Values

GL_FOG_INDEX

public static final int GL_FOG_INDEX

See Also:
    Constant Field Values

GL_FOG_START

public static final int GL_FOG_START

See Also:
    Constant Field Values

GL_FOG_END

public static final int GL_FOG_END

See Also:
    Constant Field Values

GL_LINEAR

public static final int GL_LINEAR

See Also:
    Constant Field Values

GL_EXP

public static final int GL_EXP

See Also:
    Constant Field Values

GL_EXP2

public static final int GL_EXP2

See Also:
    Constant Field Values

GL_LOGIC_OP

public static final int GL_LOGIC_OP

See Also:
    Constant Field Values

GL_INDEX_LOGIC_OP

public static final int GL_INDEX_LOGIC_OP

See Also:
    Constant Field Values

GL_COLOR_LOGIC_OP

public static final int GL_COLOR_LOGIC_OP

See Also:
    Constant Field Values

GL_LOGIC_OP_MODE

public static final int GL_LOGIC_OP_MODE

See Also:
    Constant Field Values

GL_CLEAR

public static final int GL_CLEAR

See Also:
    Constant Field Values

GL_SET

public static final int GL_SET

See Also:
    Constant Field Values

GL_COPY

public static final int GL_COPY

See Also:
    Constant Field Values

GL_COPY_INVERTED

public static final int GL_COPY_INVERTED

See Also:
    Constant Field Values

GL_NOOP

public static final int GL_NOOP

See Also:
    Constant Field Values

GL_INVERT

public static final int GL_INVERT

See Also:
    Constant Field Values

GL_AND

public static final int GL_AND

See Also:
    Constant Field Values

GL_NAND

public static final int GL_NAND

See Also:
    Constant Field Values

GL_OR

public static final int GL_OR

See Also:
    Constant Field Values

GL_NOR

public static final int GL_NOR

See Also:
    Constant Field Values

GL_XOR

public static final int GL_XOR

See Also:
    Constant Field Values

GL_EQUIV

public static final int GL_EQUIV

See Also:
    Constant Field Values

GL_AND_REVERSE

public static final int GL_AND_REVERSE

See Also:
    Constant Field Values

GL_AND_INVERTED

public static final int GL_AND_INVERTED

See Also:
    Constant Field Values

GL_OR_REVERSE

public static final int GL_OR_REVERSE

See Also:
    Constant Field Values

GL_OR_INVERTED

public static final int GL_OR_INVERTED

See Also:
    Constant Field Values

GL_STENCIL_TEST

public static final int GL_STENCIL_TEST

See Also:
    Constant Field Values

GL_STENCIL_WRITEMASK

public static final int GL_STENCIL_WRITEMASK

See Also:
    Constant Field Values

GL_STENCIL_BITS

public static final int GL_STENCIL_BITS

See Also:
    Constant Field Values

GL_STENCIL_FUNC

public static final int GL_STENCIL_FUNC

See Also:
    Constant Field Values

GL_STENCIL_VALUE_MASK

public static final int GL_STENCIL_VALUE_MASK

See Also:
    Constant Field Values

GL_STENCIL_REF

public static final int GL_STENCIL_REF

See Also:
    Constant Field Values

GL_STENCIL_FAIL

public static final int GL_STENCIL_FAIL

See Also:
    Constant Field Values

GL_STENCIL_PASS_DEPTH_PASS

public static final int GL_STENCIL_PASS_DEPTH_PASS

See Also:
    Constant Field Values

GL_STENCIL_PASS_DEPTH_FAIL

public static final int GL_STENCIL_PASS_DEPTH_FAIL

See Also:
    Constant Field Values

GL_STENCIL_CLEAR_VALUE

public static final int GL_STENCIL_CLEAR_VALUE

See Also:
    Constant Field Values

GL_STENCIL_INDEX

public static final int GL_STENCIL_INDEX

See Also:
    Constant Field Values

GL_KEEP

public static final int GL_KEEP

See Also:
    Constant Field Values

GL_REPLACE

public static final int GL_REPLACE

See Also:
    Constant Field Values

GL_INCR

public static final int GL_INCR

See Also:
    Constant Field Values

GL_DECR

public static final int GL_DECR

See Also:
    Constant Field Values

GL_NONE

public static final int GL_NONE

See Also:
    Constant Field Values

GL_LEFT

public static final int GL_LEFT

See Also:
    Constant Field Values

GL_RIGHT

public static final int GL_RIGHT

See Also:
    Constant Field Values

GL_FRONT_LEFT

public static final int GL_FRONT_LEFT

See Also:
    Constant Field Values

GL_FRONT_RIGHT

public static final int GL_FRONT_RIGHT

See Also:
    Constant Field Values

GL_BACK_LEFT

public static final int GL_BACK_LEFT

See Also:
    Constant Field Values

GL_BACK_RIGHT

public static final int GL_BACK_RIGHT

See Also:
    Constant Field Values

GL_AUX0

public static final int GL_AUX0

See Also:
    Constant Field Values

GL_AUX1

public static final int GL_AUX1

See Also:
    Constant Field Values

GL_AUX2

public static final int GL_AUX2

See Also:
    Constant Field Values

GL_AUX3

public static final int GL_AUX3

See Also:
    Constant Field Values

GL_COLOR_INDEX

public static final int GL_COLOR_INDEX

See Also:
    Constant Field Values

GL_RED

public static final int GL_RED

See Also:
    Constant Field Values

GL_GREEN

public static final int GL_GREEN

See Also:
    Constant Field Values

GL_BLUE

public static final int GL_BLUE

See Also:
    Constant Field Values

GL_ALPHA

public static final int GL_ALPHA

See Also:
    Constant Field Values

GL_LUMINANCE

public static final int GL_LUMINANCE

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA

public static final int GL_LUMINANCE_ALPHA

See Also:
    Constant Field Values

GL_ALPHA_BITS

public static final int GL_ALPHA_BITS

See Also:
    Constant Field Values

GL_RED_BITS

public static final int GL_RED_BITS

See Also:
    Constant Field Values

GL_GREEN_BITS

public static final int GL_GREEN_BITS

See Also:
    Constant Field Values

GL_BLUE_BITS

public static final int GL_BLUE_BITS

See Also:
    Constant Field Values

GL_INDEX_BITS

public static final int GL_INDEX_BITS

See Also:
    Constant Field Values

GL_SUBPIXEL_BITS

public static final int GL_SUBPIXEL_BITS

See Also:
    Constant Field Values

GL_AUX_BUFFERS

public static final int GL_AUX_BUFFERS

See Also:
    Constant Field Values

GL_READ_BUFFER

public static final int GL_READ_BUFFER

See Also:
    Constant Field Values

GL_DRAW_BUFFER

public static final int GL_DRAW_BUFFER

See Also:
    Constant Field Values

GL_DOUBLEBUFFER

public static final int GL_DOUBLEBUFFER

See Also:
    Constant Field Values

GL_STEREO

public static final int GL_STEREO

See Also:
    Constant Field Values

GL_BITMAP

public static final int GL_BITMAP

See Also:
    Constant Field Values

GL_COLOR

public static final int GL_COLOR

See Also:
    Constant Field Values

GL_DEPTH

public static final int GL_DEPTH

See Also:
    Constant Field Values

GL_STENCIL

public static final int GL_STENCIL

See Also:
    Constant Field Values

GL_DITHER

public static final int GL_DITHER

See Also:
    Constant Field Values

GL_RGB

public static final int GL_RGB

See Also:
    Constant Field Values

GL_RGBA

public static final int GL_RGBA

See Also:
    Constant Field Values

GL_MAX_LIST_NESTING

public static final int GL_MAX_LIST_NESTING

See Also:
    Constant Field Values

GL_MAX_ATTRIB_STACK_DEPTH

public static final int GL_MAX_ATTRIB_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_MODELVIEW_STACK_DEPTH

public static final int GL_MAX_MODELVIEW_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_NAME_STACK_DEPTH

public static final int GL_MAX_NAME_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_PROJECTION_STACK_DEPTH

public static final int GL_MAX_PROJECTION_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_TEXTURE_STACK_DEPTH

public static final int GL_MAX_TEXTURE_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_EVAL_ORDER

public static final int GL_MAX_EVAL_ORDER

See Also:
    Constant Field Values

GL_MAX_LIGHTS

public static final int GL_MAX_LIGHTS

See Also:
    Constant Field Values

GL_MAX_CLIP_PLANES

public static final int GL_MAX_CLIP_PLANES

See Also:
    Constant Field Values

GL_MAX_TEXTURE_SIZE

public static final int GL_MAX_TEXTURE_SIZE

See Also:
    Constant Field Values

GL_MAX_PIXEL_MAP_TABLE

public static final int GL_MAX_PIXEL_MAP_TABLE

See Also:
    Constant Field Values

GL_MAX_VIEWPORT_DIMS

public static final int GL_MAX_VIEWPORT_DIMS

See Also:
    Constant Field Values

GL_MAX_CLIENT_ATTRIB_STACK_DEPTH

public static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH

See Also:
    Constant Field Values

GL_ATTRIB_STACK_DEPTH

public static final int GL_ATTRIB_STACK_DEPTH

See Also:
    Constant Field Values

GL_CLIENT_ATTRIB_STACK_DEPTH

public static final int GL_CLIENT_ATTRIB_STACK_DEPTH

See Also:
    Constant Field Values

GL_COLOR_CLEAR_VALUE

public static final int GL_COLOR_CLEAR_VALUE

See Also:
    Constant Field Values

GL_COLOR_WRITEMASK

public static final int GL_COLOR_WRITEMASK

See Also:
    Constant Field Values

GL_CURRENT_INDEX

public static final int GL_CURRENT_INDEX

See Also:
    Constant Field Values

GL_CURRENT_COLOR

public static final int GL_CURRENT_COLOR

See Also:
    Constant Field Values

GL_CURRENT_NORMAL

public static final int GL_CURRENT_NORMAL

See Also:
    Constant Field Values

GL_CURRENT_RASTER_COLOR

public static final int GL_CURRENT_RASTER_COLOR

See Also:
    Constant Field Values

GL_CURRENT_RASTER_DISTANCE

public static final int GL_CURRENT_RASTER_DISTANCE

See Also:
    Constant Field Values

GL_CURRENT_RASTER_INDEX

public static final int GL_CURRENT_RASTER_INDEX

See Also:
    Constant Field Values

GL_CURRENT_RASTER_POSITION

public static final int GL_CURRENT_RASTER_POSITION

See Also:
    Constant Field Values

GL_CURRENT_RASTER_TEXTURE_COORDS

public static final int GL_CURRENT_RASTER_TEXTURE_COORDS

See Also:
    Constant Field Values

GL_CURRENT_RASTER_POSITION_VALID

public static final int GL_CURRENT_RASTER_POSITION_VALID

See Also:
    Constant Field Values

GL_CURRENT_TEXTURE_COORDS

public static final int GL_CURRENT_TEXTURE_COORDS

See Also:
    Constant Field Values

GL_INDEX_CLEAR_VALUE

public static final int GL_INDEX_CLEAR_VALUE

See Also:
    Constant Field Values

GL_INDEX_MODE

public static final int GL_INDEX_MODE

See Also:
    Constant Field Values

GL_INDEX_WRITEMASK

public static final int GL_INDEX_WRITEMASK

See Also:
    Constant Field Values

GL_MODELVIEW_MATRIX

public static final int GL_MODELVIEW_MATRIX

See Also:
    Constant Field Values

GL_MODELVIEW_STACK_DEPTH

public static final int GL_MODELVIEW_STACK_DEPTH

See Also:
    Constant Field Values

GL_NAME_STACK_DEPTH

public static final int GL_NAME_STACK_DEPTH

See Also:
    Constant Field Values

GL_PROJECTION_MATRIX

public static final int GL_PROJECTION_MATRIX

See Also:
    Constant Field Values

GL_PROJECTION_STACK_DEPTH

public static final int GL_PROJECTION_STACK_DEPTH

See Also:
    Constant Field Values

GL_RENDER_MODE

public static final int GL_RENDER_MODE

See Also:
    Constant Field Values

GL_RGBA_MODE

public static final int GL_RGBA_MODE

See Also:
    Constant Field Values

GL_TEXTURE_MATRIX

public static final int GL_TEXTURE_MATRIX

See Also:
    Constant Field Values

GL_TEXTURE_STACK_DEPTH

public static final int GL_TEXTURE_STACK_DEPTH

See Also:
    Constant Field Values

GL_VIEWPORT

public static final int GL_VIEWPORT

See Also:
    Constant Field Values

GL_AUTO_NORMAL

public static final int GL_AUTO_NORMAL

See Also:
    Constant Field Values

GL_MAP1_COLOR_4

public static final int GL_MAP1_COLOR_4

See Also:
    Constant Field Values

GL_MAP1_INDEX

public static final int GL_MAP1_INDEX

See Also:
    Constant Field Values

GL_MAP1_NORMAL

public static final int GL_MAP1_NORMAL

See Also:
    Constant Field Values

GL_MAP1_TEXTURE_COORD_1

public static final int GL_MAP1_TEXTURE_COORD_1

See Also:
    Constant Field Values

GL_MAP1_TEXTURE_COORD_2

public static final int GL_MAP1_TEXTURE_COORD_2

See Also:
    Constant Field Values

GL_MAP1_TEXTURE_COORD_3

public static final int GL_MAP1_TEXTURE_COORD_3

See Also:
    Constant Field Values

GL_MAP1_TEXTURE_COORD_4

public static final int GL_MAP1_TEXTURE_COORD_4

See Also:
    Constant Field Values

GL_MAP1_VERTEX_3

public static final int GL_MAP1_VERTEX_3

See Also:
    Constant Field Values

GL_MAP1_VERTEX_4

public static final int GL_MAP1_VERTEX_4

See Also:
    Constant Field Values

GL_MAP2_COLOR_4

public static final int GL_MAP2_COLOR_4

See Also:
    Constant Field Values

GL_MAP2_INDEX

public static final int GL_MAP2_INDEX

See Also:
    Constant Field Values

GL_MAP2_NORMAL

public static final int GL_MAP2_NORMAL

See Also:
    Constant Field Values

GL_MAP2_TEXTURE_COORD_1

public static final int GL_MAP2_TEXTURE_COORD_1

See Also:
    Constant Field Values

GL_MAP2_TEXTURE_COORD_2

public static final int GL_MAP2_TEXTURE_COORD_2

See Also:
    Constant Field Values

GL_MAP2_TEXTURE_COORD_3

public static final int GL_MAP2_TEXTURE_COORD_3

See Also:
    Constant Field Values

GL_MAP2_TEXTURE_COORD_4

public static final int GL_MAP2_TEXTURE_COORD_4

See Also:
    Constant Field Values

GL_MAP2_VERTEX_3

public static final int GL_MAP2_VERTEX_3

See Also:
    Constant Field Values

GL_MAP2_VERTEX_4

public static final int GL_MAP2_VERTEX_4

See Also:
    Constant Field Values

GL_MAP1_GRID_DOMAIN

public static final int GL_MAP1_GRID_DOMAIN

See Also:
    Constant Field Values

GL_MAP1_GRID_SEGMENTS

public static final int GL_MAP1_GRID_SEGMENTS

See Also:
    Constant Field Values

GL_MAP2_GRID_DOMAIN

public static final int GL_MAP2_GRID_DOMAIN

See Also:
    Constant Field Values

GL_MAP2_GRID_SEGMENTS

public static final int GL_MAP2_GRID_SEGMENTS

See Also:
    Constant Field Values

GL_COEFF

public static final int GL_COEFF

See Also:
    Constant Field Values

GL_DOMAIN

public static final int GL_DOMAIN

See Also:
    Constant Field Values

GL_ORDER

public static final int GL_ORDER

See Also:
    Constant Field Values

GL_FOG_HINT

public static final int GL_FOG_HINT

See Also:
    Constant Field Values

GL_LINE_SMOOTH_HINT

public static final int GL_LINE_SMOOTH_HINT

See Also:
    Constant Field Values

GL_PERSPECTIVE_CORRECTION_HINT

public static final int GL_PERSPECTIVE_CORRECTION_HINT

See Also:
    Constant Field Values

GL_POINT_SMOOTH_HINT

public static final int GL_POINT_SMOOTH_HINT

See Also:
    Constant Field Values

GL_POLYGON_SMOOTH_HINT

public static final int GL_POLYGON_SMOOTH_HINT

See Also:
    Constant Field Values

GL_DONT_CARE

public static final int GL_DONT_CARE

See Also:
    Constant Field Values

GL_FASTEST

public static final int GL_FASTEST

See Also:
    Constant Field Values

GL_NICEST

public static final int GL_NICEST

See Also:
    Constant Field Values

GL_SCISSOR_TEST

public static final int GL_SCISSOR_TEST

See Also:
    Constant Field Values

GL_SCISSOR_BOX

public static final int GL_SCISSOR_BOX

See Also:
    Constant Field Values

GL_MAP_COLOR

public static final int GL_MAP_COLOR

See Also:
    Constant Field Values

GL_MAP_STENCIL

public static final int GL_MAP_STENCIL

See Also:
    Constant Field Values

GL_INDEX_SHIFT

public static final int GL_INDEX_SHIFT

See Also:
    Constant Field Values

GL_INDEX_OFFSET

public static final int GL_INDEX_OFFSET

See Also:
    Constant Field Values

GL_RED_SCALE

public static final int GL_RED_SCALE

See Also:
    Constant Field Values

GL_RED_BIAS

public static final int GL_RED_BIAS

See Also:
    Constant Field Values

GL_GREEN_SCALE

public static final int GL_GREEN_SCALE

See Also:
    Constant Field Values

GL_GREEN_BIAS

public static final int GL_GREEN_BIAS

See Also:
    Constant Field Values

GL_BLUE_SCALE

public static final int GL_BLUE_SCALE

See Also:
    Constant Field Values

GL_BLUE_BIAS

public static final int GL_BLUE_BIAS

See Also:
    Constant Field Values

GL_ALPHA_SCALE

public static final int GL_ALPHA_SCALE

See Also:
    Constant Field Values

GL_ALPHA_BIAS

public static final int GL_ALPHA_BIAS

See Also:
    Constant Field Values

GL_DEPTH_SCALE

public static final int GL_DEPTH_SCALE

See Also:
    Constant Field Values

GL_DEPTH_BIAS

public static final int GL_DEPTH_BIAS

See Also:
    Constant Field Values

GL_PIXEL_MAP_S_TO_S_SIZE

public static final int GL_PIXEL_MAP_S_TO_S_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_I_SIZE

public static final int GL_PIXEL_MAP_I_TO_I_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_R_SIZE

public static final int GL_PIXEL_MAP_I_TO_R_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_G_SIZE

public static final int GL_PIXEL_MAP_I_TO_G_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_B_SIZE

public static final int GL_PIXEL_MAP_I_TO_B_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_A_SIZE

public static final int GL_PIXEL_MAP_I_TO_A_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_R_TO_R_SIZE

public static final int GL_PIXEL_MAP_R_TO_R_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_G_TO_G_SIZE

public static final int GL_PIXEL_MAP_G_TO_G_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_B_TO_B_SIZE

public static final int GL_PIXEL_MAP_B_TO_B_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_A_TO_A_SIZE

public static final int GL_PIXEL_MAP_A_TO_A_SIZE

See Also:
    Constant Field Values

GL_PIXEL_MAP_S_TO_S

public static final int GL_PIXEL_MAP_S_TO_S

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_I

public static final int GL_PIXEL_MAP_I_TO_I

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_R

public static final int GL_PIXEL_MAP_I_TO_R

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_G

public static final int GL_PIXEL_MAP_I_TO_G

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_B

public static final int GL_PIXEL_MAP_I_TO_B

See Also:
    Constant Field Values

GL_PIXEL_MAP_I_TO_A

public static final int GL_PIXEL_MAP_I_TO_A

See Also:
    Constant Field Values

GL_PIXEL_MAP_R_TO_R

public static final int GL_PIXEL_MAP_R_TO_R

See Also:
    Constant Field Values

GL_PIXEL_MAP_G_TO_G

public static final int GL_PIXEL_MAP_G_TO_G

See Also:
    Constant Field Values

GL_PIXEL_MAP_B_TO_B

public static final int GL_PIXEL_MAP_B_TO_B

See Also:
    Constant Field Values

GL_PIXEL_MAP_A_TO_A

public static final int GL_PIXEL_MAP_A_TO_A

See Also:
    Constant Field Values

GL_PACK_ALIGNMENT

public static final int GL_PACK_ALIGNMENT

See Also:
    Constant Field Values

GL_PACK_LSB_FIRST

public static final int GL_PACK_LSB_FIRST

See Also:
    Constant Field Values

GL_PACK_ROW_LENGTH

public static final int GL_PACK_ROW_LENGTH

See Also:
    Constant Field Values

GL_PACK_SKIP_PIXELS

public static final int GL_PACK_SKIP_PIXELS

See Also:
    Constant Field Values

GL_PACK_SKIP_ROWS

public static final int GL_PACK_SKIP_ROWS

See Also:
    Constant Field Values

GL_PACK_SWAP_BYTES

public static final int GL_PACK_SWAP_BYTES

See Also:
    Constant Field Values

GL_UNPACK_ALIGNMENT

public static final int GL_UNPACK_ALIGNMENT

See Also:
    Constant Field Values

GL_UNPACK_LSB_FIRST

public static final int GL_UNPACK_LSB_FIRST

See Also:
    Constant Field Values

GL_UNPACK_ROW_LENGTH

public static final int GL_UNPACK_ROW_LENGTH

See Also:
    Constant Field Values

GL_UNPACK_SKIP_PIXELS

public static final int GL_UNPACK_SKIP_PIXELS

See Also:
    Constant Field Values

GL_UNPACK_SKIP_ROWS

public static final int GL_UNPACK_SKIP_ROWS

See Also:
    Constant Field Values

GL_UNPACK_SWAP_BYTES

public static final int GL_UNPACK_SWAP_BYTES

See Also:
    Constant Field Values

GL_ZOOM_X

public static final int GL_ZOOM_X

See Also:
    Constant Field Values

GL_ZOOM_Y

public static final int GL_ZOOM_Y

See Also:
    Constant Field Values

GL_TEXTURE_ENV

public static final int GL_TEXTURE_ENV

See Also:
    Constant Field Values

GL_TEXTURE_ENV_MODE

public static final int GL_TEXTURE_ENV_MODE

See Also:
    Constant Field Values

GL_TEXTURE_1D

public static final int GL_TEXTURE_1D

See Also:
    Constant Field Values

GL_TEXTURE_2D

public static final int GL_TEXTURE_2D

See Also:
    Constant Field Values

GL_TEXTURE_WRAP_S

public static final int GL_TEXTURE_WRAP_S

See Also:
    Constant Field Values

GL_TEXTURE_WRAP_T

public static final int GL_TEXTURE_WRAP_T

See Also:
    Constant Field Values

GL_TEXTURE_MAG_FILTER

public static final int GL_TEXTURE_MAG_FILTER

See Also:
    Constant Field Values

GL_TEXTURE_MIN_FILTER

public static final int GL_TEXTURE_MIN_FILTER

See Also:
    Constant Field Values

GL_TEXTURE_ENV_COLOR

public static final int GL_TEXTURE_ENV_COLOR

See Also:
    Constant Field Values

GL_TEXTURE_GEN_S

public static final int GL_TEXTURE_GEN_S

See Also:
    Constant Field Values

GL_TEXTURE_GEN_T

public static final int GL_TEXTURE_GEN_T

See Also:
    Constant Field Values

GL_TEXTURE_GEN_MODE

public static final int GL_TEXTURE_GEN_MODE

See Also:
    Constant Field Values

GL_TEXTURE_BORDER_COLOR

public static final int GL_TEXTURE_BORDER_COLOR

See Also:
    Constant Field Values

GL_TEXTURE_WIDTH

public static final int GL_TEXTURE_WIDTH

See Also:
    Constant Field Values

GL_TEXTURE_HEIGHT

public static final int GL_TEXTURE_HEIGHT

See Also:
    Constant Field Values

GL_TEXTURE_BORDER

public static final int GL_TEXTURE_BORDER

See Also:
    Constant Field Values

GL_TEXTURE_COMPONENTS

public static final int GL_TEXTURE_COMPONENTS

See Also:
    Constant Field Values

GL_TEXTURE_RED_SIZE

public static final int GL_TEXTURE_RED_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_GREEN_SIZE

public static final int GL_TEXTURE_GREEN_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_BLUE_SIZE

public static final int GL_TEXTURE_BLUE_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_ALPHA_SIZE

public static final int GL_TEXTURE_ALPHA_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_LUMINANCE_SIZE

public static final int GL_TEXTURE_LUMINANCE_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_INTENSITY_SIZE

public static final int GL_TEXTURE_INTENSITY_SIZE

See Also:
    Constant Field Values

GL_NEAREST_MIPMAP_NEAREST

public static final int GL_NEAREST_MIPMAP_NEAREST

See Also:
    Constant Field Values

GL_NEAREST_MIPMAP_LINEAR

public static final int GL_NEAREST_MIPMAP_LINEAR

See Also:
    Constant Field Values

GL_LINEAR_MIPMAP_NEAREST

public static final int GL_LINEAR_MIPMAP_NEAREST

See Also:
    Constant Field Values

GL_LINEAR_MIPMAP_LINEAR

public static final int GL_LINEAR_MIPMAP_LINEAR

See Also:
    Constant Field Values

GL_OBJECT_LINEAR

public static final int GL_OBJECT_LINEAR

See Also:
    Constant Field Values

GL_OBJECT_PLANE

public static final int GL_OBJECT_PLANE

See Also:
    Constant Field Values

GL_EYE_LINEAR

public static final int GL_EYE_LINEAR

See Also:
    Constant Field Values

GL_EYE_PLANE

public static final int GL_EYE_PLANE

See Also:
    Constant Field Values

GL_SPHERE_MAP

public static final int GL_SPHERE_MAP

See Also:
    Constant Field Values

GL_DECAL

public static final int GL_DECAL

See Also:
    Constant Field Values

GL_MODULATE

public static final int GL_MODULATE

See Also:
    Constant Field Values

GL_NEAREST

public static final int GL_NEAREST

See Also:
    Constant Field Values

GL_REPEAT

public static final int GL_REPEAT

See Also:
    Constant Field Values

GL_CLAMP

public static final int GL_CLAMP

See Also:
    Constant Field Values

GL_S

public static final int GL_S

See Also:
    Constant Field Values

GL_T

public static final int GL_T

See Also:
    Constant Field Values

GL_R

public static final int GL_R

See Also:
    Constant Field Values

GL_Q

public static final int GL_Q

See Also:
    Constant Field Values

GL_TEXTURE_GEN_R

public static final int GL_TEXTURE_GEN_R

See Also:
    Constant Field Values

GL_TEXTURE_GEN_Q

public static final int GL_TEXTURE_GEN_Q

See Also:
    Constant Field Values

GL_VENDOR

public static final int GL_VENDOR

See Also:
    Constant Field Values

GL_RENDERER

public static final int GL_RENDERER

See Also:
    Constant Field Values

GL_VERSION

public static final int GL_VERSION

See Also:
    Constant Field Values

GL_EXTENSIONS

public static final int GL_EXTENSIONS

See Also:
    Constant Field Values

GL_NO_ERROR

public static final int GL_NO_ERROR

See Also:
    Constant Field Values

GL_INVALID_VALUE

public static final int GL_INVALID_VALUE

See Also:
    Constant Field Values

GL_INVALID_ENUM

public static final int GL_INVALID_ENUM

See Also:
    Constant Field Values

GL_INVALID_OPERATION

public static final int GL_INVALID_OPERATION

See Also:
    Constant Field Values

GL_STACK_OVERFLOW

public static final int GL_STACK_OVERFLOW

See Also:
    Constant Field Values

GL_STACK_UNDERFLOW

public static final int GL_STACK_UNDERFLOW

See Also:
    Constant Field Values

GL_OUT_OF_MEMORY

public static final int GL_OUT_OF_MEMORY

See Also:
    Constant Field Values

GL_CURRENT_BIT

public static final int GL_CURRENT_BIT

See Also:
    Constant Field Values

GL_POINT_BIT

public static final int GL_POINT_BIT

See Also:
    Constant Field Values

GL_LINE_BIT

public static final int GL_LINE_BIT

See Also:
    Constant Field Values

GL_POLYGON_BIT

public static final int GL_POLYGON_BIT

See Also:
    Constant Field Values

GL_POLYGON_STIPPLE_BIT

public static final int GL_POLYGON_STIPPLE_BIT

See Also:
    Constant Field Values

GL_PIXEL_MODE_BIT

public static final int GL_PIXEL_MODE_BIT

See Also:
    Constant Field Values

GL_LIGHTING_BIT

public static final int GL_LIGHTING_BIT

See Also:
    Constant Field Values

GL_FOG_BIT

public static final int GL_FOG_BIT

See Also:
    Constant Field Values

GL_DEPTH_BUFFER_BIT

public static final int GL_DEPTH_BUFFER_BIT

See Also:
    Constant Field Values

GL_ACCUM_BUFFER_BIT

public static final int GL_ACCUM_BUFFER_BIT

See Also:
    Constant Field Values

GL_STENCIL_BUFFER_BIT

public static final int GL_STENCIL_BUFFER_BIT

See Also:
    Constant Field Values

GL_VIEWPORT_BIT

public static final int GL_VIEWPORT_BIT

See Also:
    Constant Field Values

GL_TRANSFORM_BIT

public static final int GL_TRANSFORM_BIT

See Also:
    Constant Field Values

GL_ENABLE_BIT

public static final int GL_ENABLE_BIT

See Also:
    Constant Field Values

GL_COLOR_BUFFER_BIT

public static final int GL_COLOR_BUFFER_BIT

See Also:
    Constant Field Values

GL_HINT_BIT

public static final int GL_HINT_BIT

See Also:
    Constant Field Values

GL_EVAL_BIT

public static final int GL_EVAL_BIT

See Also:
    Constant Field Values

GL_LIST_BIT

public static final int GL_LIST_BIT

See Also:
    Constant Field Values

GL_TEXTURE_BIT

public static final int GL_TEXTURE_BIT

See Also:
    Constant Field Values

GL_SCISSOR_BIT

public static final int GL_SCISSOR_BIT

See Also:
    Constant Field Values

GL_ALL_ATTRIB_BITS

public static final int GL_ALL_ATTRIB_BITS

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_1D

public static final int GL_PROXY_TEXTURE_1D

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_2D

public static final int GL_PROXY_TEXTURE_2D

See Also:
    Constant Field Values

GL_TEXTURE_PRIORITY

public static final int GL_TEXTURE_PRIORITY

See Also:
    Constant Field Values

GL_TEXTURE_RESIDENT

public static final int GL_TEXTURE_RESIDENT

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_1D

public static final int GL_TEXTURE_BINDING_1D

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_2D

public static final int GL_TEXTURE_BINDING_2D

See Also:
    Constant Field Values

GL_TEXTURE_INTERNAL_FORMAT

public static final int GL_TEXTURE_INTERNAL_FORMAT

See Also:
    Constant Field Values

GL_ALPHA4

public static final int GL_ALPHA4

See Also:
    Constant Field Values

GL_ALPHA8

public static final int GL_ALPHA8

See Also:
    Constant Field Values

GL_ALPHA12

public static final int GL_ALPHA12

See Also:
    Constant Field Values

GL_ALPHA16

public static final int GL_ALPHA16

See Also:
    Constant Field Values

GL_LUMINANCE4

public static final int GL_LUMINANCE4

See Also:
    Constant Field Values

GL_LUMINANCE8

public static final int GL_LUMINANCE8

See Also:
    Constant Field Values

GL_LUMINANCE12

public static final int GL_LUMINANCE12

See Also:
    Constant Field Values

GL_LUMINANCE16

public static final int GL_LUMINANCE16

See Also:
    Constant Field Values

GL_LUMINANCE4_ALPHA4

public static final int GL_LUMINANCE4_ALPHA4

See Also:
    Constant Field Values

GL_LUMINANCE6_ALPHA2

public static final int GL_LUMINANCE6_ALPHA2

See Also:
    Constant Field Values

GL_LUMINANCE8_ALPHA8

public static final int GL_LUMINANCE8_ALPHA8

See Also:
    Constant Field Values

GL_LUMINANCE12_ALPHA4

public static final int GL_LUMINANCE12_ALPHA4

See Also:
    Constant Field Values

GL_LUMINANCE12_ALPHA12

public static final int GL_LUMINANCE12_ALPHA12

See Also:
    Constant Field Values

GL_LUMINANCE16_ALPHA16

public static final int GL_LUMINANCE16_ALPHA16

See Also:
    Constant Field Values

GL_INTENSITY

public static final int GL_INTENSITY

See Also:
    Constant Field Values

GL_INTENSITY4

public static final int GL_INTENSITY4

See Also:
    Constant Field Values

GL_INTENSITY8

public static final int GL_INTENSITY8

See Also:
    Constant Field Values

GL_INTENSITY12

public static final int GL_INTENSITY12

See Also:
    Constant Field Values

GL_INTENSITY16

public static final int GL_INTENSITY16

See Also:
    Constant Field Values

GL_R3_G3_B2

public static final int GL_R3_G3_B2

See Also:
    Constant Field Values

GL_RGB4

public static final int GL_RGB4

See Also:
    Constant Field Values

GL_RGB5

public static final int GL_RGB5

See Also:
    Constant Field Values

GL_RGB8

public static final int GL_RGB8

See Also:
    Constant Field Values

GL_RGB10

public static final int GL_RGB10

See Also:
    Constant Field Values

GL_RGB12

public static final int GL_RGB12

See Also:
    Constant Field Values

GL_RGB16

public static final int GL_RGB16

See Also:
    Constant Field Values

GL_RGBA2

public static final int GL_RGBA2

See Also:
    Constant Field Values

GL_RGBA4

public static final int GL_RGBA4

See Also:
    Constant Field Values

GL_RGB5_A1

public static final int GL_RGB5_A1

See Also:
    Constant Field Values

GL_RGBA8

public static final int GL_RGBA8

See Also:
    Constant Field Values

GL_RGB10_A2

public static final int GL_RGB10_A2

See Also:
    Constant Field Values

GL_RGBA12

public static final int GL_RGBA12

See Also:
    Constant Field Values

GL_RGBA16

public static final int GL_RGBA16

See Also:
    Constant Field Values

GL_CLIENT_PIXEL_STORE_BIT

public static final int GL_CLIENT_PIXEL_STORE_BIT

See Also:
    Constant Field Values

GL_CLIENT_VERTEX_ARRAY_BIT

public static final int GL_CLIENT_VERTEX_ARRAY_BIT

See Also:
    Constant Field Values

GL_ALL_CLIENT_ATTRIB_BITS

public static final long GL_ALL_CLIENT_ATTRIB_BITS

See Also:
    Constant Field Values

GL_CLIENT_ALL_ATTRIB_BITS

public static final long GL_CLIENT_ALL_ATTRIB_BITS

See Also:
    Constant Field Values

GL_VERTEX_ARRAY

public static final int GL_VERTEX_ARRAY

See Also:
    Constant Field Values

GL_NORMAL_ARRAY

public static final int GL_NORMAL_ARRAY

See Also:
    Constant Field Values

GL_COLOR_ARRAY

public static final int GL_COLOR_ARRAY

See Also:
    Constant Field Values

GL_INDEX_ARRAY

public static final int GL_INDEX_ARRAY

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY

public static final int GL_TEXTURE_COORD_ARRAY

See Also:
    Constant Field Values

GL_EDGE_FLAG_ARRAY

public static final int GL_EDGE_FLAG_ARRAY

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_SIZE

public static final int GL_VERTEX_ARRAY_SIZE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_TYPE

public static final int GL_VERTEX_ARRAY_TYPE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_STRIDE

public static final int GL_VERTEX_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_NORMAL_ARRAY_TYPE

public static final int GL_NORMAL_ARRAY_TYPE

See Also:
    Constant Field Values

GL_NORMAL_ARRAY_STRIDE

public static final int GL_NORMAL_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_COLOR_ARRAY_SIZE

public static final int GL_COLOR_ARRAY_SIZE

See Also:
    Constant Field Values

GL_COLOR_ARRAY_TYPE

public static final int GL_COLOR_ARRAY_TYPE

See Also:
    Constant Field Values

GL_COLOR_ARRAY_STRIDE

public static final int GL_COLOR_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_INDEX_ARRAY_TYPE

public static final int GL_INDEX_ARRAY_TYPE

See Also:
    Constant Field Values

GL_INDEX_ARRAY_STRIDE

public static final int GL_INDEX_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_SIZE

public static final int GL_TEXTURE_COORD_ARRAY_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_TYPE

public static final int GL_TEXTURE_COORD_ARRAY_TYPE

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_STRIDE

public static final int GL_TEXTURE_COORD_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_EDGE_FLAG_ARRAY_STRIDE

public static final int GL_EDGE_FLAG_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_POINTER

public static final int GL_VERTEX_ARRAY_POINTER

See Also:
    Constant Field Values

GL_NORMAL_ARRAY_POINTER

public static final int GL_NORMAL_ARRAY_POINTER

See Also:
    Constant Field Values

GL_COLOR_ARRAY_POINTER

public static final int GL_COLOR_ARRAY_POINTER

See Also:
    Constant Field Values

GL_INDEX_ARRAY_POINTER

public static final int GL_INDEX_ARRAY_POINTER

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_POINTER

public static final int GL_TEXTURE_COORD_ARRAY_POINTER

See Also:
    Constant Field Values

GL_EDGE_FLAG_ARRAY_POINTER

public static final int GL_EDGE_FLAG_ARRAY_POINTER

See Also:
    Constant Field Values

GL_V2F

public static final int GL_V2F

See Also:
    Constant Field Values

GL_V3F

public static final int GL_V3F

See Also:
    Constant Field Values

GL_C4UB_V2F

public static final int GL_C4UB_V2F

See Also:
    Constant Field Values

GL_C4UB_V3F

public static final int GL_C4UB_V3F

See Also:
    Constant Field Values

GL_C3F_V3F

public static final int GL_C3F_V3F

See Also:
    Constant Field Values

GL_N3F_V3F

public static final int GL_N3F_V3F

See Also:
    Constant Field Values

GL_C4F_N3F_V3F

public static final int GL_C4F_N3F_V3F

See Also:
    Constant Field Values

GL_T2F_V3F

public static final int GL_T2F_V3F

See Also:
    Constant Field Values

GL_T4F_V4F

public static final int GL_T4F_V4F

See Also:
    Constant Field Values

GL_T2F_C4UB_V3F

public static final int GL_T2F_C4UB_V3F

See Also:
    Constant Field Values

GL_T2F_C3F_V3F

public static final int GL_T2F_C3F_V3F

See Also:
    Constant Field Values

GL_T2F_N3F_V3F

public static final int GL_T2F_N3F_V3F

See Also:
    Constant Field Values

GL_T2F_C4F_N3F_V3F

public static final int GL_T2F_C4F_N3F_V3F

See Also:
    Constant Field Values

GL_T4F_C4F_N3F_V4F

public static final int GL_T4F_C4F_N3F_V4F

See Also:
    Constant Field Values

GL_GLEXT_VERSION

public static final int GL_GLEXT_VERSION

See Also:
    Constant Field Values

GL_UNSIGNED_BYTE_3_3_2

public static final int GL_UNSIGNED_BYTE_3_3_2

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_4_4_4_4

public static final int GL_UNSIGNED_SHORT_4_4_4_4

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_5_5_5_1

public static final int GL_UNSIGNED_SHORT_5_5_5_1

See Also:
    Constant Field Values

GL_UNSIGNED_INT_8_8_8_8

public static final int GL_UNSIGNED_INT_8_8_8_8

See Also:
    Constant Field Values

GL_UNSIGNED_INT_10_10_10_2

public static final int GL_UNSIGNED_INT_10_10_10_2

See Also:
    Constant Field Values

GL_RESCALE_NORMAL

public static final int GL_RESCALE_NORMAL

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_3D

public static final int GL_TEXTURE_BINDING_3D

See Also:
    Constant Field Values

GL_PACK_SKIP_IMAGES

public static final int GL_PACK_SKIP_IMAGES

See Also:
    Constant Field Values

GL_PACK_IMAGE_HEIGHT

public static final int GL_PACK_IMAGE_HEIGHT

See Also:
    Constant Field Values

GL_UNPACK_SKIP_IMAGES

public static final int GL_UNPACK_SKIP_IMAGES

See Also:
    Constant Field Values

GL_UNPACK_IMAGE_HEIGHT

public static final int GL_UNPACK_IMAGE_HEIGHT

See Also:
    Constant Field Values

GL_TEXTURE_3D

public static final int GL_TEXTURE_3D

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_3D

public static final int GL_PROXY_TEXTURE_3D

See Also:
    Constant Field Values

GL_TEXTURE_DEPTH

public static final int GL_TEXTURE_DEPTH

See Also:
    Constant Field Values

GL_TEXTURE_WRAP_R

public static final int GL_TEXTURE_WRAP_R

See Also:
    Constant Field Values

GL_MAX_3D_TEXTURE_SIZE

public static final int GL_MAX_3D_TEXTURE_SIZE

See Also:
    Constant Field Values

GL_UNSIGNED_BYTE_2_3_3_REV

public static final int GL_UNSIGNED_BYTE_2_3_3_REV

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_5_6_5

public static final int GL_UNSIGNED_SHORT_5_6_5

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_5_6_5_REV

public static final int GL_UNSIGNED_SHORT_5_6_5_REV

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_4_4_4_4_REV

public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_1_5_5_5_REV

public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV

See Also:
    Constant Field Values

GL_UNSIGNED_INT_8_8_8_8_REV

public static final int GL_UNSIGNED_INT_8_8_8_8_REV

See Also:
    Constant Field Values

GL_UNSIGNED_INT_2_10_10_10_REV

public static final int GL_UNSIGNED_INT_2_10_10_10_REV

See Also:
    Constant Field Values

GL_BGR

public static final int GL_BGR

See Also:
    Constant Field Values

GL_BGRA

public static final int GL_BGRA

See Also:
    Constant Field Values

GL_MAX_ELEMENTS_VERTICES

public static final int GL_MAX_ELEMENTS_VERTICES

See Also:
    Constant Field Values

GL_MAX_ELEMENTS_INDICES

public static final int GL_MAX_ELEMENTS_INDICES

See Also:
    Constant Field Values

GL_CLAMP_TO_EDGE

public static final int GL_CLAMP_TO_EDGE

See Also:
    Constant Field Values

GL_TEXTURE_MIN_LOD

public static final int GL_TEXTURE_MIN_LOD

See Also:
    Constant Field Values

GL_TEXTURE_MAX_LOD

public static final int GL_TEXTURE_MAX_LOD

See Also:
    Constant Field Values

GL_TEXTURE_BASE_LEVEL

public static final int GL_TEXTURE_BASE_LEVEL

See Also:
    Constant Field Values

GL_TEXTURE_MAX_LEVEL

public static final int GL_TEXTURE_MAX_LEVEL

See Also:
    Constant Field Values

GL_LIGHT_MODEL_COLOR_CONTROL

public static final int GL_LIGHT_MODEL_COLOR_CONTROL

See Also:
    Constant Field Values

GL_SINGLE_COLOR

public static final int GL_SINGLE_COLOR

See Also:
    Constant Field Values

GL_SEPARATE_SPECULAR_COLOR

public static final int GL_SEPARATE_SPECULAR_COLOR

See Also:
    Constant Field Values

GL_SMOOTH_POINT_SIZE_RANGE

public static final int GL_SMOOTH_POINT_SIZE_RANGE

See Also:
    Constant Field Values

GL_SMOOTH_POINT_SIZE_GRANULARITY

public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY

See Also:
    Constant Field Values

GL_SMOOTH_LINE_WIDTH_RANGE

public static final int GL_SMOOTH_LINE_WIDTH_RANGE

See Also:
    Constant Field Values

GL_SMOOTH_LINE_WIDTH_GRANULARITY

public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY

See Also:
    Constant Field Values

GL_ALIASED_POINT_SIZE_RANGE

public static final int GL_ALIASED_POINT_SIZE_RANGE

See Also:
    Constant Field Values

GL_ALIASED_LINE_WIDTH_RANGE

public static final int GL_ALIASED_LINE_WIDTH_RANGE

See Also:
    Constant Field Values

GL_CONSTANT_COLOR

public static final int GL_CONSTANT_COLOR

See Also:
    Constant Field Values

GL_ONE_MINUS_CONSTANT_COLOR

public static final int GL_ONE_MINUS_CONSTANT_COLOR

See Also:
    Constant Field Values

GL_CONSTANT_ALPHA

public static final int GL_CONSTANT_ALPHA

See Also:
    Constant Field Values

GL_ONE_MINUS_CONSTANT_ALPHA

public static final int GL_ONE_MINUS_CONSTANT_ALPHA

See Also:
    Constant Field Values

GL_BLEND_COLOR

public static final int GL_BLEND_COLOR

See Also:
    Constant Field Values

GL_FUNC_ADD

public static final int GL_FUNC_ADD

See Also:
    Constant Field Values

GL_MIN

public static final int GL_MIN

See Also:
    Constant Field Values

GL_MAX

public static final int GL_MAX

See Also:
    Constant Field Values

GL_BLEND_EQUATION

public static final int GL_BLEND_EQUATION

See Also:
    Constant Field Values

GL_FUNC_SUBTRACT

public static final int GL_FUNC_SUBTRACT

See Also:
    Constant Field Values

GL_FUNC_REVERSE_SUBTRACT

public static final int GL_FUNC_REVERSE_SUBTRACT

See Also:
    Constant Field Values

GL_CONVOLUTION_1D

public static final int GL_CONVOLUTION_1D

See Also:
    Constant Field Values

GL_CONVOLUTION_2D

public static final int GL_CONVOLUTION_2D

See Also:
    Constant Field Values

GL_SEPARABLE_2D

public static final int GL_SEPARABLE_2D

See Also:
    Constant Field Values

GL_CONVOLUTION_BORDER_MODE

public static final int GL_CONVOLUTION_BORDER_MODE

See Also:
    Constant Field Values

GL_CONVOLUTION_FILTER_SCALE

public static final int GL_CONVOLUTION_FILTER_SCALE

See Also:
    Constant Field Values

GL_CONVOLUTION_FILTER_BIAS

public static final int GL_CONVOLUTION_FILTER_BIAS

See Also:
    Constant Field Values

GL_REDUCE

public static final int GL_REDUCE

See Also:
    Constant Field Values

GL_CONVOLUTION_FORMAT

public static final int GL_CONVOLUTION_FORMAT

See Also:
    Constant Field Values

GL_CONVOLUTION_WIDTH

public static final int GL_CONVOLUTION_WIDTH

See Also:
    Constant Field Values

GL_CONVOLUTION_HEIGHT

public static final int GL_CONVOLUTION_HEIGHT

See Also:
    Constant Field Values

GL_MAX_CONVOLUTION_WIDTH

public static final int GL_MAX_CONVOLUTION_WIDTH

See Also:
    Constant Field Values

GL_MAX_CONVOLUTION_HEIGHT

public static final int GL_MAX_CONVOLUTION_HEIGHT

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_RED_SCALE

public static final int GL_POST_CONVOLUTION_RED_SCALE

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_GREEN_SCALE

public static final int GL_POST_CONVOLUTION_GREEN_SCALE

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_BLUE_SCALE

public static final int GL_POST_CONVOLUTION_BLUE_SCALE

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_ALPHA_SCALE

public static final int GL_POST_CONVOLUTION_ALPHA_SCALE

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_RED_BIAS

public static final int GL_POST_CONVOLUTION_RED_BIAS

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_GREEN_BIAS

public static final int GL_POST_CONVOLUTION_GREEN_BIAS

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_BLUE_BIAS

public static final int GL_POST_CONVOLUTION_BLUE_BIAS

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_ALPHA_BIAS

public static final int GL_POST_CONVOLUTION_ALPHA_BIAS

See Also:
    Constant Field Values

GL_HISTOGRAM

public static final int GL_HISTOGRAM

See Also:
    Constant Field Values

GL_PROXY_HISTOGRAM

public static final int GL_PROXY_HISTOGRAM

See Also:
    Constant Field Values

GL_HISTOGRAM_WIDTH

public static final int GL_HISTOGRAM_WIDTH

See Also:
    Constant Field Values

GL_HISTOGRAM_FORMAT

public static final int GL_HISTOGRAM_FORMAT

See Also:
    Constant Field Values

GL_HISTOGRAM_RED_SIZE

public static final int GL_HISTOGRAM_RED_SIZE

See Also:
    Constant Field Values

GL_HISTOGRAM_GREEN_SIZE

public static final int GL_HISTOGRAM_GREEN_SIZE

See Also:
    Constant Field Values

GL_HISTOGRAM_BLUE_SIZE

public static final int GL_HISTOGRAM_BLUE_SIZE

See Also:
    Constant Field Values

GL_HISTOGRAM_ALPHA_SIZE

public static final int GL_HISTOGRAM_ALPHA_SIZE

See Also:
    Constant Field Values

GL_HISTOGRAM_LUMINANCE_SIZE

public static final int GL_HISTOGRAM_LUMINANCE_SIZE

See Also:
    Constant Field Values

GL_HISTOGRAM_SINK

public static final int GL_HISTOGRAM_SINK

See Also:
    Constant Field Values

GL_MINMAX

public static final int GL_MINMAX

See Also:
    Constant Field Values

GL_MINMAX_FORMAT

public static final int GL_MINMAX_FORMAT

See Also:
    Constant Field Values

GL_MINMAX_SINK

public static final int GL_MINMAX_SINK

See Also:
    Constant Field Values

GL_TABLE_TOO_LARGE

public static final int GL_TABLE_TOO_LARGE

See Also:
    Constant Field Values

GL_COLOR_MATRIX

public static final int GL_COLOR_MATRIX

See Also:
    Constant Field Values

GL_COLOR_MATRIX_STACK_DEPTH

public static final int GL_COLOR_MATRIX_STACK_DEPTH

See Also:
    Constant Field Values

GL_MAX_COLOR_MATRIX_STACK_DEPTH

public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_RED_SCALE

public static final int GL_POST_COLOR_MATRIX_RED_SCALE

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_GREEN_SCALE

public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_BLUE_SCALE

public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_ALPHA_SCALE

public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_RED_BIAS

public static final int GL_POST_COLOR_MATRIX_RED_BIAS

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_GREEN_BIAS

public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_BLUE_BIAS

public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_ALPHA_BIAS

public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS

See Also:
    Constant Field Values

GL_COLOR_TABLE

public static final int GL_COLOR_TABLE

See Also:
    Constant Field Values

GL_POST_CONVOLUTION_COLOR_TABLE

public static final int GL_POST_CONVOLUTION_COLOR_TABLE

See Also:
    Constant Field Values

GL_POST_COLOR_MATRIX_COLOR_TABLE

public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE

See Also:
    Constant Field Values

GL_PROXY_COLOR_TABLE

public static final int GL_PROXY_COLOR_TABLE

See Also:
    Constant Field Values

GL_PROXY_POST_CONVOLUTION_COLOR_TABLE

public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE

See Also:
    Constant Field Values

GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE

public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE

See Also:
    Constant Field Values

GL_COLOR_TABLE_SCALE

public static final int GL_COLOR_TABLE_SCALE

See Also:
    Constant Field Values

GL_COLOR_TABLE_BIAS

public static final int GL_COLOR_TABLE_BIAS

See Also:
    Constant Field Values

GL_COLOR_TABLE_FORMAT

public static final int GL_COLOR_TABLE_FORMAT

See Also:
    Constant Field Values

GL_COLOR_TABLE_WIDTH

public static final int GL_COLOR_TABLE_WIDTH

See Also:
    Constant Field Values

GL_COLOR_TABLE_RED_SIZE

public static final int GL_COLOR_TABLE_RED_SIZE

See Also:
    Constant Field Values

GL_COLOR_TABLE_GREEN_SIZE

public static final int GL_COLOR_TABLE_GREEN_SIZE

See Also:
    Constant Field Values

GL_COLOR_TABLE_BLUE_SIZE

public static final int GL_COLOR_TABLE_BLUE_SIZE

See Also:
    Constant Field Values

GL_COLOR_TABLE_ALPHA_SIZE

public static final int GL_COLOR_TABLE_ALPHA_SIZE

See Also:
    Constant Field Values

GL_COLOR_TABLE_LUMINANCE_SIZE

public static final int GL_COLOR_TABLE_LUMINANCE_SIZE

See Also:
    Constant Field Values

GL_COLOR_TABLE_INTENSITY_SIZE

public static final int GL_COLOR_TABLE_INTENSITY_SIZE

See Also:
    Constant Field Values

GL_CONSTANT_BORDER

public static final int GL_CONSTANT_BORDER

See Also:
    Constant Field Values

GL_REPLICATE_BORDER

public static final int GL_REPLICATE_BORDER

See Also:
    Constant Field Values

GL_CONVOLUTION_BORDER_COLOR

public static final int GL_CONVOLUTION_BORDER_COLOR

See Also:
    Constant Field Values

GL_TEXTURE0

public static final int GL_TEXTURE0

See Also:
    Constant Field Values

GL_TEXTURE1

public static final int GL_TEXTURE1

See Also:
    Constant Field Values

GL_TEXTURE2

public static final int GL_TEXTURE2

See Also:
    Constant Field Values

GL_TEXTURE3

public static final int GL_TEXTURE3

See Also:
    Constant Field Values

GL_TEXTURE4

public static final int GL_TEXTURE4

See Also:
    Constant Field Values

GL_TEXTURE5

public static final int GL_TEXTURE5

See Also:
    Constant Field Values

GL_TEXTURE6

public static final int GL_TEXTURE6

See Also:
    Constant Field Values

GL_TEXTURE7

public static final int GL_TEXTURE7

See Also:
    Constant Field Values

GL_TEXTURE8

public static final int GL_TEXTURE8

See Also:
    Constant Field Values

GL_TEXTURE9

public static final int GL_TEXTURE9

See Also:
    Constant Field Values

GL_TEXTURE10

public static final int GL_TEXTURE10

See Also:
    Constant Field Values

GL_TEXTURE11

public static final int GL_TEXTURE11

See Also:
    Constant Field Values

GL_TEXTURE12

public static final int GL_TEXTURE12

See Also:
    Constant Field Values

GL_TEXTURE13

public static final int GL_TEXTURE13

See Also:
    Constant Field Values

GL_TEXTURE14

public static final int GL_TEXTURE14

See Also:
    Constant Field Values

GL_TEXTURE15

public static final int GL_TEXTURE15

See Also:
    Constant Field Values

GL_TEXTURE16

public static final int GL_TEXTURE16

See Also:
    Constant Field Values

GL_TEXTURE17

public static final int GL_TEXTURE17

See Also:
    Constant Field Values

GL_TEXTURE18

public static final int GL_TEXTURE18

See Also:
    Constant Field Values

GL_TEXTURE19

public static final int GL_TEXTURE19

See Also:
    Constant Field Values

GL_TEXTURE20

public static final int GL_TEXTURE20

See Also:
    Constant Field Values

GL_TEXTURE21

public static final int GL_TEXTURE21

See Also:
    Constant Field Values

GL_TEXTURE22

public static final int GL_TEXTURE22

See Also:
    Constant Field Values

GL_TEXTURE23

public static final int GL_TEXTURE23

See Also:
    Constant Field Values

GL_TEXTURE24

public static final int GL_TEXTURE24

See Also:
    Constant Field Values

GL_TEXTURE25

public static final int GL_TEXTURE25

See Also:
    Constant Field Values

GL_TEXTURE26

public static final int GL_TEXTURE26

See Also:
    Constant Field Values

GL_TEXTURE27

public static final int GL_TEXTURE27

See Also:
    Constant Field Values

GL_TEXTURE28

public static final int GL_TEXTURE28

See Also:
    Constant Field Values

GL_TEXTURE29

public static final int GL_TEXTURE29

See Also:
    Constant Field Values

GL_TEXTURE30

public static final int GL_TEXTURE30

See Also:
    Constant Field Values

GL_TEXTURE31

public static final int GL_TEXTURE31

See Also:
    Constant Field Values

GL_ACTIVE_TEXTURE

public static final int GL_ACTIVE_TEXTURE

See Also:
    Constant Field Values

GL_CLIENT_ACTIVE_TEXTURE

public static final int GL_CLIENT_ACTIVE_TEXTURE

See Also:
    Constant Field Values

GL_MAX_TEXTURE_UNITS

public static final int GL_MAX_TEXTURE_UNITS

See Also:
    Constant Field Values

GL_TRANSPOSE_MODELVIEW_MATRIX

public static final int GL_TRANSPOSE_MODELVIEW_MATRIX

See Also:
    Constant Field Values

GL_TRANSPOSE_PROJECTION_MATRIX

public static final int GL_TRANSPOSE_PROJECTION_MATRIX

See Also:
    Constant Field Values

GL_TRANSPOSE_TEXTURE_MATRIX

public static final int GL_TRANSPOSE_TEXTURE_MATRIX

See Also:
    Constant Field Values

GL_TRANSPOSE_COLOR_MATRIX

public static final int GL_TRANSPOSE_COLOR_MATRIX

See Also:
    Constant Field Values

GL_MULTISAMPLE

public static final int GL_MULTISAMPLE

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_COVERAGE

public static final int GL_SAMPLE_ALPHA_TO_COVERAGE

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_ONE

public static final int GL_SAMPLE_ALPHA_TO_ONE

See Also:
    Constant Field Values

GL_SAMPLE_COVERAGE

public static final int GL_SAMPLE_COVERAGE

See Also:
    Constant Field Values

GL_SAMPLE_BUFFERS

public static final int GL_SAMPLE_BUFFERS

See Also:
    Constant Field Values

GL_SAMPLES

public static final int GL_SAMPLES

See Also:
    Constant Field Values

GL_SAMPLE_COVERAGE_VALUE

public static final int GL_SAMPLE_COVERAGE_VALUE

See Also:
    Constant Field Values

GL_SAMPLE_COVERAGE_INVERT

public static final int GL_SAMPLE_COVERAGE_INVERT

See Also:
    Constant Field Values

GL_MULTISAMPLE_BIT

public static final int GL_MULTISAMPLE_BIT

See Also:
    Constant Field Values

GL_NORMAL_MAP

public static final int GL_NORMAL_MAP

See Also:
    Constant Field Values

GL_REFLECTION_MAP

public static final int GL_REFLECTION_MAP

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP

public static final int GL_TEXTURE_CUBE_MAP

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_CUBE_MAP

public static final int GL_TEXTURE_BINDING_CUBE_MAP

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_POSITIVE_X

public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_NEGATIVE_X

public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_POSITIVE_Y

public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_NEGATIVE_Y

public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_POSITIVE_Z

public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z

See Also:
    Constant Field Values

GL_TEXTURE_CUBE_MAP_NEGATIVE_Z

public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_CUBE_MAP

public static final int GL_PROXY_TEXTURE_CUBE_MAP

See Also:
    Constant Field Values

GL_MAX_CUBE_MAP_TEXTURE_SIZE

public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE

See Also:
    Constant Field Values

GL_COMPRESSED_ALPHA

public static final int GL_COMPRESSED_ALPHA

See Also:
    Constant Field Values

GL_COMPRESSED_LUMINANCE

public static final int GL_COMPRESSED_LUMINANCE

See Also:
    Constant Field Values

GL_COMPRESSED_LUMINANCE_ALPHA

public static final int GL_COMPRESSED_LUMINANCE_ALPHA

See Also:
    Constant Field Values

GL_COMPRESSED_INTENSITY

public static final int GL_COMPRESSED_INTENSITY

See Also:
    Constant Field Values

GL_COMPRESSED_RGB

public static final int GL_COMPRESSED_RGB

See Also:
    Constant Field Values

GL_COMPRESSED_RGBA

public static final int GL_COMPRESSED_RGBA

See Also:
    Constant Field Values

GL_TEXTURE_COMPRESSION_HINT

public static final int GL_TEXTURE_COMPRESSION_HINT

See Also:
    Constant Field Values

GL_TEXTURE_COMPRESSED_IMAGE_SIZE

public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE

See Also:
    Constant Field Values

GL_TEXTURE_COMPRESSED

public static final int GL_TEXTURE_COMPRESSED

See Also:
    Constant Field Values

GL_NUM_COMPRESSED_TEXTURE_FORMATS

public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS

See Also:
    Constant Field Values

GL_COMPRESSED_TEXTURE_FORMATS

public static final int GL_COMPRESSED_TEXTURE_FORMATS

See Also:
    Constant Field Values

GL_CLAMP_TO_BORDER

public static final int GL_CLAMP_TO_BORDER

See Also:
    Constant Field Values

GL_COMBINE

public static final int GL_COMBINE

See Also:
    Constant Field Values

GL_COMBINE_RGB

public static final int GL_COMBINE_RGB

See Also:
    Constant Field Values

GL_COMBINE_ALPHA

public static final int GL_COMBINE_ALPHA

See Also:
    Constant Field Values

GL_SOURCE0_RGB

public static final int GL_SOURCE0_RGB

See Also:
    Constant Field Values

GL_SOURCE1_RGB

public static final int GL_SOURCE1_RGB

See Also:
    Constant Field Values

GL_SOURCE2_RGB

public static final int GL_SOURCE2_RGB

See Also:
    Constant Field Values

GL_SOURCE0_ALPHA

public static final int GL_SOURCE0_ALPHA

See Also:
    Constant Field Values

GL_SOURCE1_ALPHA

public static final int GL_SOURCE1_ALPHA

See Also:
    Constant Field Values

GL_SOURCE2_ALPHA

public static final int GL_SOURCE2_ALPHA

See Also:
    Constant Field Values

GL_OPERAND0_RGB

public static final int GL_OPERAND0_RGB

See Also:
    Constant Field Values

GL_OPERAND1_RGB

public static final int GL_OPERAND1_RGB

See Also:
    Constant Field Values

GL_OPERAND2_RGB

public static final int GL_OPERAND2_RGB

See Also:
    Constant Field Values

GL_OPERAND0_ALPHA

public static final int GL_OPERAND0_ALPHA

See Also:
    Constant Field Values

GL_OPERAND1_ALPHA

public static final int GL_OPERAND1_ALPHA

See Also:
    Constant Field Values

GL_OPERAND2_ALPHA

public static final int GL_OPERAND2_ALPHA

See Also:
    Constant Field Values

GL_RGB_SCALE

public static final int GL_RGB_SCALE

See Also:
    Constant Field Values

GL_ADD_SIGNED

public static final int GL_ADD_SIGNED

See Also:
    Constant Field Values

GL_INTERPOLATE

public static final int GL_INTERPOLATE

See Also:
    Constant Field Values

GL_SUBTRACT

public static final int GL_SUBTRACT

See Also:
    Constant Field Values

GL_CONSTANT

public static final int GL_CONSTANT

See Also:
    Constant Field Values

GL_PRIMARY_COLOR

public static final int GL_PRIMARY_COLOR

See Also:
    Constant Field Values

GL_PREVIOUS

public static final int GL_PREVIOUS

See Also:
    Constant Field Values

GL_DOT3_RGB

public static final int GL_DOT3_RGB

See Also:
    Constant Field Values

GL_DOT3_RGBA

public static final int GL_DOT3_RGBA

See Also:
    Constant Field Values

GL_BLEND_DST_RGB

public static final int GL_BLEND_DST_RGB

See Also:
    Constant Field Values

GL_BLEND_SRC_RGB

public static final int GL_BLEND_SRC_RGB

See Also:
    Constant Field Values

GL_BLEND_DST_ALPHA

public static final int GL_BLEND_DST_ALPHA

See Also:
    Constant Field Values

GL_BLEND_SRC_ALPHA

public static final int GL_BLEND_SRC_ALPHA

See Also:
    Constant Field Values

GL_POINT_SIZE_MIN

public static final int GL_POINT_SIZE_MIN

See Also:
    Constant Field Values

GL_POINT_SIZE_MAX

public static final int GL_POINT_SIZE_MAX

See Also:
    Constant Field Values

GL_POINT_FADE_THRESHOLD_SIZE

public static final int GL_POINT_FADE_THRESHOLD_SIZE

See Also:
    Constant Field Values

GL_POINT_DISTANCE_ATTENUATION

public static final int GL_POINT_DISTANCE_ATTENUATION

See Also:
    Constant Field Values

GL_GENERATE_MIPMAP

public static final int GL_GENERATE_MIPMAP

See Also:
    Constant Field Values

GL_GENERATE_MIPMAP_HINT

public static final int GL_GENERATE_MIPMAP_HINT

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT16

public static final int GL_DEPTH_COMPONENT16

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT24

public static final int GL_DEPTH_COMPONENT24

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT32

public static final int GL_DEPTH_COMPONENT32

See Also:
    Constant Field Values

GL_MIRRORED_REPEAT

public static final int GL_MIRRORED_REPEAT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_SOURCE

public static final int GL_FOG_COORDINATE_SOURCE

See Also:
    Constant Field Values

GL_FOG_COORDINATE

public static final int GL_FOG_COORDINATE

See Also:
    Constant Field Values

GL_FRAGMENT_DEPTH

public static final int GL_FRAGMENT_DEPTH

See Also:
    Constant Field Values

GL_CURRENT_FOG_COORDINATE

public static final int GL_CURRENT_FOG_COORDINATE

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_TYPE

public static final int GL_FOG_COORDINATE_ARRAY_TYPE

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_STRIDE

public static final int GL_FOG_COORDINATE_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_POINTER

public static final int GL_FOG_COORDINATE_ARRAY_POINTER

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY

public static final int GL_FOG_COORDINATE_ARRAY

See Also:
    Constant Field Values

GL_COLOR_SUM

public static final int GL_COLOR_SUM

See Also:
    Constant Field Values

GL_CURRENT_SECONDARY_COLOR

public static final int GL_CURRENT_SECONDARY_COLOR

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_SIZE

public static final int GL_SECONDARY_COLOR_ARRAY_SIZE

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_TYPE

public static final int GL_SECONDARY_COLOR_ARRAY_TYPE

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_STRIDE

public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_POINTER

public static final int GL_SECONDARY_COLOR_ARRAY_POINTER

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY

public static final int GL_SECONDARY_COLOR_ARRAY

See Also:
    Constant Field Values

GL_MAX_TEXTURE_LOD_BIAS

public static final int GL_MAX_TEXTURE_LOD_BIAS

See Also:
    Constant Field Values

GL_TEXTURE_FILTER_CONTROL

public static final int GL_TEXTURE_FILTER_CONTROL

See Also:
    Constant Field Values

GL_TEXTURE_LOD_BIAS

public static final int GL_TEXTURE_LOD_BIAS

See Also:
    Constant Field Values

GL_INCR_WRAP

public static final int GL_INCR_WRAP

See Also:
    Constant Field Values

GL_DECR_WRAP

public static final int GL_DECR_WRAP

See Also:
    Constant Field Values

GL_TEXTURE_DEPTH_SIZE

public static final int GL_TEXTURE_DEPTH_SIZE

See Also:
    Constant Field Values

GL_DEPTH_TEXTURE_MODE

public static final int GL_DEPTH_TEXTURE_MODE

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_MODE

public static final int GL_TEXTURE_COMPARE_MODE

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_FUNC

public static final int GL_TEXTURE_COMPARE_FUNC

See Also:
    Constant Field Values

GL_COMPARE_R_TO_TEXTURE

public static final int GL_COMPARE_R_TO_TEXTURE

See Also:
    Constant Field Values

GL_BUFFER_SIZE

public static final int GL_BUFFER_SIZE

See Also:
    Constant Field Values

GL_BUFFER_USAGE

public static final int GL_BUFFER_USAGE

See Also:
    Constant Field Values

GL_QUERY_COUNTER_BITS

public static final int GL_QUERY_COUNTER_BITS

See Also:
    Constant Field Values

GL_CURRENT_QUERY

public static final int GL_CURRENT_QUERY

See Also:
    Constant Field Values

GL_QUERY_RESULT

public static final int GL_QUERY_RESULT

See Also:
    Constant Field Values

GL_QUERY_RESULT_AVAILABLE

public static final int GL_QUERY_RESULT_AVAILABLE

See Also:
    Constant Field Values

GL_ARRAY_BUFFER

public static final int GL_ARRAY_BUFFER

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_BUFFER

public static final int GL_ELEMENT_ARRAY_BUFFER

See Also:
    Constant Field Values

GL_ARRAY_BUFFER_BINDING

public static final int GL_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_BUFFER_BINDING

public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_BUFFER_BINDING

public static final int GL_VERTEX_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_NORMAL_ARRAY_BUFFER_BINDING

public static final int GL_NORMAL_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_COLOR_ARRAY_BUFFER_BINDING

public static final int GL_COLOR_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_INDEX_ARRAY_BUFFER_BINDING

public static final int GL_INDEX_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING

public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_EDGE_FLAG_ARRAY_BUFFER_BINDING

public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING

public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING

public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_BUFFER_BINDING

public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING

public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_READ_ONLY

public static final int GL_READ_ONLY

See Also:
    Constant Field Values

GL_WRITE_ONLY

public static final int GL_WRITE_ONLY

See Also:
    Constant Field Values

GL_READ_WRITE

public static final int GL_READ_WRITE

See Also:
    Constant Field Values

GL_BUFFER_ACCESS

public static final int GL_BUFFER_ACCESS

See Also:
    Constant Field Values

GL_BUFFER_MAPPED

public static final int GL_BUFFER_MAPPED

See Also:
    Constant Field Values

GL_BUFFER_MAP_POINTER

public static final int GL_BUFFER_MAP_POINTER

See Also:
    Constant Field Values

GL_STREAM_DRAW

public static final int GL_STREAM_DRAW

See Also:
    Constant Field Values

GL_STREAM_READ

public static final int GL_STREAM_READ

See Also:
    Constant Field Values

GL_STREAM_COPY

public static final int GL_STREAM_COPY

See Also:
    Constant Field Values

GL_STATIC_DRAW

public static final int GL_STATIC_DRAW

See Also:
    Constant Field Values

GL_STATIC_READ

public static final int GL_STATIC_READ

See Also:
    Constant Field Values

GL_STATIC_COPY

public static final int GL_STATIC_COPY

See Also:
    Constant Field Values

GL_DYNAMIC_DRAW

public static final int GL_DYNAMIC_DRAW

See Also:
    Constant Field Values

GL_DYNAMIC_READ

public static final int GL_DYNAMIC_READ

See Also:
    Constant Field Values

GL_DYNAMIC_COPY

public static final int GL_DYNAMIC_COPY

See Also:
    Constant Field Values

GL_SAMPLES_PASSED

public static final int GL_SAMPLES_PASSED

See Also:
    Constant Field Values

GL_FOG_COORD_SRC

public static final int GL_FOG_COORD_SRC

See Also:
    Constant Field Values

GL_FOG_COORD

public static final int GL_FOG_COORD

See Also:
    Constant Field Values

GL_CURRENT_FOG_COORD

public static final int GL_CURRENT_FOG_COORD

See Also:
    Constant Field Values

GL_FOG_COORD_ARRAY_TYPE

public static final int GL_FOG_COORD_ARRAY_TYPE

See Also:
    Constant Field Values

GL_FOG_COORD_ARRAY_STRIDE

public static final int GL_FOG_COORD_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_FOG_COORD_ARRAY_POINTER

public static final int GL_FOG_COORD_ARRAY_POINTER

See Also:
    Constant Field Values

GL_FOG_COORD_ARRAY

public static final int GL_FOG_COORD_ARRAY

See Also:
    Constant Field Values

GL_FOG_COORD_ARRAY_BUFFER_BINDING

public static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING

See Also:
    Constant Field Values

GL_SRC0_RGB

public static final int GL_SRC0_RGB

See Also:
    Constant Field Values

GL_SRC1_RGB

public static final int GL_SRC1_RGB

See Also:
    Constant Field Values

GL_SRC2_RGB

public static final int GL_SRC2_RGB

See Also:
    Constant Field Values

GL_SRC0_ALPHA

public static final int GL_SRC0_ALPHA

See Also:
    Constant Field Values

GL_SRC1_ALPHA

public static final int GL_SRC1_ALPHA

See Also:
    Constant Field Values

GL_SRC2_ALPHA

public static final int GL_SRC2_ALPHA

See Also:
    Constant Field Values

GL_BLEND_EQUATION_RGB

public static final int GL_BLEND_EQUATION_RGB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_ENABLED

public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_SIZE

public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_STRIDE

public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_TYPE

public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE

See Also:
    Constant Field Values

GL_CURRENT_VERTEX_ATTRIB

public static final int GL_CURRENT_VERTEX_ATTRIB

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_POINT_SIZE

public static final int GL_VERTEX_PROGRAM_POINT_SIZE

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_TWO_SIDE

public static final int GL_VERTEX_PROGRAM_TWO_SIDE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_POINTER

public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER

See Also:
    Constant Field Values

GL_STENCIL_BACK_FUNC

public static final int GL_STENCIL_BACK_FUNC

See Also:
    Constant Field Values

GL_STENCIL_BACK_FAIL

public static final int GL_STENCIL_BACK_FAIL

See Also:
    Constant Field Values

GL_STENCIL_BACK_PASS_DEPTH_FAIL

public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL

See Also:
    Constant Field Values

GL_STENCIL_BACK_PASS_DEPTH_PASS

public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS

See Also:
    Constant Field Values

GL_MAX_DRAW_BUFFERS

public static final int GL_MAX_DRAW_BUFFERS

See Also:
    Constant Field Values

GL_DRAW_BUFFER0

public static final int GL_DRAW_BUFFER0

See Also:
    Constant Field Values

GL_DRAW_BUFFER1

public static final int GL_DRAW_BUFFER1

See Also:
    Constant Field Values

GL_DRAW_BUFFER2

public static final int GL_DRAW_BUFFER2

See Also:
    Constant Field Values

GL_DRAW_BUFFER3

public static final int GL_DRAW_BUFFER3

See Also:
    Constant Field Values

GL_DRAW_BUFFER4

public static final int GL_DRAW_BUFFER4

See Also:
    Constant Field Values

GL_DRAW_BUFFER5

public static final int GL_DRAW_BUFFER5

See Also:
    Constant Field Values

GL_DRAW_BUFFER6

public static final int GL_DRAW_BUFFER6

See Also:
    Constant Field Values

GL_DRAW_BUFFER7

public static final int GL_DRAW_BUFFER7

See Also:
    Constant Field Values

GL_DRAW_BUFFER8

public static final int GL_DRAW_BUFFER8

See Also:
    Constant Field Values

GL_DRAW_BUFFER9

public static final int GL_DRAW_BUFFER9

See Also:
    Constant Field Values

GL_DRAW_BUFFER10

public static final int GL_DRAW_BUFFER10

See Also:
    Constant Field Values

GL_DRAW_BUFFER11

public static final int GL_DRAW_BUFFER11

See Also:
    Constant Field Values

GL_DRAW_BUFFER12

public static final int GL_DRAW_BUFFER12

See Also:
    Constant Field Values

GL_DRAW_BUFFER13

public static final int GL_DRAW_BUFFER13

See Also:
    Constant Field Values

GL_DRAW_BUFFER14

public static final int GL_DRAW_BUFFER14

See Also:
    Constant Field Values

GL_DRAW_BUFFER15

public static final int GL_DRAW_BUFFER15

See Also:
    Constant Field Values

GL_BLEND_EQUATION_ALPHA

public static final int GL_BLEND_EQUATION_ALPHA

See Also:
    Constant Field Values

GL_POINT_SPRITE

public static final int GL_POINT_SPRITE

See Also:
    Constant Field Values

GL_COORD_REPLACE

public static final int GL_COORD_REPLACE

See Also:
    Constant Field Values

GL_MAX_VERTEX_ATTRIBS

public static final int GL_MAX_VERTEX_ATTRIBS

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_NORMALIZED

public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED

See Also:
    Constant Field Values

GL_MAX_TEXTURE_COORDS

public static final int GL_MAX_TEXTURE_COORDS

See Also:
    Constant Field Values

GL_MAX_TEXTURE_IMAGE_UNITS

public static final int GL_MAX_TEXTURE_IMAGE_UNITS

See Also:
    Constant Field Values

GL_FRAGMENT_SHADER

public static final int GL_FRAGMENT_SHADER

See Also:
    Constant Field Values

GL_VERTEX_SHADER

public static final int GL_VERTEX_SHADER

See Also:
    Constant Field Values

GL_MAX_FRAGMENT_UNIFORM_COMPONENTS

public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS

See Also:
    Constant Field Values

GL_MAX_VERTEX_UNIFORM_COMPONENTS

public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS

See Also:
    Constant Field Values

GL_MAX_VARYING_FLOATS

public static final int GL_MAX_VARYING_FLOATS

See Also:
    Constant Field Values

GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS

public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS

See Also:
    Constant Field Values

GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS

public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS

See Also:
    Constant Field Values

GL_SHADER_TYPE

public static final int GL_SHADER_TYPE

See Also:
    Constant Field Values

GL_FLOAT_VEC2

public static final int GL_FLOAT_VEC2

See Also:
    Constant Field Values

GL_FLOAT_VEC3

public static final int GL_FLOAT_VEC3

See Also:
    Constant Field Values

GL_FLOAT_VEC4

public static final int GL_FLOAT_VEC4

See Also:
    Constant Field Values

GL_INT_VEC2

public static final int GL_INT_VEC2

See Also:
    Constant Field Values

GL_INT_VEC3

public static final int GL_INT_VEC3

See Also:
    Constant Field Values

GL_INT_VEC4

public static final int GL_INT_VEC4

See Also:
    Constant Field Values

GL_BOOL

public static final int GL_BOOL

See Also:
    Constant Field Values

GL_BOOL_VEC2

public static final int GL_BOOL_VEC2

See Also:
    Constant Field Values

GL_BOOL_VEC3

public static final int GL_BOOL_VEC3

See Also:
    Constant Field Values

GL_BOOL_VEC4

public static final int GL_BOOL_VEC4

See Also:
    Constant Field Values

GL_FLOAT_MAT2

public static final int GL_FLOAT_MAT2

See Also:
    Constant Field Values

GL_FLOAT_MAT3

public static final int GL_FLOAT_MAT3

See Also:
    Constant Field Values

GL_FLOAT_MAT4

public static final int GL_FLOAT_MAT4

See Also:
    Constant Field Values

GL_SAMPLER_1D

public static final int GL_SAMPLER_1D

See Also:
    Constant Field Values

GL_SAMPLER_2D

public static final int GL_SAMPLER_2D

See Also:
    Constant Field Values

GL_SAMPLER_3D

public static final int GL_SAMPLER_3D

See Also:
    Constant Field Values

GL_SAMPLER_CUBE

public static final int GL_SAMPLER_CUBE

See Also:
    Constant Field Values

GL_SAMPLER_1D_SHADOW

public static final int GL_SAMPLER_1D_SHADOW

See Also:
    Constant Field Values

GL_SAMPLER_2D_SHADOW

public static final int GL_SAMPLER_2D_SHADOW

See Also:
    Constant Field Values

GL_DELETE_STATUS

public static final int GL_DELETE_STATUS

See Also:
    Constant Field Values

GL_COMPILE_STATUS

public static final int GL_COMPILE_STATUS

See Also:
    Constant Field Values

GL_LINK_STATUS

public static final int GL_LINK_STATUS

See Also:
    Constant Field Values

GL_VALIDATE_STATUS

public static final int GL_VALIDATE_STATUS

See Also:
    Constant Field Values

GL_INFO_LOG_LENGTH

public static final int GL_INFO_LOG_LENGTH

See Also:
    Constant Field Values

GL_ATTACHED_SHADERS

public static final int GL_ATTACHED_SHADERS

See Also:
    Constant Field Values

GL_ACTIVE_UNIFORMS

public static final int GL_ACTIVE_UNIFORMS

See Also:
    Constant Field Values

GL_ACTIVE_UNIFORM_MAX_LENGTH

public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH

See Also:
    Constant Field Values

GL_SHADER_SOURCE_LENGTH

public static final int GL_SHADER_SOURCE_LENGTH

See Also:
    Constant Field Values

GL_ACTIVE_ATTRIBUTES

public static final int GL_ACTIVE_ATTRIBUTES

See Also:
    Constant Field Values

GL_ACTIVE_ATTRIBUTE_MAX_LENGTH

public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH

See Also:
    Constant Field Values

GL_FRAGMENT_SHADER_DERIVATIVE_HINT

public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT

See Also:
    Constant Field Values

GL_SHADING_LANGUAGE_VERSION

public static final int GL_SHADING_LANGUAGE_VERSION

See Also:
    Constant Field Values

GL_CURRENT_PROGRAM

public static final int GL_CURRENT_PROGRAM

See Also:
    Constant Field Values

GL_POINT_SPRITE_COORD_ORIGIN

public static final int GL_POINT_SPRITE_COORD_ORIGIN

See Also:
    Constant Field Values

GL_LOWER_LEFT

public static final int GL_LOWER_LEFT

See Also:
    Constant Field Values

GL_UPPER_LEFT

public static final int GL_UPPER_LEFT

See Also:
    Constant Field Values

GL_STENCIL_BACK_REF

public static final int GL_STENCIL_BACK_REF

See Also:
    Constant Field Values

GL_STENCIL_BACK_VALUE_MASK

public static final int GL_STENCIL_BACK_VALUE_MASK

See Also:
    Constant Field Values

GL_STENCIL_BACK_WRITEMASK

public static final int GL_STENCIL_BACK_WRITEMASK

See Also:
    Constant Field Values

GL_POINT_SIZE_MIN_ARB

public static final int GL_POINT_SIZE_MIN_ARB

See Also:
    Constant Field Values

GL_POINT_SIZE_MAX_ARB

public static final int GL_POINT_SIZE_MAX_ARB

See Also:
    Constant Field Values

GL_POINT_FADE_THRESHOLD_SIZE_ARB

public static final int GL_POINT_FADE_THRESHOLD_SIZE_ARB

See Also:
    Constant Field Values

GL_POINT_DISTANCE_ATTENUATION_ARB

public static final int GL_POINT_DISTANCE_ATTENUATION_ARB

See Also:
    Constant Field Values

GL_MAX_VERTEX_UNITS_ARB

public static final int GL_MAX_VERTEX_UNITS_ARB

See Also:
    Constant Field Values

GL_ACTIVE_VERTEX_UNITS_ARB

public static final int GL_ACTIVE_VERTEX_UNITS_ARB

See Also:
    Constant Field Values

GL_WEIGHT_SUM_UNITY_ARB

public static final int GL_WEIGHT_SUM_UNITY_ARB

See Also:
    Constant Field Values

GL_VERTEX_BLEND_ARB

public static final int GL_VERTEX_BLEND_ARB

See Also:
    Constant Field Values

GL_CURRENT_WEIGHT_ARB

public static final int GL_CURRENT_WEIGHT_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_TYPE_ARB

public static final int GL_WEIGHT_ARRAY_TYPE_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_STRIDE_ARB

public static final int GL_WEIGHT_ARRAY_STRIDE_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_SIZE_ARB

public static final int GL_WEIGHT_ARRAY_SIZE_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_POINTER_ARB

public static final int GL_WEIGHT_ARRAY_POINTER_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_ARB

public static final int GL_WEIGHT_ARRAY_ARB

See Also:
    Constant Field Values

GL_MODELVIEW0_ARB

public static final int GL_MODELVIEW0_ARB

See Also:
    Constant Field Values

GL_MODELVIEW1_ARB

public static final int GL_MODELVIEW1_ARB

See Also:
    Constant Field Values

GL_MODELVIEW2_ARB

public static final int GL_MODELVIEW2_ARB

See Also:
    Constant Field Values

GL_MODELVIEW3_ARB

public static final int GL_MODELVIEW3_ARB

See Also:
    Constant Field Values

GL_MODELVIEW4_ARB

public static final int GL_MODELVIEW4_ARB

See Also:
    Constant Field Values

GL_MODELVIEW5_ARB

public static final int GL_MODELVIEW5_ARB

See Also:
    Constant Field Values

GL_MODELVIEW6_ARB

public static final int GL_MODELVIEW6_ARB

See Also:
    Constant Field Values

GL_MODELVIEW7_ARB

public static final int GL_MODELVIEW7_ARB

See Also:
    Constant Field Values

GL_MODELVIEW8_ARB

public static final int GL_MODELVIEW8_ARB

See Also:
    Constant Field Values

GL_MODELVIEW9_ARB

public static final int GL_MODELVIEW9_ARB

See Also:
    Constant Field Values

GL_MODELVIEW10_ARB

public static final int GL_MODELVIEW10_ARB

See Also:
    Constant Field Values

GL_MODELVIEW11_ARB

public static final int GL_MODELVIEW11_ARB

See Also:
    Constant Field Values

GL_MODELVIEW12_ARB

public static final int GL_MODELVIEW12_ARB

See Also:
    Constant Field Values

GL_MODELVIEW13_ARB

public static final int GL_MODELVIEW13_ARB

See Also:
    Constant Field Values

GL_MODELVIEW14_ARB

public static final int GL_MODELVIEW14_ARB

See Also:
    Constant Field Values

GL_MODELVIEW15_ARB

public static final int GL_MODELVIEW15_ARB

See Also:
    Constant Field Values

GL_MODELVIEW16_ARB

public static final int GL_MODELVIEW16_ARB

See Also:
    Constant Field Values

GL_MODELVIEW17_ARB

public static final int GL_MODELVIEW17_ARB

See Also:
    Constant Field Values

GL_MODELVIEW18_ARB

public static final int GL_MODELVIEW18_ARB

See Also:
    Constant Field Values

GL_MODELVIEW19_ARB

public static final int GL_MODELVIEW19_ARB

See Also:
    Constant Field Values

GL_MODELVIEW20_ARB

public static final int GL_MODELVIEW20_ARB

See Also:
    Constant Field Values

GL_MODELVIEW21_ARB

public static final int GL_MODELVIEW21_ARB

See Also:
    Constant Field Values

GL_MODELVIEW22_ARB

public static final int GL_MODELVIEW22_ARB

See Also:
    Constant Field Values

GL_MODELVIEW23_ARB

public static final int GL_MODELVIEW23_ARB

See Also:
    Constant Field Values

GL_MODELVIEW24_ARB

public static final int GL_MODELVIEW24_ARB

See Also:
    Constant Field Values

GL_MODELVIEW25_ARB

public static final int GL_MODELVIEW25_ARB

See Also:
    Constant Field Values

GL_MODELVIEW26_ARB

public static final int GL_MODELVIEW26_ARB

See Also:
    Constant Field Values

GL_MODELVIEW27_ARB

public static final int GL_MODELVIEW27_ARB

See Also:
    Constant Field Values

GL_MODELVIEW28_ARB

public static final int GL_MODELVIEW28_ARB

See Also:
    Constant Field Values

GL_MODELVIEW29_ARB

public static final int GL_MODELVIEW29_ARB

See Also:
    Constant Field Values

GL_MODELVIEW30_ARB

public static final int GL_MODELVIEW30_ARB

See Also:
    Constant Field Values

GL_MODELVIEW31_ARB

public static final int GL_MODELVIEW31_ARB

See Also:
    Constant Field Values

GL_MATRIX_PALETTE_ARB

public static final int GL_MATRIX_PALETTE_ARB

See Also:
    Constant Field Values

GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB

public static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB

See Also:
    Constant Field Values

GL_MAX_PALETTE_MATRICES_ARB

public static final int GL_MAX_PALETTE_MATRICES_ARB

See Also:
    Constant Field Values

GL_CURRENT_PALETTE_MATRIX_ARB

public static final int GL_CURRENT_PALETTE_MATRIX_ARB

See Also:
    Constant Field Values

GL_MATRIX_INDEX_ARRAY_ARB

public static final int GL_MATRIX_INDEX_ARRAY_ARB

See Also:
    Constant Field Values

GL_CURRENT_MATRIX_INDEX_ARB

public static final int GL_CURRENT_MATRIX_INDEX_ARB

See Also:
    Constant Field Values

GL_MATRIX_INDEX_ARRAY_SIZE_ARB

public static final int GL_MATRIX_INDEX_ARRAY_SIZE_ARB

See Also:
    Constant Field Values

GL_MATRIX_INDEX_ARRAY_TYPE_ARB

public static final int GL_MATRIX_INDEX_ARRAY_TYPE_ARB

See Also:
    Constant Field Values

GL_MATRIX_INDEX_ARRAY_STRIDE_ARB

public static final int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB

See Also:
    Constant Field Values

GL_MATRIX_INDEX_ARRAY_POINTER_ARB

public static final int GL_MATRIX_INDEX_ARRAY_POINTER_ARB

See Also:
    Constant Field Values

GL_MIRRORED_REPEAT_ARB

public static final int GL_MIRRORED_REPEAT_ARB

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT16_ARB

public static final int GL_DEPTH_COMPONENT16_ARB

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT24_ARB

public static final int GL_DEPTH_COMPONENT24_ARB

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT32_ARB

public static final int GL_DEPTH_COMPONENT32_ARB

See Also:
    Constant Field Values

GL_TEXTURE_DEPTH_SIZE_ARB

public static final int GL_TEXTURE_DEPTH_SIZE_ARB

See Also:
    Constant Field Values

GL_DEPTH_TEXTURE_MODE_ARB

public static final int GL_DEPTH_TEXTURE_MODE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_MODE_ARB

public static final int GL_TEXTURE_COMPARE_MODE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_FUNC_ARB

public static final int GL_TEXTURE_COMPARE_FUNC_ARB

See Also:
    Constant Field Values

GL_COMPARE_R_TO_TEXTURE_ARB

public static final int GL_COMPARE_R_TO_TEXTURE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_FAIL_VALUE_ARB

public static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB

See Also:
    Constant Field Values

GL_COLOR_SUM_ARB

public static final int GL_COLOR_SUM_ARB

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_ARB

public static final int GL_VERTEX_PROGRAM_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB

See Also:
    Constant Field Values

GL_CURRENT_VERTEX_ATTRIB_ARB

public static final int GL_CURRENT_VERTEX_ATTRIB_ARB

See Also:
    Constant Field Values

GL_PROGRAM_LENGTH_ARB

public static final int GL_PROGRAM_LENGTH_ARB

See Also:
    Constant Field Values

GL_PROGRAM_STRING_ARB

public static final int GL_PROGRAM_STRING_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB

public static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_MATRICES_ARB

public static final int GL_MAX_PROGRAM_MATRICES_ARB

See Also:
    Constant Field Values

GL_CURRENT_MATRIX_STACK_DEPTH_ARB

public static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB

See Also:
    Constant Field Values

GL_CURRENT_MATRIX_ARB

public static final int GL_CURRENT_MATRIX_ARB

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_POINT_SIZE_ARB

public static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_TWO_SIDE_ARB

public static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB

See Also:
    Constant Field Values

GL_PROGRAM_ERROR_POSITION_ARB

public static final int GL_PROGRAM_ERROR_POSITION_ARB

See Also:
    Constant Field Values

GL_PROGRAM_BINDING_ARB

public static final int GL_PROGRAM_BINDING_ARB

See Also:
    Constant Field Values

GL_MAX_VERTEX_ATTRIBS_ARB

public static final int GL_MAX_VERTEX_ATTRIBS_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB

See Also:
    Constant Field Values

GL_PROGRAM_ERROR_STRING_ARB

public static final int GL_PROGRAM_ERROR_STRING_ARB

See Also:
    Constant Field Values

GL_PROGRAM_FORMAT_ASCII_ARB

public static final int GL_PROGRAM_FORMAT_ASCII_ARB

See Also:
    Constant Field Values

GL_PROGRAM_FORMAT_ARB

public static final int GL_PROGRAM_FORMAT_ARB

See Also:
    Constant Field Values

GL_PROGRAM_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_TEMPORARIES_ARB

public static final int GL_PROGRAM_TEMPORARIES_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_TEMPORARIES_ARB

public static final int GL_MAX_PROGRAM_TEMPORARIES_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_TEMPORARIES_ARB

public static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB

public static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB

See Also:
    Constant Field Values

GL_PROGRAM_PARAMETERS_ARB

public static final int GL_PROGRAM_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_PARAMETERS_ARB

public static final int GL_MAX_PROGRAM_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_PARAMETERS_ARB

public static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_ATTRIBS_ARB

public static final int GL_PROGRAM_ATTRIBS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_ATTRIBS_ARB

public static final int GL_MAX_PROGRAM_ATTRIBS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_ATTRIBS_ARB

public static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_ADDRESS_REGISTERS_ARB

public static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB

public static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

public static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB

public static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_ENV_PARAMETERS_ARB

public static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB

public static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB

See Also:
    Constant Field Values

GL_TRANSPOSE_CURRENT_MATRIX_ARB

public static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB

See Also:
    Constant Field Values

GL_MATRIX0_ARB

public static final int GL_MATRIX0_ARB

See Also:
    Constant Field Values

GL_MATRIX1_ARB

public static final int GL_MATRIX1_ARB

See Also:
    Constant Field Values

GL_MATRIX2_ARB

public static final int GL_MATRIX2_ARB

See Also:
    Constant Field Values

GL_MATRIX3_ARB

public static final int GL_MATRIX3_ARB

See Also:
    Constant Field Values

GL_MATRIX4_ARB

public static final int GL_MATRIX4_ARB

See Also:
    Constant Field Values

GL_MATRIX5_ARB

public static final int GL_MATRIX5_ARB

See Also:
    Constant Field Values

GL_MATRIX6_ARB

public static final int GL_MATRIX6_ARB

See Also:
    Constant Field Values

GL_MATRIX7_ARB

public static final int GL_MATRIX7_ARB

See Also:
    Constant Field Values

GL_MATRIX8_ARB

public static final int GL_MATRIX8_ARB

See Also:
    Constant Field Values

GL_MATRIX9_ARB

public static final int GL_MATRIX9_ARB

See Also:
    Constant Field Values

GL_MATRIX10_ARB

public static final int GL_MATRIX10_ARB

See Also:
    Constant Field Values

GL_MATRIX11_ARB

public static final int GL_MATRIX11_ARB

See Also:
    Constant Field Values

GL_MATRIX12_ARB

public static final int GL_MATRIX12_ARB

See Also:
    Constant Field Values

GL_MATRIX13_ARB

public static final int GL_MATRIX13_ARB

See Also:
    Constant Field Values

GL_MATRIX14_ARB

public static final int GL_MATRIX14_ARB

See Also:
    Constant Field Values

GL_MATRIX15_ARB

public static final int GL_MATRIX15_ARB

See Also:
    Constant Field Values

GL_MATRIX16_ARB

public static final int GL_MATRIX16_ARB

See Also:
    Constant Field Values

GL_MATRIX17_ARB

public static final int GL_MATRIX17_ARB

See Also:
    Constant Field Values

GL_MATRIX18_ARB

public static final int GL_MATRIX18_ARB

See Also:
    Constant Field Values

GL_MATRIX19_ARB

public static final int GL_MATRIX19_ARB

See Also:
    Constant Field Values

GL_MATRIX20_ARB

public static final int GL_MATRIX20_ARB

See Also:
    Constant Field Values

GL_MATRIX21_ARB

public static final int GL_MATRIX21_ARB

See Also:
    Constant Field Values

GL_MATRIX22_ARB

public static final int GL_MATRIX22_ARB

See Also:
    Constant Field Values

GL_MATRIX23_ARB

public static final int GL_MATRIX23_ARB

See Also:
    Constant Field Values

GL_MATRIX24_ARB

public static final int GL_MATRIX24_ARB

See Also:
    Constant Field Values

GL_MATRIX25_ARB

public static final int GL_MATRIX25_ARB

See Also:
    Constant Field Values

GL_MATRIX26_ARB

public static final int GL_MATRIX26_ARB

See Also:
    Constant Field Values

GL_MATRIX27_ARB

public static final int GL_MATRIX27_ARB

See Also:
    Constant Field Values

GL_MATRIX28_ARB

public static final int GL_MATRIX28_ARB

See Also:
    Constant Field Values

GL_MATRIX29_ARB

public static final int GL_MATRIX29_ARB

See Also:
    Constant Field Values

GL_MATRIX30_ARB

public static final int GL_MATRIX30_ARB

See Also:
    Constant Field Values

GL_MATRIX31_ARB

public static final int GL_MATRIX31_ARB

See Also:
    Constant Field Values

GL_FRAGMENT_PROGRAM_ARB

public static final int GL_FRAGMENT_PROGRAM_ARB

See Also:
    Constant Field Values

GL_PROGRAM_ALU_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_TEX_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_TEX_INDIRECTIONS_ARB

public static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

public static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

public static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB

public static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

public static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

See Also:
    Constant Field Values

GL_MAX_TEXTURE_COORDS_ARB

public static final int GL_MAX_TEXTURE_COORDS_ARB

See Also:
    Constant Field Values

GL_MAX_TEXTURE_IMAGE_UNITS_ARB

public static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB

See Also:
    Constant Field Values

GL_BUFFER_SIZE_ARB

public static final int GL_BUFFER_SIZE_ARB

See Also:
    Constant Field Values

GL_BUFFER_USAGE_ARB

public static final int GL_BUFFER_USAGE_ARB

See Also:
    Constant Field Values

GL_ARRAY_BUFFER_ARB

public static final int GL_ARRAY_BUFFER_ARB

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_BUFFER_ARB

public static final int GL_ELEMENT_ARRAY_BUFFER_ARB

See Also:
    Constant Field Values

GL_ARRAY_BUFFER_BINDING_ARB

public static final int GL_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB

public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_BUFFER_BINDING_ARB

public static final int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_NORMAL_ARRAY_BUFFER_BINDING_ARB

public static final int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_COLOR_ARRAY_BUFFER_BINDING_ARB

public static final int GL_COLOR_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_INDEX_ARRAY_BUFFER_BINDING_ARB

public static final int GL_INDEX_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB

public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB

public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB

public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB

public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB

public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB

public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_READ_ONLY_ARB

public static final int GL_READ_ONLY_ARB

See Also:
    Constant Field Values

GL_WRITE_ONLY_ARB

public static final int GL_WRITE_ONLY_ARB

See Also:
    Constant Field Values

GL_READ_WRITE_ARB

public static final int GL_READ_WRITE_ARB

See Also:
    Constant Field Values

GL_BUFFER_ACCESS_ARB

public static final int GL_BUFFER_ACCESS_ARB

See Also:
    Constant Field Values

GL_BUFFER_MAPPED_ARB

public static final int GL_BUFFER_MAPPED_ARB

See Also:
    Constant Field Values

GL_BUFFER_MAP_POINTER_ARB

public static final int GL_BUFFER_MAP_POINTER_ARB

See Also:
    Constant Field Values

GL_STREAM_DRAW_ARB

public static final int GL_STREAM_DRAW_ARB

See Also:
    Constant Field Values

GL_STREAM_READ_ARB

public static final int GL_STREAM_READ_ARB

See Also:
    Constant Field Values

GL_STREAM_COPY_ARB

public static final int GL_STREAM_COPY_ARB

See Also:
    Constant Field Values

GL_STATIC_DRAW_ARB

public static final int GL_STATIC_DRAW_ARB

See Also:
    Constant Field Values

GL_STATIC_READ_ARB

public static final int GL_STATIC_READ_ARB

See Also:
    Constant Field Values

GL_STATIC_COPY_ARB

public static final int GL_STATIC_COPY_ARB

See Also:
    Constant Field Values

GL_DYNAMIC_DRAW_ARB

public static final int GL_DYNAMIC_DRAW_ARB

See Also:
    Constant Field Values

GL_DYNAMIC_READ_ARB

public static final int GL_DYNAMIC_READ_ARB

See Also:
    Constant Field Values

GL_DYNAMIC_COPY_ARB

public static final int GL_DYNAMIC_COPY_ARB

See Also:
    Constant Field Values

GL_QUERY_COUNTER_BITS_ARB

public static final int GL_QUERY_COUNTER_BITS_ARB

See Also:
    Constant Field Values

GL_CURRENT_QUERY_ARB

public static final int GL_CURRENT_QUERY_ARB

See Also:
    Constant Field Values

GL_QUERY_RESULT_ARB

public static final int GL_QUERY_RESULT_ARB

See Also:
    Constant Field Values

GL_QUERY_RESULT_AVAILABLE_ARB

public static final int GL_QUERY_RESULT_AVAILABLE_ARB

See Also:
    Constant Field Values

GL_SAMPLES_PASSED_ARB

public static final int GL_SAMPLES_PASSED_ARB

See Also:
    Constant Field Values

GL_PROGRAM_OBJECT_ARB

public static final int GL_PROGRAM_OBJECT_ARB

See Also:
    Constant Field Values

GL_SHADER_OBJECT_ARB

public static final int GL_SHADER_OBJECT_ARB

See Also:
    Constant Field Values

GL_OBJECT_TYPE_ARB

public static final int GL_OBJECT_TYPE_ARB

See Also:
    Constant Field Values

GL_OBJECT_SUBTYPE_ARB

public static final int GL_OBJECT_SUBTYPE_ARB

See Also:
    Constant Field Values

GL_FLOAT_VEC2_ARB

public static final int GL_FLOAT_VEC2_ARB

See Also:
    Constant Field Values

GL_FLOAT_VEC3_ARB

public static final int GL_FLOAT_VEC3_ARB

See Also:
    Constant Field Values

GL_FLOAT_VEC4_ARB

public static final int GL_FLOAT_VEC4_ARB

See Also:
    Constant Field Values

GL_INT_VEC2_ARB

public static final int GL_INT_VEC2_ARB

See Also:
    Constant Field Values

GL_INT_VEC3_ARB

public static final int GL_INT_VEC3_ARB

See Also:
    Constant Field Values

GL_INT_VEC4_ARB

public static final int GL_INT_VEC4_ARB

See Also:
    Constant Field Values

GL_BOOL_ARB

public static final int GL_BOOL_ARB

See Also:
    Constant Field Values

GL_BOOL_VEC2_ARB

public static final int GL_BOOL_VEC2_ARB

See Also:
    Constant Field Values

GL_BOOL_VEC3_ARB

public static final int GL_BOOL_VEC3_ARB

See Also:
    Constant Field Values

GL_BOOL_VEC4_ARB

public static final int GL_BOOL_VEC4_ARB

See Also:
    Constant Field Values

GL_FLOAT_MAT2_ARB

public static final int GL_FLOAT_MAT2_ARB

See Also:
    Constant Field Values

GL_FLOAT_MAT3_ARB

public static final int GL_FLOAT_MAT3_ARB

See Also:
    Constant Field Values

GL_FLOAT_MAT4_ARB

public static final int GL_FLOAT_MAT4_ARB

See Also:
    Constant Field Values

GL_SAMPLER_1D_ARB

public static final int GL_SAMPLER_1D_ARB

See Also:
    Constant Field Values

GL_SAMPLER_2D_ARB

public static final int GL_SAMPLER_2D_ARB

See Also:
    Constant Field Values

GL_SAMPLER_3D_ARB

public static final int GL_SAMPLER_3D_ARB

See Also:
    Constant Field Values

GL_SAMPLER_CUBE_ARB

public static final int GL_SAMPLER_CUBE_ARB

See Also:
    Constant Field Values

GL_SAMPLER_1D_SHADOW_ARB

public static final int GL_SAMPLER_1D_SHADOW_ARB

See Also:
    Constant Field Values

GL_SAMPLER_2D_SHADOW_ARB

public static final int GL_SAMPLER_2D_SHADOW_ARB

See Also:
    Constant Field Values

GL_SAMPLER_2D_RECT_ARB

public static final int GL_SAMPLER_2D_RECT_ARB

See Also:
    Constant Field Values

GL_SAMPLER_2D_RECT_SHADOW_ARB

public static final int GL_SAMPLER_2D_RECT_SHADOW_ARB

See Also:
    Constant Field Values

GL_OBJECT_DELETE_STATUS_ARB

public static final int GL_OBJECT_DELETE_STATUS_ARB

See Also:
    Constant Field Values

GL_OBJECT_COMPILE_STATUS_ARB

public static final int GL_OBJECT_COMPILE_STATUS_ARB

See Also:
    Constant Field Values

GL_OBJECT_LINK_STATUS_ARB

public static final int GL_OBJECT_LINK_STATUS_ARB

See Also:
    Constant Field Values

GL_OBJECT_VALIDATE_STATUS_ARB

public static final int GL_OBJECT_VALIDATE_STATUS_ARB

See Also:
    Constant Field Values

GL_OBJECT_INFO_LOG_LENGTH_ARB

public static final int GL_OBJECT_INFO_LOG_LENGTH_ARB

See Also:
    Constant Field Values

GL_OBJECT_ATTACHED_OBJECTS_ARB

public static final int GL_OBJECT_ATTACHED_OBJECTS_ARB

See Also:
    Constant Field Values

GL_OBJECT_ACTIVE_UNIFORMS_ARB

public static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB

See Also:
    Constant Field Values

GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB

public static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB

See Also:
    Constant Field Values

GL_OBJECT_SHADER_SOURCE_LENGTH_ARB

public static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB

See Also:
    Constant Field Values

GL_VERTEX_SHADER_ARB

public static final int GL_VERTEX_SHADER_ARB

See Also:
    Constant Field Values

GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB

public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB

See Also:
    Constant Field Values

GL_MAX_VARYING_FLOATS_ARB

public static final int GL_MAX_VARYING_FLOATS_ARB

See Also:
    Constant Field Values

GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB

public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB

See Also:
    Constant Field Values

GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB

public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB

See Also:
    Constant Field Values

GL_OBJECT_ACTIVE_ATTRIBUTES_ARB

public static final int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB

See Also:
    Constant Field Values

GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB

public static final int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB

See Also:
    Constant Field Values

GL_FRAGMENT_SHADER_ARB

public static final int GL_FRAGMENT_SHADER_ARB

See Also:
    Constant Field Values

GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB

public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB

See Also:
    Constant Field Values

GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB

public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB

See Also:
    Constant Field Values

GL_SHADING_LANGUAGE_VERSION_ARB

public static final int GL_SHADING_LANGUAGE_VERSION_ARB

See Also:
    Constant Field Values

GL_POINT_SPRITE_ARB

public static final int GL_POINT_SPRITE_ARB

See Also:
    Constant Field Values

GL_COORD_REPLACE_ARB

public static final int GL_COORD_REPLACE_ARB

See Also:
    Constant Field Values

GL_MAX_DRAW_BUFFERS_ARB

public static final int GL_MAX_DRAW_BUFFERS_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER0_ARB

public static final int GL_DRAW_BUFFER0_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER1_ARB

public static final int GL_DRAW_BUFFER1_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER2_ARB

public static final int GL_DRAW_BUFFER2_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER3_ARB

public static final int GL_DRAW_BUFFER3_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER4_ARB

public static final int GL_DRAW_BUFFER4_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER5_ARB

public static final int GL_DRAW_BUFFER5_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER6_ARB

public static final int GL_DRAW_BUFFER6_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER7_ARB

public static final int GL_DRAW_BUFFER7_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER8_ARB

public static final int GL_DRAW_BUFFER8_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER9_ARB

public static final int GL_DRAW_BUFFER9_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER10_ARB

public static final int GL_DRAW_BUFFER10_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER11_ARB

public static final int GL_DRAW_BUFFER11_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER12_ARB

public static final int GL_DRAW_BUFFER12_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER13_ARB

public static final int GL_DRAW_BUFFER13_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER14_ARB

public static final int GL_DRAW_BUFFER14_ARB

See Also:
    Constant Field Values

GL_DRAW_BUFFER15_ARB

public static final int GL_DRAW_BUFFER15_ARB

See Also:
    Constant Field Values

GL_TEXTURE_RECTANGLE_ARB

public static final int GL_TEXTURE_RECTANGLE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_RECTANGLE_ARB

public static final int GL_TEXTURE_BINDING_RECTANGLE_ARB

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_RECTANGLE_ARB

public static final int GL_PROXY_TEXTURE_RECTANGLE_ARB

See Also:
    Constant Field Values

GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB

public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB

See Also:
    Constant Field Values

GL_RGBA_FLOAT_MODE_ARB

public static final int GL_RGBA_FLOAT_MODE_ARB

See Also:
    Constant Field Values

GL_CLAMP_VERTEX_COLOR_ARB

public static final int GL_CLAMP_VERTEX_COLOR_ARB

See Also:
    Constant Field Values

GL_CLAMP_FRAGMENT_COLOR_ARB

public static final int GL_CLAMP_FRAGMENT_COLOR_ARB

See Also:
    Constant Field Values

GL_CLAMP_READ_COLOR_ARB

public static final int GL_CLAMP_READ_COLOR_ARB

See Also:
    Constant Field Values

GL_FIXED_ONLY_ARB

public static final int GL_FIXED_ONLY_ARB

See Also:
    Constant Field Values

GL_HALF_FLOAT_ARB

public static final int GL_HALF_FLOAT_ARB

See Also:
    Constant Field Values

GL_TEXTURE_RED_TYPE_ARB

public static final int GL_TEXTURE_RED_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_GREEN_TYPE_ARB

public static final int GL_TEXTURE_GREEN_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_BLUE_TYPE_ARB

public static final int GL_TEXTURE_BLUE_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_ALPHA_TYPE_ARB

public static final int GL_TEXTURE_ALPHA_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_LUMINANCE_TYPE_ARB

public static final int GL_TEXTURE_LUMINANCE_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_INTENSITY_TYPE_ARB

public static final int GL_TEXTURE_INTENSITY_TYPE_ARB

See Also:
    Constant Field Values

GL_TEXTURE_DEPTH_TYPE_ARB

public static final int GL_TEXTURE_DEPTH_TYPE_ARB

See Also:
    Constant Field Values

GL_UNSIGNED_NORMALIZED_ARB

public static final int GL_UNSIGNED_NORMALIZED_ARB

See Also:
    Constant Field Values

GL_RGBA32F_ARB

public static final int GL_RGBA32F_ARB

See Also:
    Constant Field Values

GL_RGB32F_ARB

public static final int GL_RGB32F_ARB

See Also:
    Constant Field Values

GL_ALPHA32F_ARB

public static final int GL_ALPHA32F_ARB

See Also:
    Constant Field Values

GL_INTENSITY32F_ARB

public static final int GL_INTENSITY32F_ARB

See Also:
    Constant Field Values

GL_LUMINANCE32F_ARB

public static final int GL_LUMINANCE32F_ARB

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA32F_ARB

public static final int GL_LUMINANCE_ALPHA32F_ARB

See Also:
    Constant Field Values

GL_RGBA16F_ARB

public static final int GL_RGBA16F_ARB

See Also:
    Constant Field Values

GL_RGB16F_ARB

public static final int GL_RGB16F_ARB

See Also:
    Constant Field Values

GL_ALPHA16F_ARB

public static final int GL_ALPHA16F_ARB

See Also:
    Constant Field Values

GL_INTENSITY16F_ARB

public static final int GL_INTENSITY16F_ARB

See Also:
    Constant Field Values

GL_LUMINANCE16F_ARB

public static final int GL_LUMINANCE16F_ARB

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA16F_ARB

public static final int GL_LUMINANCE_ALPHA16F_ARB

See Also:
    Constant Field Values

GL_PIXEL_PACK_BUFFER_ARB

public static final int GL_PIXEL_PACK_BUFFER_ARB

See Also:
    Constant Field Values

GL_PIXEL_UNPACK_BUFFER_ARB

public static final int GL_PIXEL_UNPACK_BUFFER_ARB

See Also:
    Constant Field Values

GL_PIXEL_PACK_BUFFER_BINDING_ARB

public static final int GL_PIXEL_PACK_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_PIXEL_UNPACK_BUFFER_BINDING_ARB

public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB

See Also:
    Constant Field Values

GL_ABGR_EXT

public static final int GL_ABGR_EXT

See Also:
    Constant Field Values

GL_FILTER4_SGIS

public static final int GL_FILTER4_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_FILTER4_SIZE_SGIS

public static final int GL_TEXTURE_FILTER4_SIZE_SGIS

See Also:
    Constant Field Values

GL_PIXEL_TEXTURE_SGIS

public static final int GL_PIXEL_TEXTURE_SGIS

See Also:
    Constant Field Values

GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS

public static final int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS

See Also:
    Constant Field Values

GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS

public static final int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS

See Also:
    Constant Field Values

GL_PIXEL_GROUP_COLOR_SGIS

public static final int GL_PIXEL_GROUP_COLOR_SGIS

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_SGIX

public static final int GL_PIXEL_TEX_GEN_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_MODE_SGIX

public static final int GL_PIXEL_TEX_GEN_MODE_SGIX

See Also:
    Constant Field Values

GL_PACK_SKIP_VOLUMES_SGIS

public static final int GL_PACK_SKIP_VOLUMES_SGIS

See Also:
    Constant Field Values

GL_PACK_IMAGE_DEPTH_SGIS

public static final int GL_PACK_IMAGE_DEPTH_SGIS

See Also:
    Constant Field Values

GL_UNPACK_SKIP_VOLUMES_SGIS

public static final int GL_UNPACK_SKIP_VOLUMES_SGIS

See Also:
    Constant Field Values

GL_UNPACK_IMAGE_DEPTH_SGIS

public static final int GL_UNPACK_IMAGE_DEPTH_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_4D_SGIS

public static final int GL_TEXTURE_4D_SGIS

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_4D_SGIS

public static final int GL_PROXY_TEXTURE_4D_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_4DSIZE_SGIS

public static final int GL_TEXTURE_4DSIZE_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_WRAP_Q_SGIS

public static final int GL_TEXTURE_WRAP_Q_SGIS

See Also:
    Constant Field Values

GL_MAX_4D_TEXTURE_SIZE_SGIS

public static final int GL_MAX_4D_TEXTURE_SIZE_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_4D_BINDING_SGIS

public static final int GL_TEXTURE_4D_BINDING_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_COLOR_TABLE_SGI

public static final int GL_TEXTURE_COLOR_TABLE_SGI

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_COLOR_TABLE_SGI

public static final int GL_PROXY_TEXTURE_COLOR_TABLE_SGI

See Also:
    Constant Field Values

GL_CMYK_EXT

public static final int GL_CMYK_EXT

See Also:
    Constant Field Values

GL_CMYKA_EXT

public static final int GL_CMYKA_EXT

See Also:
    Constant Field Values

GL_PACK_CMYK_HINT_EXT

public static final int GL_PACK_CMYK_HINT_EXT

See Also:
    Constant Field Values

GL_UNPACK_CMYK_HINT_EXT

public static final int GL_UNPACK_CMYK_HINT_EXT

See Also:
    Constant Field Values

GL_DETAIL_TEXTURE_2D_SGIS

public static final int GL_DETAIL_TEXTURE_2D_SGIS

See Also:
    Constant Field Values

GL_DETAIL_TEXTURE_2D_BINDING_SGIS

public static final int GL_DETAIL_TEXTURE_2D_BINDING_SGIS

See Also:
    Constant Field Values

GL_LINEAR_DETAIL_SGIS

public static final int GL_LINEAR_DETAIL_SGIS

See Also:
    Constant Field Values

GL_LINEAR_DETAIL_ALPHA_SGIS

public static final int GL_LINEAR_DETAIL_ALPHA_SGIS

See Also:
    Constant Field Values

GL_LINEAR_DETAIL_COLOR_SGIS

public static final int GL_LINEAR_DETAIL_COLOR_SGIS

See Also:
    Constant Field Values

GL_DETAIL_TEXTURE_LEVEL_SGIS

public static final int GL_DETAIL_TEXTURE_LEVEL_SGIS

See Also:
    Constant Field Values

GL_DETAIL_TEXTURE_MODE_SGIS

public static final int GL_DETAIL_TEXTURE_MODE_SGIS

See Also:
    Constant Field Values

GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS

public static final int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS

See Also:
    Constant Field Values

GL_LINEAR_SHARPEN_SGIS

public static final int GL_LINEAR_SHARPEN_SGIS

See Also:
    Constant Field Values

GL_LINEAR_SHARPEN_ALPHA_SGIS

public static final int GL_LINEAR_SHARPEN_ALPHA_SGIS

See Also:
    Constant Field Values

GL_LINEAR_SHARPEN_COLOR_SGIS

public static final int GL_LINEAR_SHARPEN_COLOR_SGIS

See Also:
    Constant Field Values

GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS

public static final int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS

See Also:
    Constant Field Values

GL_MULTISAMPLE_SGIS

public static final int GL_MULTISAMPLE_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_MASK_SGIS

public static final int GL_SAMPLE_ALPHA_TO_MASK_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_ONE_SGIS

public static final int GL_SAMPLE_ALPHA_TO_ONE_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_MASK_SGIS

public static final int GL_SAMPLE_MASK_SGIS

See Also:
    Constant Field Values

GL_1PASS_SGIS

public static final int GL_1PASS_SGIS

See Also:
    Constant Field Values

GL_2PASS_0_SGIS

public static final int GL_2PASS_0_SGIS

See Also:
    Constant Field Values

GL_2PASS_1_SGIS

public static final int GL_2PASS_1_SGIS

See Also:
    Constant Field Values

GL_4PASS_0_SGIS

public static final int GL_4PASS_0_SGIS

See Also:
    Constant Field Values

GL_4PASS_1_SGIS

public static final int GL_4PASS_1_SGIS

See Also:
    Constant Field Values

GL_4PASS_2_SGIS

public static final int GL_4PASS_2_SGIS

See Also:
    Constant Field Values

GL_4PASS_3_SGIS

public static final int GL_4PASS_3_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_BUFFERS_SGIS

public static final int GL_SAMPLE_BUFFERS_SGIS

See Also:
    Constant Field Values

GL_SAMPLES_SGIS

public static final int GL_SAMPLES_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_MASK_VALUE_SGIS

public static final int GL_SAMPLE_MASK_VALUE_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_MASK_INVERT_SGIS

public static final int GL_SAMPLE_MASK_INVERT_SGIS

See Also:
    Constant Field Values

GL_SAMPLE_PATTERN_SGIS

public static final int GL_SAMPLE_PATTERN_SGIS

See Also:
    Constant Field Values

GL_GENERATE_MIPMAP_SGIS

public static final int GL_GENERATE_MIPMAP_SGIS

See Also:
    Constant Field Values

GL_GENERATE_MIPMAP_HINT_SGIS

public static final int GL_GENERATE_MIPMAP_HINT_SGIS

See Also:
    Constant Field Values

GL_LINEAR_CLIPMAP_LINEAR_SGIX

public static final int GL_LINEAR_CLIPMAP_LINEAR_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_CENTER_SGIX

public static final int GL_TEXTURE_CLIPMAP_CENTER_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_FRAME_SGIX

public static final int GL_TEXTURE_CLIPMAP_FRAME_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_OFFSET_SGIX

public static final int GL_TEXTURE_CLIPMAP_OFFSET_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX

public static final int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX

public static final int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_CLIPMAP_DEPTH_SGIX

public static final int GL_TEXTURE_CLIPMAP_DEPTH_SGIX

See Also:
    Constant Field Values

GL_MAX_CLIPMAP_DEPTH_SGIX

public static final int GL_MAX_CLIPMAP_DEPTH_SGIX

See Also:
    Constant Field Values

GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX

public static final int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX

See Also:
    Constant Field Values

GL_NEAREST_CLIPMAP_NEAREST_SGIX

public static final int GL_NEAREST_CLIPMAP_NEAREST_SGIX

See Also:
    Constant Field Values

GL_NEAREST_CLIPMAP_LINEAR_SGIX

public static final int GL_NEAREST_CLIPMAP_LINEAR_SGIX

See Also:
    Constant Field Values

GL_LINEAR_CLIPMAP_NEAREST_SGIX

public static final int GL_LINEAR_CLIPMAP_NEAREST_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_SGIX

public static final int GL_TEXTURE_COMPARE_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_COMPARE_OPERATOR_SGIX

public static final int GL_TEXTURE_COMPARE_OPERATOR_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_LEQUAL_R_SGIX

public static final int GL_TEXTURE_LEQUAL_R_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_GEQUAL_R_SGIX

public static final int GL_TEXTURE_GEQUAL_R_SGIX

See Also:
    Constant Field Values

GL_INTERLACE_SGIX

public static final int GL_INTERLACE_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX

public static final int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_CACHE_INCREMENT_SGIX

public static final int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_WIDTH_SGIX

public static final int GL_PIXEL_TILE_WIDTH_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_HEIGHT_SGIX

public static final int GL_PIXEL_TILE_HEIGHT_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_GRID_WIDTH_SGIX

public static final int GL_PIXEL_TILE_GRID_WIDTH_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_GRID_HEIGHT_SGIX

public static final int GL_PIXEL_TILE_GRID_HEIGHT_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_GRID_DEPTH_SGIX

public static final int GL_PIXEL_TILE_GRID_DEPTH_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TILE_CACHE_SIZE_SGIX

public static final int GL_PIXEL_TILE_CACHE_SIZE_SGIX

See Also:
    Constant Field Values

GL_DUAL_ALPHA4_SGIS

public static final int GL_DUAL_ALPHA4_SGIS

See Also:
    Constant Field Values

GL_DUAL_ALPHA8_SGIS

public static final int GL_DUAL_ALPHA8_SGIS

See Also:
    Constant Field Values

GL_DUAL_ALPHA12_SGIS

public static final int GL_DUAL_ALPHA12_SGIS

See Also:
    Constant Field Values

GL_DUAL_ALPHA16_SGIS

public static final int GL_DUAL_ALPHA16_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE4_SGIS

public static final int GL_DUAL_LUMINANCE4_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE8_SGIS

public static final int GL_DUAL_LUMINANCE8_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE12_SGIS

public static final int GL_DUAL_LUMINANCE12_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE16_SGIS

public static final int GL_DUAL_LUMINANCE16_SGIS

See Also:
    Constant Field Values

GL_DUAL_INTENSITY4_SGIS

public static final int GL_DUAL_INTENSITY4_SGIS

See Also:
    Constant Field Values

GL_DUAL_INTENSITY8_SGIS

public static final int GL_DUAL_INTENSITY8_SGIS

See Also:
    Constant Field Values

GL_DUAL_INTENSITY12_SGIS

public static final int GL_DUAL_INTENSITY12_SGIS

See Also:
    Constant Field Values

GL_DUAL_INTENSITY16_SGIS

public static final int GL_DUAL_INTENSITY16_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE_ALPHA4_SGIS

public static final int GL_DUAL_LUMINANCE_ALPHA4_SGIS

See Also:
    Constant Field Values

GL_DUAL_LUMINANCE_ALPHA8_SGIS

public static final int GL_DUAL_LUMINANCE_ALPHA8_SGIS

See Also:
    Constant Field Values

GL_QUAD_ALPHA4_SGIS

public static final int GL_QUAD_ALPHA4_SGIS

See Also:
    Constant Field Values

GL_QUAD_ALPHA8_SGIS

public static final int GL_QUAD_ALPHA8_SGIS

See Also:
    Constant Field Values

GL_QUAD_LUMINANCE4_SGIS

public static final int GL_QUAD_LUMINANCE4_SGIS

See Also:
    Constant Field Values

GL_QUAD_LUMINANCE8_SGIS

public static final int GL_QUAD_LUMINANCE8_SGIS

See Also:
    Constant Field Values

GL_QUAD_INTENSITY4_SGIS

public static final int GL_QUAD_INTENSITY4_SGIS

See Also:
    Constant Field Values

GL_QUAD_INTENSITY8_SGIS

public static final int GL_QUAD_INTENSITY8_SGIS

See Also:
    Constant Field Values

GL_DUAL_TEXTURE_SELECT_SGIS

public static final int GL_DUAL_TEXTURE_SELECT_SGIS

See Also:
    Constant Field Values

GL_QUAD_TEXTURE_SELECT_SGIS

public static final int GL_QUAD_TEXTURE_SELECT_SGIS

See Also:
    Constant Field Values

GL_SPRITE_SGIX

public static final int GL_SPRITE_SGIX

See Also:
    Constant Field Values

GL_SPRITE_MODE_SGIX

public static final int GL_SPRITE_MODE_SGIX

See Also:
    Constant Field Values

GL_SPRITE_AXIS_SGIX

public static final int GL_SPRITE_AXIS_SGIX

See Also:
    Constant Field Values

GL_SPRITE_TRANSLATION_SGIX

public static final int GL_SPRITE_TRANSLATION_SGIX

See Also:
    Constant Field Values

GL_SPRITE_AXIAL_SGIX

public static final int GL_SPRITE_AXIAL_SGIX

See Also:
    Constant Field Values

GL_SPRITE_OBJECT_ALIGNED_SGIX

public static final int GL_SPRITE_OBJECT_ALIGNED_SGIX

See Also:
    Constant Field Values

GL_SPRITE_EYE_ALIGNED_SGIX

public static final int GL_SPRITE_EYE_ALIGNED_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_MULTI_BUFFER_HINT_SGIX

public static final int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX

See Also:
    Constant Field Values

GL_POINT_SIZE_MIN_EXT

public static final int GL_POINT_SIZE_MIN_EXT

See Also:
    Constant Field Values

GL_POINT_SIZE_MAX_EXT

public static final int GL_POINT_SIZE_MAX_EXT

See Also:
    Constant Field Values

GL_POINT_FADE_THRESHOLD_SIZE_EXT

public static final int GL_POINT_FADE_THRESHOLD_SIZE_EXT

See Also:
    Constant Field Values

GL_DISTANCE_ATTENUATION_EXT

public static final int GL_DISTANCE_ATTENUATION_EXT

See Also:
    Constant Field Values

GL_POINT_SIZE_MIN_SGIS

public static final int GL_POINT_SIZE_MIN_SGIS

See Also:
    Constant Field Values

GL_POINT_SIZE_MAX_SGIS

public static final int GL_POINT_SIZE_MAX_SGIS

See Also:
    Constant Field Values

GL_POINT_FADE_THRESHOLD_SIZE_SGIS

public static final int GL_POINT_FADE_THRESHOLD_SIZE_SGIS

See Also:
    Constant Field Values

GL_DISTANCE_ATTENUATION_SGIS

public static final int GL_DISTANCE_ATTENUATION_SGIS

See Also:
    Constant Field Values

GL_INSTRUMENT_BUFFER_POINTER_SGIX

public static final int GL_INSTRUMENT_BUFFER_POINTER_SGIX

See Also:
    Constant Field Values

GL_INSTRUMENT_MEASUREMENTS_SGIX

public static final int GL_INSTRUMENT_MEASUREMENTS_SGIX

See Also:
    Constant Field Values

GL_POST_TEXTURE_FILTER_BIAS_SGIX

public static final int GL_POST_TEXTURE_FILTER_BIAS_SGIX

See Also:
    Constant Field Values

GL_POST_TEXTURE_FILTER_SCALE_SGIX

public static final int GL_POST_TEXTURE_FILTER_SCALE_SGIX

See Also:
    Constant Field Values

GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX

public static final int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX

See Also:
    Constant Field Values

GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX

public static final int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX

See Also:
    Constant Field Values

GL_FRAMEZOOM_SGIX

public static final int GL_FRAMEZOOM_SGIX

See Also:
    Constant Field Values

GL_FRAMEZOOM_FACTOR_SGIX

public static final int GL_FRAMEZOOM_FACTOR_SGIX

See Also:
    Constant Field Values

GL_MAX_FRAMEZOOM_FACTOR_SGIX

public static final int GL_MAX_FRAMEZOOM_FACTOR_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_DEFORMATION_BIT_SGIX

public static final int GL_TEXTURE_DEFORMATION_BIT_SGIX

See Also:
    Constant Field Values

GL_GEOMETRY_DEFORMATION_BIT_SGIX

public static final int GL_GEOMETRY_DEFORMATION_BIT_SGIX

See Also:
    Constant Field Values

GL_GEOMETRY_DEFORMATION_SGIX

public static final int GL_GEOMETRY_DEFORMATION_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_DEFORMATION_SGIX

public static final int GL_TEXTURE_DEFORMATION_SGIX

See Also:
    Constant Field Values

GL_DEFORMATIONS_MASK_SGIX

public static final int GL_DEFORMATIONS_MASK_SGIX

See Also:
    Constant Field Values

GL_MAX_DEFORMATION_ORDER_SGIX

public static final int GL_MAX_DEFORMATION_ORDER_SGIX

See Also:
    Constant Field Values

GL_REFERENCE_PLANE_SGIX

public static final int GL_REFERENCE_PLANE_SGIX

See Also:
    Constant Field Values

GL_REFERENCE_PLANE_EQUATION_SGIX

public static final int GL_REFERENCE_PLANE_EQUATION_SGIX

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT16_SGIX

public static final int GL_DEPTH_COMPONENT16_SGIX

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT24_SGIX

public static final int GL_DEPTH_COMPONENT24_SGIX

See Also:
    Constant Field Values

GL_DEPTH_COMPONENT32_SGIX

public static final int GL_DEPTH_COMPONENT32_SGIX

See Also:
    Constant Field Values

GL_FOG_FUNC_SGIS

public static final int GL_FOG_FUNC_SGIS

See Also:
    Constant Field Values

GL_FOG_FUNC_POINTS_SGIS

public static final int GL_FOG_FUNC_POINTS_SGIS

See Also:
    Constant Field Values

GL_MAX_FOG_FUNC_POINTS_SGIS

public static final int GL_MAX_FOG_FUNC_POINTS_SGIS

See Also:
    Constant Field Values

GL_FOG_OFFSET_SGIX

public static final int GL_FOG_OFFSET_SGIX

See Also:
    Constant Field Values

GL_FOG_OFFSET_VALUE_SGIX

public static final int GL_FOG_OFFSET_VALUE_SGIX

See Also:
    Constant Field Values

GL_IMAGE_SCALE_X_HP

public static final int GL_IMAGE_SCALE_X_HP

See Also:
    Constant Field Values

GL_IMAGE_SCALE_Y_HP

public static final int GL_IMAGE_SCALE_Y_HP

See Also:
    Constant Field Values

GL_IMAGE_TRANSLATE_X_HP

public static final int GL_IMAGE_TRANSLATE_X_HP

See Also:
    Constant Field Values

GL_IMAGE_TRANSLATE_Y_HP

public static final int GL_IMAGE_TRANSLATE_Y_HP

See Also:
    Constant Field Values

GL_IMAGE_ROTATE_ANGLE_HP

public static final int GL_IMAGE_ROTATE_ANGLE_HP

See Also:
    Constant Field Values

GL_IMAGE_ROTATE_ORIGIN_X_HP

public static final int GL_IMAGE_ROTATE_ORIGIN_X_HP

See Also:
    Constant Field Values

GL_IMAGE_ROTATE_ORIGIN_Y_HP

public static final int GL_IMAGE_ROTATE_ORIGIN_Y_HP

See Also:
    Constant Field Values

GL_IMAGE_MAG_FILTER_HP

public static final int GL_IMAGE_MAG_FILTER_HP

See Also:
    Constant Field Values

GL_IMAGE_MIN_FILTER_HP

public static final int GL_IMAGE_MIN_FILTER_HP

See Also:
    Constant Field Values

GL_IMAGE_CUBIC_WEIGHT_HP

public static final int GL_IMAGE_CUBIC_WEIGHT_HP

See Also:
    Constant Field Values

GL_CUBIC_HP

public static final int GL_CUBIC_HP

See Also:
    Constant Field Values

GL_AVERAGE_HP

public static final int GL_AVERAGE_HP

See Also:
    Constant Field Values

GL_IMAGE_TRANSFORM_2D_HP

public static final int GL_IMAGE_TRANSFORM_2D_HP

See Also:
    Constant Field Values

GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

public static final int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

See Also:
    Constant Field Values

GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

public static final int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

See Also:
    Constant Field Values

GL_TEXTURE_ENV_BIAS_SGIX

public static final int GL_TEXTURE_ENV_BIAS_SGIX

See Also:
    Constant Field Values

GL_VERTEX_DATA_HINT_PGI

public static final int GL_VERTEX_DATA_HINT_PGI

See Also:
    Constant Field Values

GL_VERTEX_CONSISTENT_HINT_PGI

public static final int GL_VERTEX_CONSISTENT_HINT_PGI

See Also:
    Constant Field Values

GL_MATERIAL_SIDE_HINT_PGI

public static final int GL_MATERIAL_SIDE_HINT_PGI

See Also:
    Constant Field Values

GL_MAX_VERTEX_HINT_PGI

public static final int GL_MAX_VERTEX_HINT_PGI

See Also:
    Constant Field Values

GL_COLOR3_BIT_PGI

public static final int GL_COLOR3_BIT_PGI

See Also:
    Constant Field Values

GL_COLOR4_BIT_PGI

public static final int GL_COLOR4_BIT_PGI

See Also:
    Constant Field Values

GL_EDGEFLAG_BIT_PGI

public static final int GL_EDGEFLAG_BIT_PGI

See Also:
    Constant Field Values

GL_INDEX_BIT_PGI

public static final int GL_INDEX_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_AMBIENT_BIT_PGI

public static final int GL_MAT_AMBIENT_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI

public static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_DIFFUSE_BIT_PGI

public static final int GL_MAT_DIFFUSE_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_EMISSION_BIT_PGI

public static final int GL_MAT_EMISSION_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_COLOR_INDEXES_BIT_PGI

public static final int GL_MAT_COLOR_INDEXES_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_SHININESS_BIT_PGI

public static final int GL_MAT_SHININESS_BIT_PGI

See Also:
    Constant Field Values

GL_MAT_SPECULAR_BIT_PGI

public static final int GL_MAT_SPECULAR_BIT_PGI

See Also:
    Constant Field Values

GL_NORMAL_BIT_PGI

public static final int GL_NORMAL_BIT_PGI

See Also:
    Constant Field Values

GL_TEXCOORD1_BIT_PGI

public static final int GL_TEXCOORD1_BIT_PGI

See Also:
    Constant Field Values

GL_TEXCOORD2_BIT_PGI

public static final int GL_TEXCOORD2_BIT_PGI

See Also:
    Constant Field Values

GL_TEXCOORD3_BIT_PGI

public static final int GL_TEXCOORD3_BIT_PGI

See Also:
    Constant Field Values

GL_TEXCOORD4_BIT_PGI

public static final long GL_TEXCOORD4_BIT_PGI

See Also:
    Constant Field Values

GL_VERTEX23_BIT_PGI

public static final int GL_VERTEX23_BIT_PGI

See Also:
    Constant Field Values

GL_VERTEX4_BIT_PGI

public static final int GL_VERTEX4_BIT_PGI

See Also:
    Constant Field Values

GL_PREFER_DOUBLEBUFFER_HINT_PGI

public static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI

See Also:
    Constant Field Values

GL_CONSERVE_MEMORY_HINT_PGI

public static final int GL_CONSERVE_MEMORY_HINT_PGI

See Also:
    Constant Field Values

GL_RECLAIM_MEMORY_HINT_PGI

public static final int GL_RECLAIM_MEMORY_HINT_PGI

See Also:
    Constant Field Values

GL_NATIVE_GRAPHICS_HANDLE_PGI

public static final int GL_NATIVE_GRAPHICS_HANDLE_PGI

See Also:
    Constant Field Values

GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI

public static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI

See Also:
    Constant Field Values

GL_NATIVE_GRAPHICS_END_HINT_PGI

public static final int GL_NATIVE_GRAPHICS_END_HINT_PGI

See Also:
    Constant Field Values

GL_ALWAYS_FAST_HINT_PGI

public static final int GL_ALWAYS_FAST_HINT_PGI

See Also:
    Constant Field Values

GL_ALWAYS_SOFT_HINT_PGI

public static final int GL_ALWAYS_SOFT_HINT_PGI

See Also:
    Constant Field Values

GL_ALLOW_DRAW_OBJ_HINT_PGI

public static final int GL_ALLOW_DRAW_OBJ_HINT_PGI

See Also:
    Constant Field Values

GL_ALLOW_DRAW_WIN_HINT_PGI

public static final int GL_ALLOW_DRAW_WIN_HINT_PGI

See Also:
    Constant Field Values

GL_ALLOW_DRAW_FRG_HINT_PGI

public static final int GL_ALLOW_DRAW_FRG_HINT_PGI

See Also:
    Constant Field Values

GL_ALLOW_DRAW_MEM_HINT_PGI

public static final int GL_ALLOW_DRAW_MEM_HINT_PGI

See Also:
    Constant Field Values

GL_STRICT_DEPTHFUNC_HINT_PGI

public static final int GL_STRICT_DEPTHFUNC_HINT_PGI

See Also:
    Constant Field Values

GL_STRICT_LIGHTING_HINT_PGI

public static final int GL_STRICT_LIGHTING_HINT_PGI

See Also:
    Constant Field Values

GL_STRICT_SCISSOR_HINT_PGI

public static final int GL_STRICT_SCISSOR_HINT_PGI

See Also:
    Constant Field Values

GL_FULL_STIPPLE_HINT_PGI

public static final int GL_FULL_STIPPLE_HINT_PGI

See Also:
    Constant Field Values

GL_CLIP_NEAR_HINT_PGI

public static final int GL_CLIP_NEAR_HINT_PGI

See Also:
    Constant Field Values

GL_CLIP_FAR_HINT_PGI

public static final int GL_CLIP_FAR_HINT_PGI

See Also:
    Constant Field Values

GL_WIDE_LINE_HINT_PGI

public static final int GL_WIDE_LINE_HINT_PGI

See Also:
    Constant Field Values

GL_BACK_NORMALS_HINT_PGI

public static final int GL_BACK_NORMALS_HINT_PGI

See Also:
    Constant Field Values

GL_COLOR_INDEX1_EXT

public static final int GL_COLOR_INDEX1_EXT

See Also:
    Constant Field Values

GL_COLOR_INDEX2_EXT

public static final int GL_COLOR_INDEX2_EXT

See Also:
    Constant Field Values

GL_COLOR_INDEX4_EXT

public static final int GL_COLOR_INDEX4_EXT

See Also:
    Constant Field Values

GL_COLOR_INDEX8_EXT

public static final int GL_COLOR_INDEX8_EXT

See Also:
    Constant Field Values

GL_COLOR_INDEX12_EXT

public static final int GL_COLOR_INDEX12_EXT

See Also:
    Constant Field Values

GL_COLOR_INDEX16_EXT

public static final int GL_COLOR_INDEX16_EXT

See Also:
    Constant Field Values

GL_TEXTURE_INDEX_SIZE_EXT

public static final int GL_TEXTURE_INDEX_SIZE_EXT

See Also:
    Constant Field Values

GL_CLIP_VOLUME_CLIPPING_HINT_EXT

public static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT

See Also:
    Constant Field Values

GL_LIST_PRIORITY_SGIX

public static final int GL_LIST_PRIORITY_SGIX

See Also:
    Constant Field Values

GL_IR_INSTRUMENT1_SGIX

public static final int GL_IR_INSTRUMENT1_SGIX

See Also:
    Constant Field Values

GL_CALLIGRAPHIC_FRAGMENT_SGIX

public static final int GL_CALLIGRAPHIC_FRAGMENT_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_LOD_BIAS_S_SGIX

public static final int GL_TEXTURE_LOD_BIAS_S_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_LOD_BIAS_T_SGIX

public static final int GL_TEXTURE_LOD_BIAS_T_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_LOD_BIAS_R_SGIX

public static final int GL_TEXTURE_LOD_BIAS_R_SGIX

See Also:
    Constant Field Values

GL_SHADOW_AMBIENT_SGIX

public static final int GL_SHADOW_AMBIENT_SGIX

See Also:
    Constant Field Values

GL_INDEX_MATERIAL_EXT

public static final int GL_INDEX_MATERIAL_EXT

See Also:
    Constant Field Values

GL_INDEX_MATERIAL_PARAMETER_EXT

public static final int GL_INDEX_MATERIAL_PARAMETER_EXT

See Also:
    Constant Field Values

GL_INDEX_MATERIAL_FACE_EXT

public static final int GL_INDEX_MATERIAL_FACE_EXT

See Also:
    Constant Field Values

GL_INDEX_TEST_EXT

public static final int GL_INDEX_TEST_EXT

See Also:
    Constant Field Values

GL_INDEX_TEST_FUNC_EXT

public static final int GL_INDEX_TEST_FUNC_EXT

See Also:
    Constant Field Values

GL_INDEX_TEST_REF_EXT

public static final int GL_INDEX_TEST_REF_EXT

See Also:
    Constant Field Values

GL_IUI_V2F_EXT

public static final int GL_IUI_V2F_EXT

See Also:
    Constant Field Values

GL_IUI_V3F_EXT

public static final int GL_IUI_V3F_EXT

See Also:
    Constant Field Values

GL_IUI_N3F_V2F_EXT

public static final int GL_IUI_N3F_V2F_EXT

See Also:
    Constant Field Values

GL_IUI_N3F_V3F_EXT

public static final int GL_IUI_N3F_V3F_EXT

See Also:
    Constant Field Values

GL_T2F_IUI_V2F_EXT

public static final int GL_T2F_IUI_V2F_EXT

See Also:
    Constant Field Values

GL_T2F_IUI_V3F_EXT

public static final int GL_T2F_IUI_V3F_EXT

See Also:
    Constant Field Values

GL_T2F_IUI_N3F_V2F_EXT

public static final int GL_T2F_IUI_N3F_V2F_EXT

See Also:
    Constant Field Values

GL_T2F_IUI_N3F_V3F_EXT

public static final int GL_T2F_IUI_N3F_V3F_EXT

See Also:
    Constant Field Values

GL_ARRAY_ELEMENT_LOCK_FIRST_EXT

public static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT

See Also:
    Constant Field Values

GL_ARRAY_ELEMENT_LOCK_COUNT_EXT

public static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT

See Also:
    Constant Field Values

GL_CULL_VERTEX_EXT

public static final int GL_CULL_VERTEX_EXT

See Also:
    Constant Field Values

GL_CULL_VERTEX_EYE_POSITION_EXT

public static final int GL_CULL_VERTEX_EYE_POSITION_EXT

See Also:
    Constant Field Values

GL_CULL_VERTEX_OBJECT_POSITION_EXT

public static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT

See Also:
    Constant Field Values

GL_YCRCB_422_SGIX

public static final int GL_YCRCB_422_SGIX

See Also:
    Constant Field Values

GL_YCRCB_444_SGIX

public static final int GL_YCRCB_444_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHTING_SGIX

public static final int GL_FRAGMENT_LIGHTING_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_COLOR_MATERIAL_SGIX

public static final int GL_FRAGMENT_COLOR_MATERIAL_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX

public static final int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX

public static final int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX

See Also:
    Constant Field Values

GL_MAX_FRAGMENT_LIGHTS_SGIX

public static final int GL_MAX_FRAGMENT_LIGHTS_SGIX

See Also:
    Constant Field Values

GL_MAX_ACTIVE_LIGHTS_SGIX

public static final int GL_MAX_ACTIVE_LIGHTS_SGIX

See Also:
    Constant Field Values

GL_CURRENT_RASTER_NORMAL_SGIX

public static final int GL_CURRENT_RASTER_NORMAL_SGIX

See Also:
    Constant Field Values

GL_LIGHT_ENV_MODE_SGIX

public static final int GL_LIGHT_ENV_MODE_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX

public static final int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX

public static final int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX

public static final int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX

public static final int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT0_SGIX

public static final int GL_FRAGMENT_LIGHT0_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT1_SGIX

public static final int GL_FRAGMENT_LIGHT1_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT2_SGIX

public static final int GL_FRAGMENT_LIGHT2_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT3_SGIX

public static final int GL_FRAGMENT_LIGHT3_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT4_SGIX

public static final int GL_FRAGMENT_LIGHT4_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT5_SGIX

public static final int GL_FRAGMENT_LIGHT5_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT6_SGIX

public static final int GL_FRAGMENT_LIGHT6_SGIX

See Also:
    Constant Field Values

GL_FRAGMENT_LIGHT7_SGIX

public static final int GL_FRAGMENT_LIGHT7_SGIX

See Also:
    Constant Field Values

GL_RASTER_POSITION_UNCLIPPED_IBM

public static final int GL_RASTER_POSITION_UNCLIPPED_IBM

See Also:
    Constant Field Values

GL_TEXTURE_LIGHTING_MODE_HP

public static final int GL_TEXTURE_LIGHTING_MODE_HP

See Also:
    Constant Field Values

GL_TEXTURE_POST_SPECULAR_HP

public static final int GL_TEXTURE_POST_SPECULAR_HP

See Also:
    Constant Field Values

GL_TEXTURE_PRE_SPECULAR_HP

public static final int GL_TEXTURE_PRE_SPECULAR_HP

See Also:
    Constant Field Values

GL_PHONG_WIN

public static final int GL_PHONG_WIN

See Also:
    Constant Field Values

GL_PHONG_HINT_WIN

public static final int GL_PHONG_HINT_WIN

See Also:
    Constant Field Values

GL_FOG_SPECULAR_TEXTURE_WIN

public static final int GL_FOG_SPECULAR_TEXTURE_WIN

See Also:
    Constant Field Values

GL_FRAGMENT_MATERIAL_EXT

public static final int GL_FRAGMENT_MATERIAL_EXT

See Also:
    Constant Field Values

GL_FRAGMENT_NORMAL_EXT

public static final int GL_FRAGMENT_NORMAL_EXT

See Also:
    Constant Field Values

GL_FRAGMENT_COLOR_EXT

public static final int GL_FRAGMENT_COLOR_EXT

See Also:
    Constant Field Values

GL_ATTENUATION_EXT

public static final int GL_ATTENUATION_EXT

See Also:
    Constant Field Values

GL_SHADOW_ATTENUATION_EXT

public static final int GL_SHADOW_ATTENUATION_EXT

See Also:
    Constant Field Values

GL_TEXTURE_APPLICATION_MODE_EXT

public static final int GL_TEXTURE_APPLICATION_MODE_EXT

See Also:
    Constant Field Values

GL_TEXTURE_LIGHT_EXT

public static final int GL_TEXTURE_LIGHT_EXT

See Also:
    Constant Field Values

GL_TEXTURE_MATERIAL_FACE_EXT

public static final int GL_TEXTURE_MATERIAL_FACE_EXT

See Also:
    Constant Field Values

GL_TEXTURE_MATERIAL_PARAMETER_EXT

public static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT

See Also:
    Constant Field Values

GL_ALPHA_MIN_SGIX

public static final int GL_ALPHA_MIN_SGIX

See Also:
    Constant Field Values

GL_ALPHA_MAX_SGIX

public static final int GL_ALPHA_MAX_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_Q_CEILING_SGIX

public static final int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_Q_ROUND_SGIX

public static final int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX

public static final int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX

public static final int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX

public static final int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX

public static final int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX

See Also:
    Constant Field Values

GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX

public static final int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX

See Also:
    Constant Field Values

GL_ASYNC_MARKER_SGIX

public static final int GL_ASYNC_MARKER_SGIX

See Also:
    Constant Field Values

GL_ASYNC_TEX_IMAGE_SGIX

public static final int GL_ASYNC_TEX_IMAGE_SGIX

See Also:
    Constant Field Values

GL_ASYNC_DRAW_PIXELS_SGIX

public static final int GL_ASYNC_DRAW_PIXELS_SGIX

See Also:
    Constant Field Values

GL_ASYNC_READ_PIXELS_SGIX

public static final int GL_ASYNC_READ_PIXELS_SGIX

See Also:
    Constant Field Values

GL_MAX_ASYNC_TEX_IMAGE_SGIX

public static final int GL_MAX_ASYNC_TEX_IMAGE_SGIX

See Also:
    Constant Field Values

GL_MAX_ASYNC_DRAW_PIXELS_SGIX

public static final int GL_MAX_ASYNC_DRAW_PIXELS_SGIX

See Also:
    Constant Field Values

GL_MAX_ASYNC_READ_PIXELS_SGIX

public static final int GL_MAX_ASYNC_READ_PIXELS_SGIX

See Also:
    Constant Field Values

GL_ASYNC_HISTOGRAM_SGIX

public static final int GL_ASYNC_HISTOGRAM_SGIX

See Also:
    Constant Field Values

GL_MAX_ASYNC_HISTOGRAM_SGIX

public static final int GL_MAX_ASYNC_HISTOGRAM_SGIX

See Also:
    Constant Field Values

GL_OCCLUSION_TEST_HP

public static final int GL_OCCLUSION_TEST_HP

See Also:
    Constant Field Values

GL_OCCLUSION_TEST_RESULT_HP

public static final int GL_OCCLUSION_TEST_RESULT_HP

See Also:
    Constant Field Values

GL_PIXEL_TRANSFORM_2D_EXT

public static final int GL_PIXEL_TRANSFORM_2D_EXT

See Also:
    Constant Field Values

GL_PIXEL_MAG_FILTER_EXT

public static final int GL_PIXEL_MAG_FILTER_EXT

See Also:
    Constant Field Values

GL_PIXEL_MIN_FILTER_EXT

public static final int GL_PIXEL_MIN_FILTER_EXT

See Also:
    Constant Field Values

GL_PIXEL_CUBIC_WEIGHT_EXT

public static final int GL_PIXEL_CUBIC_WEIGHT_EXT

See Also:
    Constant Field Values

GL_CUBIC_EXT

public static final int GL_CUBIC_EXT

See Also:
    Constant Field Values

GL_AVERAGE_EXT

public static final int GL_AVERAGE_EXT

See Also:
    Constant Field Values

GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

public static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

See Also:
    Constant Field Values

GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

public static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

See Also:
    Constant Field Values

GL_PIXEL_TRANSFORM_2D_MATRIX_EXT

public static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT

See Also:
    Constant Field Values

GL_SHARED_TEXTURE_PALETTE_EXT

public static final int GL_SHARED_TEXTURE_PALETTE_EXT

See Also:
    Constant Field Values

GL_COLOR_SUM_EXT

public static final int GL_COLOR_SUM_EXT

See Also:
    Constant Field Values

GL_CURRENT_SECONDARY_COLOR_EXT

public static final int GL_CURRENT_SECONDARY_COLOR_EXT

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_SIZE_EXT

public static final int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_TYPE_EXT

public static final int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT

public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_POINTER_EXT

public static final int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_ARRAY_EXT

public static final int GL_SECONDARY_COLOR_ARRAY_EXT

See Also:
    Constant Field Values

GL_PERTURB_EXT

public static final int GL_PERTURB_EXT

See Also:
    Constant Field Values

GL_TEXTURE_NORMAL_EXT

public static final int GL_TEXTURE_NORMAL_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_SOURCE_EXT

public static final int GL_FOG_COORDINATE_SOURCE_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_EXT

public static final int GL_FOG_COORDINATE_EXT

See Also:
    Constant Field Values

GL_FRAGMENT_DEPTH_EXT

public static final int GL_FRAGMENT_DEPTH_EXT

See Also:
    Constant Field Values

GL_CURRENT_FOG_COORDINATE_EXT

public static final int GL_CURRENT_FOG_COORDINATE_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_TYPE_EXT

public static final int GL_FOG_COORDINATE_ARRAY_TYPE_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_STRIDE_EXT

public static final int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_POINTER_EXT

public static final int GL_FOG_COORDINATE_ARRAY_POINTER_EXT

See Also:
    Constant Field Values

GL_FOG_COORDINATE_ARRAY_EXT

public static final int GL_FOG_COORDINATE_ARRAY_EXT

See Also:
    Constant Field Values

GL_SCREEN_COORDINATES_REND

public static final int GL_SCREEN_COORDINATES_REND

See Also:
    Constant Field Values

GL_INVERTED_SCREEN_W_REND

public static final int GL_INVERTED_SCREEN_W_REND

See Also:
    Constant Field Values

GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE

public static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE

See Also:
    Constant Field Values

GL_TRANSFORM_HINT_APPLE

public static final int GL_TRANSFORM_HINT_APPLE

See Also:
    Constant Field Values

GL_FOG_SCALE_SGIX

public static final int GL_FOG_SCALE_SGIX

See Also:
    Constant Field Values

GL_FOG_SCALE_VALUE_SGIX

public static final int GL_FOG_SCALE_VALUE_SGIX

See Also:
    Constant Field Values

GL_UNPACK_CONSTANT_DATA_SUNX

public static final int GL_UNPACK_CONSTANT_DATA_SUNX

See Also:
    Constant Field Values

GL_TEXTURE_CONSTANT_DATA_SUNX

public static final int GL_TEXTURE_CONSTANT_DATA_SUNX

See Also:
    Constant Field Values

GL_GLOBAL_ALPHA_SUN

public static final int GL_GLOBAL_ALPHA_SUN

See Also:
    Constant Field Values

GL_GLOBAL_ALPHA_FACTOR_SUN

public static final int GL_GLOBAL_ALPHA_FACTOR_SUN

See Also:
    Constant Field Values

GL_BLEND_DST_RGB_EXT

public static final int GL_BLEND_DST_RGB_EXT

See Also:
    Constant Field Values

GL_BLEND_SRC_RGB_EXT

public static final int GL_BLEND_SRC_RGB_EXT

See Also:
    Constant Field Values

GL_BLEND_DST_ALPHA_EXT

public static final int GL_BLEND_DST_ALPHA_EXT

See Also:
    Constant Field Values

GL_BLEND_SRC_ALPHA_EXT

public static final int GL_BLEND_SRC_ALPHA_EXT

See Also:
    Constant Field Values

GL_RED_MIN_CLAMP_INGR

public static final int GL_RED_MIN_CLAMP_INGR

See Also:
    Constant Field Values

GL_GREEN_MIN_CLAMP_INGR

public static final int GL_GREEN_MIN_CLAMP_INGR

See Also:
    Constant Field Values

GL_BLUE_MIN_CLAMP_INGR

public static final int GL_BLUE_MIN_CLAMP_INGR

See Also:
    Constant Field Values

GL_ALPHA_MIN_CLAMP_INGR

public static final int GL_ALPHA_MIN_CLAMP_INGR

See Also:
    Constant Field Values

GL_RED_MAX_CLAMP_INGR

public static final int GL_RED_MAX_CLAMP_INGR

See Also:
    Constant Field Values

GL_GREEN_MAX_CLAMP_INGR

public static final int GL_GREEN_MAX_CLAMP_INGR

See Also:
    Constant Field Values

GL_BLUE_MAX_CLAMP_INGR

public static final int GL_BLUE_MAX_CLAMP_INGR

See Also:
    Constant Field Values

GL_ALPHA_MAX_CLAMP_INGR

public static final int GL_ALPHA_MAX_CLAMP_INGR

See Also:
    Constant Field Values

GL_INTERLACE_READ_INGR

public static final int GL_INTERLACE_READ_INGR

See Also:
    Constant Field Values

GL_INCR_WRAP_EXT

public static final int GL_INCR_WRAP_EXT

See Also:
    Constant Field Values

GL_DECR_WRAP_EXT

public static final int GL_DECR_WRAP_EXT

See Also:
    Constant Field Values

GL_422_EXT

public static final int GL_422_EXT

See Also:
    Constant Field Values

GL_422_REV_EXT

public static final int GL_422_REV_EXT

See Also:
    Constant Field Values

GL_422_AVERAGE_EXT

public static final int GL_422_AVERAGE_EXT

See Also:
    Constant Field Values

GL_422_REV_AVERAGE_EXT

public static final int GL_422_REV_AVERAGE_EXT

See Also:
    Constant Field Values

GL_NORMAL_MAP_NV

public static final int GL_NORMAL_MAP_NV

See Also:
    Constant Field Values

GL_REFLECTION_MAP_NV

public static final int GL_REFLECTION_MAP_NV

See Also:
    Constant Field Values

GL_WRAP_BORDER_SUN

public static final int GL_WRAP_BORDER_SUN

See Also:
    Constant Field Values

GL_MAX_TEXTURE_LOD_BIAS_EXT

public static final int GL_MAX_TEXTURE_LOD_BIAS_EXT

See Also:
    Constant Field Values

GL_TEXTURE_FILTER_CONTROL_EXT

public static final int GL_TEXTURE_FILTER_CONTROL_EXT

See Also:
    Constant Field Values

GL_TEXTURE_LOD_BIAS_EXT

public static final int GL_TEXTURE_LOD_BIAS_EXT

See Also:
    Constant Field Values

GL_TEXTURE_MAX_ANISOTROPY_EXT

public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT

See Also:
    Constant Field Values

GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT

public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT

See Also:
    Constant Field Values

GL_MODELVIEW0_STACK_DEPTH_EXT

public static final int GL_MODELVIEW0_STACK_DEPTH_EXT

See Also:
    Constant Field Values

GL_MODELVIEW1_STACK_DEPTH_EXT

public static final int GL_MODELVIEW1_STACK_DEPTH_EXT

See Also:
    Constant Field Values

GL_MODELVIEW0_MATRIX_EXT

public static final int GL_MODELVIEW0_MATRIX_EXT

See Also:
    Constant Field Values

GL_MODELVIEW1_MATRIX_EXT

public static final int GL_MODELVIEW1_MATRIX_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHTING_EXT

public static final int GL_VERTEX_WEIGHTING_EXT

See Also:
    Constant Field Values

GL_MODELVIEW0_EXT

public static final int GL_MODELVIEW0_EXT

See Also:
    Constant Field Values

GL_MODELVIEW1_EXT

public static final int GL_MODELVIEW1_EXT

See Also:
    Constant Field Values

GL_CURRENT_VERTEX_WEIGHT_EXT

public static final int GL_CURRENT_VERTEX_WEIGHT_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHT_ARRAY_EXT

public static final int GL_VERTEX_WEIGHT_ARRAY_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT

public static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT

public static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT

public static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT

See Also:
    Constant Field Values

GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT

public static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT

See Also:
    Constant Field Values

GL_MAX_SHININESS_NV

public static final int GL_MAX_SHININESS_NV

See Also:
    Constant Field Values

GL_MAX_SPOT_EXPONENT_NV

public static final int GL_MAX_SPOT_EXPONENT_NV

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_NV

public static final int GL_VERTEX_ARRAY_RANGE_NV

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_LENGTH_NV

public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_VALID_NV

public static final int GL_VERTEX_ARRAY_RANGE_VALID_NV

See Also:
    Constant Field Values

GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV

public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_POINTER_NV

public static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV

See Also:
    Constant Field Values

GL_REGISTER_COMBINERS_NV

public static final int GL_REGISTER_COMBINERS_NV

See Also:
    Constant Field Values

GL_VARIABLE_A_NV

public static final int GL_VARIABLE_A_NV

See Also:
    Constant Field Values

GL_VARIABLE_B_NV

public static final int GL_VARIABLE_B_NV

See Also:
    Constant Field Values

GL_VARIABLE_C_NV

public static final int GL_VARIABLE_C_NV

See Also:
    Constant Field Values

GL_VARIABLE_D_NV

public static final int GL_VARIABLE_D_NV

See Also:
    Constant Field Values

GL_VARIABLE_E_NV

public static final int GL_VARIABLE_E_NV

See Also:
    Constant Field Values

GL_VARIABLE_F_NV

public static final int GL_VARIABLE_F_NV

See Also:
    Constant Field Values

GL_VARIABLE_G_NV

public static final int GL_VARIABLE_G_NV

See Also:
    Constant Field Values

GL_CONSTANT_COLOR0_NV

public static final int GL_CONSTANT_COLOR0_NV

See Also:
    Constant Field Values

GL_CONSTANT_COLOR1_NV

public static final int GL_CONSTANT_COLOR1_NV

See Also:
    Constant Field Values

GL_PRIMARY_COLOR_NV

public static final int GL_PRIMARY_COLOR_NV

See Also:
    Constant Field Values

GL_SECONDARY_COLOR_NV

public static final int GL_SECONDARY_COLOR_NV

See Also:
    Constant Field Values

GL_SPARE0_NV

public static final int GL_SPARE0_NV

See Also:
    Constant Field Values

GL_SPARE1_NV

public static final int GL_SPARE1_NV

See Also:
    Constant Field Values

GL_DISCARD_NV

public static final int GL_DISCARD_NV

See Also:
    Constant Field Values

GL_E_TIMES_F_NV

public static final int GL_E_TIMES_F_NV

See Also:
    Constant Field Values

GL_SPARE0_PLUS_SECONDARY_COLOR_NV

public static final int GL_SPARE0_PLUS_SECONDARY_COLOR_NV

See Also:
    Constant Field Values

GL_UNSIGNED_IDENTITY_NV

public static final int GL_UNSIGNED_IDENTITY_NV

See Also:
    Constant Field Values

GL_UNSIGNED_INVERT_NV

public static final int GL_UNSIGNED_INVERT_NV

See Also:
    Constant Field Values

GL_EXPAND_NORMAL_NV

public static final int GL_EXPAND_NORMAL_NV

See Also:
    Constant Field Values

GL_EXPAND_NEGATE_NV

public static final int GL_EXPAND_NEGATE_NV

See Also:
    Constant Field Values

GL_HALF_BIAS_NORMAL_NV

public static final int GL_HALF_BIAS_NORMAL_NV

See Also:
    Constant Field Values

GL_HALF_BIAS_NEGATE_NV

public static final int GL_HALF_BIAS_NEGATE_NV

See Also:
    Constant Field Values

GL_SIGNED_IDENTITY_NV

public static final int GL_SIGNED_IDENTITY_NV

See Also:
    Constant Field Values

GL_SIGNED_NEGATE_NV

public static final int GL_SIGNED_NEGATE_NV

See Also:
    Constant Field Values

GL_SCALE_BY_TWO_NV

public static final int GL_SCALE_BY_TWO_NV

See Also:
    Constant Field Values

GL_SCALE_BY_FOUR_NV

public static final int GL_SCALE_BY_FOUR_NV

See Also:
    Constant Field Values

GL_SCALE_BY_ONE_HALF_NV

public static final int GL_SCALE_BY_ONE_HALF_NV

See Also:
    Constant Field Values

GL_BIAS_BY_NEGATIVE_ONE_HALF_NV

public static final int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV

See Also:
    Constant Field Values

GL_COMBINER_INPUT_NV

public static final int GL_COMBINER_INPUT_NV

See Also:
    Constant Field Values

GL_COMBINER_MAPPING_NV

public static final int GL_COMBINER_MAPPING_NV

See Also:
    Constant Field Values

GL_COMBINER_COMPONENT_USAGE_NV

public static final int GL_COMBINER_COMPONENT_USAGE_NV

See Also:
    Constant Field Values

GL_COMBINER_AB_DOT_PRODUCT_NV

public static final int GL_COMBINER_AB_DOT_PRODUCT_NV

See Also:
    Constant Field Values

GL_COMBINER_CD_DOT_PRODUCT_NV

public static final int GL_COMBINER_CD_DOT_PRODUCT_NV

See Also:
    Constant Field Values

GL_COMBINER_MUX_SUM_NV

public static final int GL_COMBINER_MUX_SUM_NV

See Also:
    Constant Field Values

GL_COMBINER_SCALE_NV

public static final int GL_COMBINER_SCALE_NV

See Also:
    Constant Field Values

GL_COMBINER_BIAS_NV

public static final int GL_COMBINER_BIAS_NV

See Also:
    Constant Field Values

GL_COMBINER_AB_OUTPUT_NV

public static final int GL_COMBINER_AB_OUTPUT_NV

See Also:
    Constant Field Values

GL_COMBINER_CD_OUTPUT_NV

public static final int GL_COMBINER_CD_OUTPUT_NV

See Also:
    Constant Field Values

GL_COMBINER_SUM_OUTPUT_NV

public static final int GL_COMBINER_SUM_OUTPUT_NV

See Also:
    Constant Field Values

GL_MAX_GENERAL_COMBINERS_NV

public static final int GL_MAX_GENERAL_COMBINERS_NV

See Also:
    Constant Field Values

GL_NUM_GENERAL_COMBINERS_NV

public static final int GL_NUM_GENERAL_COMBINERS_NV

See Also:
    Constant Field Values

GL_COLOR_SUM_CLAMP_NV

public static final int GL_COLOR_SUM_CLAMP_NV

See Also:
    Constant Field Values

GL_COMBINER0_NV

public static final int GL_COMBINER0_NV

See Also:
    Constant Field Values

GL_COMBINER1_NV

public static final int GL_COMBINER1_NV

See Also:
    Constant Field Values

GL_COMBINER2_NV

public static final int GL_COMBINER2_NV

See Also:
    Constant Field Values

GL_COMBINER3_NV

public static final int GL_COMBINER3_NV

See Also:
    Constant Field Values

GL_COMBINER4_NV

public static final int GL_COMBINER4_NV

See Also:
    Constant Field Values

GL_COMBINER5_NV

public static final int GL_COMBINER5_NV

See Also:
    Constant Field Values

GL_COMBINER6_NV

public static final int GL_COMBINER6_NV

See Also:
    Constant Field Values

GL_COMBINER7_NV

public static final int GL_COMBINER7_NV

See Also:
    Constant Field Values

GL_FOG_DISTANCE_MODE_NV

public static final int GL_FOG_DISTANCE_MODE_NV

See Also:
    Constant Field Values

GL_EYE_RADIAL_NV

public static final int GL_EYE_RADIAL_NV

See Also:
    Constant Field Values

GL_EYE_PLANE_ABSOLUTE_NV

public static final int GL_EYE_PLANE_ABSOLUTE_NV

See Also:
    Constant Field Values

GL_EMBOSS_LIGHT_NV

public static final int GL_EMBOSS_LIGHT_NV

See Also:
    Constant Field Values

GL_EMBOSS_CONSTANT_NV

public static final int GL_EMBOSS_CONSTANT_NV

See Also:
    Constant Field Values

GL_EMBOSS_MAP_NV

public static final int GL_EMBOSS_MAP_NV

See Also:
    Constant Field Values

GL_COMBINE4_NV

public static final int GL_COMBINE4_NV

See Also:
    Constant Field Values

GL_SOURCE3_RGB_NV

public static final int GL_SOURCE3_RGB_NV

See Also:
    Constant Field Values

GL_SOURCE3_ALPHA_NV

public static final int GL_SOURCE3_ALPHA_NV

See Also:
    Constant Field Values

GL_OPERAND3_RGB_NV

public static final int GL_OPERAND3_RGB_NV

See Also:
    Constant Field Values

GL_OPERAND3_ALPHA_NV

public static final int GL_OPERAND3_ALPHA_NV

See Also:
    Constant Field Values

GL_COMPRESSED_RGB_S3TC_DXT1_EXT

public static final int GL_COMPRESSED_RGB_S3TC_DXT1_EXT

See Also:
    Constant Field Values

GL_COMPRESSED_RGBA_S3TC_DXT1_EXT

public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT

See Also:
    Constant Field Values

GL_COMPRESSED_RGBA_S3TC_DXT3_EXT

public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT

See Also:
    Constant Field Values

GL_COMPRESSED_RGBA_S3TC_DXT5_EXT

public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT

See Also:
    Constant Field Values

GL_CULL_VERTEX_IBM

public static final int GL_CULL_VERTEX_IBM

See Also:
    Constant Field Values

GL_PACK_SUBSAMPLE_RATE_SGIX

public static final int GL_PACK_SUBSAMPLE_RATE_SGIX

See Also:
    Constant Field Values

GL_UNPACK_SUBSAMPLE_RATE_SGIX

public static final int GL_UNPACK_SUBSAMPLE_RATE_SGIX

See Also:
    Constant Field Values

GL_PIXEL_SUBSAMPLE_4444_SGIX

public static final int GL_PIXEL_SUBSAMPLE_4444_SGIX

See Also:
    Constant Field Values

GL_PIXEL_SUBSAMPLE_2424_SGIX

public static final int GL_PIXEL_SUBSAMPLE_2424_SGIX

See Also:
    Constant Field Values

GL_PIXEL_SUBSAMPLE_4242_SGIX

public static final int GL_PIXEL_SUBSAMPLE_4242_SGIX

See Also:
    Constant Field Values

GL_YCRCB_SGIX

public static final int GL_YCRCB_SGIX

See Also:
    Constant Field Values

GL_YCRCBA_SGIX

public static final int GL_YCRCBA_SGIX

See Also:
    Constant Field Values

GL_DEPTH_PASS_INSTRUMENT_SGIX

public static final int GL_DEPTH_PASS_INSTRUMENT_SGIX

See Also:
    Constant Field Values

GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX

public static final int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX

See Also:
    Constant Field Values

GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX

public static final int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX

See Also:
    Constant Field Values

GL_COMPRESSED_RGB_FXT1_3DFX

public static final int GL_COMPRESSED_RGB_FXT1_3DFX

See Also:
    Constant Field Values

GL_COMPRESSED_RGBA_FXT1_3DFX

public static final int GL_COMPRESSED_RGBA_FXT1_3DFX

See Also:
    Constant Field Values

GL_MULTISAMPLE_3DFX

public static final int GL_MULTISAMPLE_3DFX

See Also:
    Constant Field Values

GL_SAMPLE_BUFFERS_3DFX

public static final int GL_SAMPLE_BUFFERS_3DFX

See Also:
    Constant Field Values

GL_SAMPLES_3DFX

public static final int GL_SAMPLES_3DFX

See Also:
    Constant Field Values

GL_MULTISAMPLE_BIT_3DFX

public static final int GL_MULTISAMPLE_BIT_3DFX

See Also:
    Constant Field Values

GL_MULTISAMPLE_EXT

public static final int GL_MULTISAMPLE_EXT

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_MASK_EXT

public static final int GL_SAMPLE_ALPHA_TO_MASK_EXT

See Also:
    Constant Field Values

GL_SAMPLE_ALPHA_TO_ONE_EXT

public static final int GL_SAMPLE_ALPHA_TO_ONE_EXT

See Also:
    Constant Field Values

GL_SAMPLE_MASK_EXT

public static final int GL_SAMPLE_MASK_EXT

See Also:
    Constant Field Values

GL_1PASS_EXT

public static final int GL_1PASS_EXT

See Also:
    Constant Field Values

GL_2PASS_0_EXT

public static final int GL_2PASS_0_EXT

See Also:
    Constant Field Values

GL_2PASS_1_EXT

public static final int GL_2PASS_1_EXT

See Also:
    Constant Field Values

GL_4PASS_0_EXT

public static final int GL_4PASS_0_EXT

See Also:
    Constant Field Values

GL_4PASS_1_EXT

public static final int GL_4PASS_1_EXT

See Also:
    Constant Field Values

GL_4PASS_2_EXT

public static final int GL_4PASS_2_EXT

See Also:
    Constant Field Values

GL_4PASS_3_EXT

public static final int GL_4PASS_3_EXT

See Also:
    Constant Field Values

GL_SAMPLE_BUFFERS_EXT

public static final int GL_SAMPLE_BUFFERS_EXT

See Also:
    Constant Field Values

GL_SAMPLES_EXT

public static final int GL_SAMPLES_EXT

See Also:
    Constant Field Values

GL_SAMPLE_MASK_VALUE_EXT

public static final int GL_SAMPLE_MASK_VALUE_EXT

See Also:
    Constant Field Values

GL_SAMPLE_MASK_INVERT_EXT

public static final int GL_SAMPLE_MASK_INVERT_EXT

See Also:
    Constant Field Values

GL_SAMPLE_PATTERN_EXT

public static final int GL_SAMPLE_PATTERN_EXT

See Also:
    Constant Field Values

GL_MULTISAMPLE_BIT_EXT

public static final int GL_MULTISAMPLE_BIT_EXT

See Also:
    Constant Field Values

GL_VERTEX_PRECLIP_SGIX

public static final int GL_VERTEX_PRECLIP_SGIX

See Also:
    Constant Field Values

GL_VERTEX_PRECLIP_HINT_SGIX

public static final int GL_VERTEX_PRECLIP_HINT_SGIX

See Also:
    Constant Field Values

GL_CONVOLUTION_HINT_SGIX

public static final int GL_CONVOLUTION_HINT_SGIX

See Also:
    Constant Field Values

GL_PACK_RESAMPLE_SGIX

public static final int GL_PACK_RESAMPLE_SGIX

See Also:
    Constant Field Values

GL_UNPACK_RESAMPLE_SGIX

public static final int GL_UNPACK_RESAMPLE_SGIX

See Also:
    Constant Field Values

GL_RESAMPLE_REPLICATE_SGIX

public static final int GL_RESAMPLE_REPLICATE_SGIX

See Also:
    Constant Field Values

GL_RESAMPLE_ZERO_FILL_SGIX

public static final int GL_RESAMPLE_ZERO_FILL_SGIX

See Also:
    Constant Field Values

GL_RESAMPLE_DECIMATE_SGIX

public static final int GL_RESAMPLE_DECIMATE_SGIX

See Also:
    Constant Field Values

GL_EYE_DISTANCE_TO_POINT_SGIS

public static final int GL_EYE_DISTANCE_TO_POINT_SGIS

See Also:
    Constant Field Values

GL_OBJECT_DISTANCE_TO_POINT_SGIS

public static final int GL_OBJECT_DISTANCE_TO_POINT_SGIS

See Also:
    Constant Field Values

GL_EYE_DISTANCE_TO_LINE_SGIS

public static final int GL_EYE_DISTANCE_TO_LINE_SGIS

See Also:
    Constant Field Values

GL_OBJECT_DISTANCE_TO_LINE_SGIS

public static final int GL_OBJECT_DISTANCE_TO_LINE_SGIS

See Also:
    Constant Field Values

GL_EYE_POINT_SGIS

public static final int GL_EYE_POINT_SGIS

See Also:
    Constant Field Values

GL_OBJECT_POINT_SGIS

public static final int GL_OBJECT_POINT_SGIS

See Also:
    Constant Field Values

GL_EYE_LINE_SGIS

public static final int GL_EYE_LINE_SGIS

See Also:
    Constant Field Values

GL_OBJECT_LINE_SGIS

public static final int GL_OBJECT_LINE_SGIS

See Also:
    Constant Field Values

GL_TEXTURE_COLOR_WRITEMASK_SGIS

public static final int GL_TEXTURE_COLOR_WRITEMASK_SGIS

See Also:
    Constant Field Values

GL_MIRROR_CLAMP_ATI

public static final int GL_MIRROR_CLAMP_ATI

See Also:
    Constant Field Values

GL_MIRROR_CLAMP_TO_EDGE_ATI

public static final int GL_MIRROR_CLAMP_TO_EDGE_ATI

See Also:
    Constant Field Values

GL_ALL_COMPLETED_NV

public static final int GL_ALL_COMPLETED_NV

See Also:
    Constant Field Values

GL_FENCE_STATUS_NV

public static final int GL_FENCE_STATUS_NV

See Also:
    Constant Field Values

GL_FENCE_CONDITION_NV

public static final int GL_FENCE_CONDITION_NV

See Also:
    Constant Field Values

GL_MIRRORED_REPEAT_IBM

public static final int GL_MIRRORED_REPEAT_IBM

See Also:
    Constant Field Values

GL_EVAL_2D_NV

public static final int GL_EVAL_2D_NV

See Also:
    Constant Field Values

GL_EVAL_TRIANGULAR_2D_NV

public static final int GL_EVAL_TRIANGULAR_2D_NV

See Also:
    Constant Field Values

GL_MAP_TESSELLATION_NV

public static final int GL_MAP_TESSELLATION_NV

See Also:
    Constant Field Values

GL_MAP_ATTRIB_U_ORDER_NV

public static final int GL_MAP_ATTRIB_U_ORDER_NV

See Also:
    Constant Field Values

GL_MAP_ATTRIB_V_ORDER_NV

public static final int GL_MAP_ATTRIB_V_ORDER_NV

See Also:
    Constant Field Values

GL_EVAL_FRACTIONAL_TESSELLATION_NV

public static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB0_NV

public static final int GL_EVAL_VERTEX_ATTRIB0_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB1_NV

public static final int GL_EVAL_VERTEX_ATTRIB1_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB2_NV

public static final int GL_EVAL_VERTEX_ATTRIB2_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB3_NV

public static final int GL_EVAL_VERTEX_ATTRIB3_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB4_NV

public static final int GL_EVAL_VERTEX_ATTRIB4_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB5_NV

public static final int GL_EVAL_VERTEX_ATTRIB5_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB6_NV

public static final int GL_EVAL_VERTEX_ATTRIB6_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB7_NV

public static final int GL_EVAL_VERTEX_ATTRIB7_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB8_NV

public static final int GL_EVAL_VERTEX_ATTRIB8_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB9_NV

public static final int GL_EVAL_VERTEX_ATTRIB9_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB10_NV

public static final int GL_EVAL_VERTEX_ATTRIB10_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB11_NV

public static final int GL_EVAL_VERTEX_ATTRIB11_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB12_NV

public static final int GL_EVAL_VERTEX_ATTRIB12_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB13_NV

public static final int GL_EVAL_VERTEX_ATTRIB13_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB14_NV

public static final int GL_EVAL_VERTEX_ATTRIB14_NV

See Also:
    Constant Field Values

GL_EVAL_VERTEX_ATTRIB15_NV

public static final int GL_EVAL_VERTEX_ATTRIB15_NV

See Also:
    Constant Field Values

GL_MAX_MAP_TESSELLATION_NV

public static final int GL_MAX_MAP_TESSELLATION_NV

See Also:
    Constant Field Values

GL_MAX_RATIONAL_EVAL_ORDER_NV

public static final int GL_MAX_RATIONAL_EVAL_ORDER_NV

See Also:
    Constant Field Values

GL_DEPTH_STENCIL_NV

public static final int GL_DEPTH_STENCIL_NV

See Also:
    Constant Field Values

GL_UNSIGNED_INT_24_8_NV

public static final int GL_UNSIGNED_INT_24_8_NV

See Also:
    Constant Field Values

GL_PER_STAGE_CONSTANTS_NV

public static final int GL_PER_STAGE_CONSTANTS_NV

See Also:
    Constant Field Values

GL_TEXTURE_RECTANGLE_NV

public static final int GL_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_RECTANGLE_NV

public static final int GL_TEXTURE_BINDING_RECTANGLE_NV

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_RECTANGLE_NV

public static final int GL_PROXY_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_MAX_RECTANGLE_TEXTURE_SIZE_NV

public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_RECTANGLE_NV

public static final int GL_OFFSET_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV

public static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV

public static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV

public static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV

See Also:
    Constant Field Values

GL_UNSIGNED_INT_S8_S8_8_8_NV

public static final int GL_UNSIGNED_INT_S8_S8_8_8_NV

See Also:
    Constant Field Values

GL_UNSIGNED_INT_8_8_S8_S8_REV_NV

public static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV

See Also:
    Constant Field Values

GL_DSDT_MAG_INTENSITY_NV

public static final int GL_DSDT_MAG_INTENSITY_NV

See Also:
    Constant Field Values

GL_SHADER_CONSISTENT_NV

public static final int GL_SHADER_CONSISTENT_NV

See Also:
    Constant Field Values

GL_TEXTURE_SHADER_NV

public static final int GL_TEXTURE_SHADER_NV

See Also:
    Constant Field Values

GL_SHADER_OPERATION_NV

public static final int GL_SHADER_OPERATION_NV

See Also:
    Constant Field Values

GL_CULL_MODES_NV

public static final int GL_CULL_MODES_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_MATRIX_NV

public static final int GL_OFFSET_TEXTURE_MATRIX_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_SCALE_NV

public static final int GL_OFFSET_TEXTURE_SCALE_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_BIAS_NV

public static final int GL_OFFSET_TEXTURE_BIAS_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_2D_MATRIX_NV

public static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_2D_SCALE_NV

public static final int GL_OFFSET_TEXTURE_2D_SCALE_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_2D_BIAS_NV

public static final int GL_OFFSET_TEXTURE_2D_BIAS_NV

See Also:
    Constant Field Values

GL_PREVIOUS_TEXTURE_INPUT_NV

public static final int GL_PREVIOUS_TEXTURE_INPUT_NV

See Also:
    Constant Field Values

GL_CONST_EYE_NV

public static final int GL_CONST_EYE_NV

See Also:
    Constant Field Values

GL_PASS_THROUGH_NV

public static final int GL_PASS_THROUGH_NV

See Also:
    Constant Field Values

GL_CULL_FRAGMENT_NV

public static final int GL_CULL_FRAGMENT_NV

See Also:
    Constant Field Values

GL_OFFSET_TEXTURE_2D_NV

public static final int GL_OFFSET_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_DEPENDENT_AR_TEXTURE_2D_NV

public static final int GL_DEPENDENT_AR_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_DEPENDENT_GB_TEXTURE_2D_NV

public static final int GL_DEPENDENT_GB_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_NV

public static final int GL_DOT_PRODUCT_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_DEPTH_REPLACE_NV

public static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_TEXTURE_2D_NV

public static final int GL_DOT_PRODUCT_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV

public static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV

public static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV

public static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV

public static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV

See Also:
    Constant Field Values

GL_HILO_NV

public static final int GL_HILO_NV

See Also:
    Constant Field Values

GL_DSDT_NV

public static final int GL_DSDT_NV

See Also:
    Constant Field Values

GL_DSDT_MAG_NV

public static final int GL_DSDT_MAG_NV

See Also:
    Constant Field Values

GL_DSDT_MAG_VIB_NV

public static final int GL_DSDT_MAG_VIB_NV

See Also:
    Constant Field Values

GL_HILO16_NV

public static final int GL_HILO16_NV

See Also:
    Constant Field Values

GL_SIGNED_HILO_NV

public static final int GL_SIGNED_HILO_NV

See Also:
    Constant Field Values

GL_SIGNED_HILO16_NV

public static final int GL_SIGNED_HILO16_NV

See Also:
    Constant Field Values

GL_SIGNED_RGBA_NV

public static final int GL_SIGNED_RGBA_NV

See Also:
    Constant Field Values

GL_SIGNED_RGBA8_NV

public static final int GL_SIGNED_RGBA8_NV

See Also:
    Constant Field Values

GL_SIGNED_RGB_NV

public static final int GL_SIGNED_RGB_NV

See Also:
    Constant Field Values

GL_SIGNED_RGB8_NV

public static final int GL_SIGNED_RGB8_NV

See Also:
    Constant Field Values

GL_SIGNED_LUMINANCE_NV

public static final int GL_SIGNED_LUMINANCE_NV

See Also:
    Constant Field Values

GL_SIGNED_LUMINANCE8_NV

public static final int GL_SIGNED_LUMINANCE8_NV

See Also:
    Constant Field Values

GL_SIGNED_LUMINANCE_ALPHA_NV

public static final int GL_SIGNED_LUMINANCE_ALPHA_NV

See Also:
    Constant Field Values

GL_SIGNED_LUMINANCE8_ALPHA8_NV

public static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV

See Also:
    Constant Field Values

GL_SIGNED_ALPHA_NV

public static final int GL_SIGNED_ALPHA_NV

See Also:
    Constant Field Values

GL_SIGNED_ALPHA8_NV

public static final int GL_SIGNED_ALPHA8_NV

See Also:
    Constant Field Values

GL_SIGNED_INTENSITY_NV

public static final int GL_SIGNED_INTENSITY_NV

See Also:
    Constant Field Values

GL_SIGNED_INTENSITY8_NV

public static final int GL_SIGNED_INTENSITY8_NV

See Also:
    Constant Field Values

GL_DSDT8_NV

public static final int GL_DSDT8_NV

See Also:
    Constant Field Values

GL_DSDT8_MAG8_NV

public static final int GL_DSDT8_MAG8_NV

See Also:
    Constant Field Values

GL_DSDT8_MAG8_INTENSITY8_NV

public static final int GL_DSDT8_MAG8_INTENSITY8_NV

See Also:
    Constant Field Values

GL_SIGNED_RGB_UNSIGNED_ALPHA_NV

public static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV

See Also:
    Constant Field Values

GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV

public static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV

See Also:
    Constant Field Values

GL_HI_SCALE_NV

public static final int GL_HI_SCALE_NV

See Also:
    Constant Field Values

GL_LO_SCALE_NV

public static final int GL_LO_SCALE_NV

See Also:
    Constant Field Values

GL_DS_SCALE_NV

public static final int GL_DS_SCALE_NV

See Also:
    Constant Field Values

GL_DT_SCALE_NV

public static final int GL_DT_SCALE_NV

See Also:
    Constant Field Values

GL_MAGNITUDE_SCALE_NV

public static final int GL_MAGNITUDE_SCALE_NV

See Also:
    Constant Field Values

GL_VIBRANCE_SCALE_NV

public static final int GL_VIBRANCE_SCALE_NV

See Also:
    Constant Field Values

GL_HI_BIAS_NV

public static final int GL_HI_BIAS_NV

See Also:
    Constant Field Values

GL_LO_BIAS_NV

public static final int GL_LO_BIAS_NV

See Also:
    Constant Field Values

GL_DS_BIAS_NV

public static final int GL_DS_BIAS_NV

See Also:
    Constant Field Values

GL_DT_BIAS_NV

public static final int GL_DT_BIAS_NV

See Also:
    Constant Field Values

GL_MAGNITUDE_BIAS_NV

public static final int GL_MAGNITUDE_BIAS_NV

See Also:
    Constant Field Values

GL_VIBRANCE_BIAS_NV

public static final int GL_VIBRANCE_BIAS_NV

See Also:
    Constant Field Values

GL_TEXTURE_BORDER_VALUES_NV

public static final int GL_TEXTURE_BORDER_VALUES_NV

See Also:
    Constant Field Values

GL_TEXTURE_HI_SIZE_NV

public static final int GL_TEXTURE_HI_SIZE_NV

See Also:
    Constant Field Values

GL_TEXTURE_LO_SIZE_NV

public static final int GL_TEXTURE_LO_SIZE_NV

See Also:
    Constant Field Values

GL_TEXTURE_DS_SIZE_NV

public static final int GL_TEXTURE_DS_SIZE_NV

See Also:
    Constant Field Values

GL_TEXTURE_DT_SIZE_NV

public static final int GL_TEXTURE_DT_SIZE_NV

See Also:
    Constant Field Values

GL_TEXTURE_MAG_SIZE_NV

public static final int GL_TEXTURE_MAG_SIZE_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_TEXTURE_3D_NV

public static final int GL_DOT_PRODUCT_TEXTURE_3D_NV

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV

public static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_NV

public static final int GL_VERTEX_PROGRAM_NV

See Also:
    Constant Field Values

GL_VERTEX_STATE_PROGRAM_NV

public static final int GL_VERTEX_STATE_PROGRAM_NV

See Also:
    Constant Field Values

GL_ATTRIB_ARRAY_SIZE_NV

public static final int GL_ATTRIB_ARRAY_SIZE_NV

See Also:
    Constant Field Values

GL_ATTRIB_ARRAY_STRIDE_NV

public static final int GL_ATTRIB_ARRAY_STRIDE_NV

See Also:
    Constant Field Values

GL_ATTRIB_ARRAY_TYPE_NV

public static final int GL_ATTRIB_ARRAY_TYPE_NV

See Also:
    Constant Field Values

GL_CURRENT_ATTRIB_NV

public static final int GL_CURRENT_ATTRIB_NV

See Also:
    Constant Field Values

GL_PROGRAM_LENGTH_NV

public static final int GL_PROGRAM_LENGTH_NV

See Also:
    Constant Field Values

GL_PROGRAM_STRING_NV

public static final int GL_PROGRAM_STRING_NV

See Also:
    Constant Field Values

GL_MODELVIEW_PROJECTION_NV

public static final int GL_MODELVIEW_PROJECTION_NV

See Also:
    Constant Field Values

GL_IDENTITY_NV

public static final int GL_IDENTITY_NV

See Also:
    Constant Field Values

GL_INVERSE_NV

public static final int GL_INVERSE_NV

See Also:
    Constant Field Values

GL_TRANSPOSE_NV

public static final int GL_TRANSPOSE_NV

See Also:
    Constant Field Values

GL_INVERSE_TRANSPOSE_NV

public static final int GL_INVERSE_TRANSPOSE_NV

See Also:
    Constant Field Values

GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV

public static final int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV

See Also:
    Constant Field Values

GL_MAX_TRACK_MATRICES_NV

public static final int GL_MAX_TRACK_MATRICES_NV

See Also:
    Constant Field Values

GL_MATRIX0_NV

public static final int GL_MATRIX0_NV

See Also:
    Constant Field Values

GL_MATRIX1_NV

public static final int GL_MATRIX1_NV

See Also:
    Constant Field Values

GL_MATRIX2_NV

public static final int GL_MATRIX2_NV

See Also:
    Constant Field Values

GL_MATRIX3_NV

public static final int GL_MATRIX3_NV

See Also:
    Constant Field Values

GL_MATRIX4_NV

public static final int GL_MATRIX4_NV

See Also:
    Constant Field Values

GL_MATRIX5_NV

public static final int GL_MATRIX5_NV

See Also:
    Constant Field Values

GL_MATRIX6_NV

public static final int GL_MATRIX6_NV

See Also:
    Constant Field Values

GL_MATRIX7_NV

public static final int GL_MATRIX7_NV

See Also:
    Constant Field Values

GL_CURRENT_MATRIX_STACK_DEPTH_NV

public static final int GL_CURRENT_MATRIX_STACK_DEPTH_NV

See Also:
    Constant Field Values

GL_CURRENT_MATRIX_NV

public static final int GL_CURRENT_MATRIX_NV

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_POINT_SIZE_NV

public static final int GL_VERTEX_PROGRAM_POINT_SIZE_NV

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_TWO_SIDE_NV

public static final int GL_VERTEX_PROGRAM_TWO_SIDE_NV

See Also:
    Constant Field Values

GL_PROGRAM_PARAMETER_NV

public static final int GL_PROGRAM_PARAMETER_NV

See Also:
    Constant Field Values

GL_ATTRIB_ARRAY_POINTER_NV

public static final int GL_ATTRIB_ARRAY_POINTER_NV

See Also:
    Constant Field Values

GL_PROGRAM_TARGET_NV

public static final int GL_PROGRAM_TARGET_NV

See Also:
    Constant Field Values

GL_PROGRAM_RESIDENT_NV

public static final int GL_PROGRAM_RESIDENT_NV

See Also:
    Constant Field Values

GL_TRACK_MATRIX_NV

public static final int GL_TRACK_MATRIX_NV

See Also:
    Constant Field Values

GL_TRACK_MATRIX_TRANSFORM_NV

public static final int GL_TRACK_MATRIX_TRANSFORM_NV

See Also:
    Constant Field Values

GL_VERTEX_PROGRAM_BINDING_NV

public static final int GL_VERTEX_PROGRAM_BINDING_NV

See Also:
    Constant Field Values

GL_PROGRAM_ERROR_POSITION_NV

public static final int GL_PROGRAM_ERROR_POSITION_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY0_NV

public static final int GL_VERTEX_ATTRIB_ARRAY0_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY1_NV

public static final int GL_VERTEX_ATTRIB_ARRAY1_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY2_NV

public static final int GL_VERTEX_ATTRIB_ARRAY2_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY3_NV

public static final int GL_VERTEX_ATTRIB_ARRAY3_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY4_NV

public static final int GL_VERTEX_ATTRIB_ARRAY4_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY5_NV

public static final int GL_VERTEX_ATTRIB_ARRAY5_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY6_NV

public static final int GL_VERTEX_ATTRIB_ARRAY6_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY7_NV

public static final int GL_VERTEX_ATTRIB_ARRAY7_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY8_NV

public static final int GL_VERTEX_ATTRIB_ARRAY8_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY9_NV

public static final int GL_VERTEX_ATTRIB_ARRAY9_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY10_NV

public static final int GL_VERTEX_ATTRIB_ARRAY10_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY11_NV

public static final int GL_VERTEX_ATTRIB_ARRAY11_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY12_NV

public static final int GL_VERTEX_ATTRIB_ARRAY12_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY13_NV

public static final int GL_VERTEX_ATTRIB_ARRAY13_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY14_NV

public static final int GL_VERTEX_ATTRIB_ARRAY14_NV

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_ARRAY15_NV

public static final int GL_VERTEX_ATTRIB_ARRAY15_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB0_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB0_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB1_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB1_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB2_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB2_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB3_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB3_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB4_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB4_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB5_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB5_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB6_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB6_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB7_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB7_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB8_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB8_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB9_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB9_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB10_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB10_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB11_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB11_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB12_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB12_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB13_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB13_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB14_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB14_4_NV

See Also:
    Constant Field Values

GL_MAP1_VERTEX_ATTRIB15_4_NV

public static final int GL_MAP1_VERTEX_ATTRIB15_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB0_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB0_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB1_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB1_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB2_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB2_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB3_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB3_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB4_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB4_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB5_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB5_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB6_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB6_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB7_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB7_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB8_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB8_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB9_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB9_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB10_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB10_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB11_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB11_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB12_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB12_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB13_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB13_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB14_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB14_4_NV

See Also:
    Constant Field Values

GL_MAP2_VERTEX_ATTRIB15_4_NV

public static final int GL_MAP2_VERTEX_ATTRIB15_4_NV

See Also:
    Constant Field Values

GL_TEXTURE_MAX_CLAMP_S_SGIX

public static final int GL_TEXTURE_MAX_CLAMP_S_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_MAX_CLAMP_T_SGIX

public static final int GL_TEXTURE_MAX_CLAMP_T_SGIX

See Also:
    Constant Field Values

GL_TEXTURE_MAX_CLAMP_R_SGIX

public static final int GL_TEXTURE_MAX_CLAMP_R_SGIX

See Also:
    Constant Field Values

GL_SCALEBIAS_HINT_SGIX

public static final int GL_SCALEBIAS_HINT_SGIX

See Also:
    Constant Field Values

GL_INTERLACE_OML

public static final int GL_INTERLACE_OML

See Also:
    Constant Field Values

GL_INTERLACE_READ_OML

public static final int GL_INTERLACE_READ_OML

See Also:
    Constant Field Values

GL_FORMAT_SUBSAMPLE_24_24_OML

public static final int GL_FORMAT_SUBSAMPLE_24_24_OML

See Also:
    Constant Field Values

GL_FORMAT_SUBSAMPLE_244_244_OML

public static final int GL_FORMAT_SUBSAMPLE_244_244_OML

See Also:
    Constant Field Values

GL_PACK_RESAMPLE_OML

public static final int GL_PACK_RESAMPLE_OML

See Also:
    Constant Field Values

GL_UNPACK_RESAMPLE_OML

public static final int GL_UNPACK_RESAMPLE_OML

See Also:
    Constant Field Values

GL_RESAMPLE_REPLICATE_OML

public static final int GL_RESAMPLE_REPLICATE_OML

See Also:
    Constant Field Values

GL_RESAMPLE_ZERO_FILL_OML

public static final int GL_RESAMPLE_ZERO_FILL_OML

See Also:
    Constant Field Values

GL_RESAMPLE_AVERAGE_OML

public static final int GL_RESAMPLE_AVERAGE_OML

See Also:
    Constant Field Values

GL_RESAMPLE_DECIMATE_OML

public static final int GL_RESAMPLE_DECIMATE_OML

See Also:
    Constant Field Values

GL_DEPTH_STENCIL_TO_RGBA_NV

public static final int GL_DEPTH_STENCIL_TO_RGBA_NV

See Also:
    Constant Field Values

GL_DEPTH_STENCIL_TO_BGRA_NV

public static final int GL_DEPTH_STENCIL_TO_BGRA_NV

See Also:
    Constant Field Values

GL_BUMP_ROT_MATRIX_ATI

public static final int GL_BUMP_ROT_MATRIX_ATI

See Also:
    Constant Field Values

GL_BUMP_ROT_MATRIX_SIZE_ATI

public static final int GL_BUMP_ROT_MATRIX_SIZE_ATI

See Also:
    Constant Field Values

GL_BUMP_NUM_TEX_UNITS_ATI

public static final int GL_BUMP_NUM_TEX_UNITS_ATI

See Also:
    Constant Field Values

GL_BUMP_TEX_UNITS_ATI

public static final int GL_BUMP_TEX_UNITS_ATI

See Also:
    Constant Field Values

GL_DUDV_ATI

public static final int GL_DUDV_ATI

See Also:
    Constant Field Values

GL_DU8DV8_ATI

public static final int GL_DU8DV8_ATI

See Also:
    Constant Field Values

GL_BUMP_ENVMAP_ATI

public static final int GL_BUMP_ENVMAP_ATI

See Also:
    Constant Field Values

GL_BUMP_TARGET_ATI

public static final int GL_BUMP_TARGET_ATI

See Also:
    Constant Field Values

GL_FRAGMENT_SHADER_ATI

public static final int GL_FRAGMENT_SHADER_ATI

See Also:
    Constant Field Values

GL_REG_0_ATI

public static final int GL_REG_0_ATI

See Also:
    Constant Field Values

GL_REG_1_ATI

public static final int GL_REG_1_ATI

See Also:
    Constant Field Values

GL_REG_2_ATI

public static final int GL_REG_2_ATI

See Also:
    Constant Field Values

GL_REG_3_ATI

public static final int GL_REG_3_ATI

See Also:
    Constant Field Values

GL_REG_4_ATI

public static final int GL_REG_4_ATI

See Also:
    Constant Field Values

GL_REG_5_ATI

public static final int GL_REG_5_ATI

See Also:
    Constant Field Values

GL_REG_6_ATI

public static final int GL_REG_6_ATI

See Also:
    Constant Field Values

GL_REG_7_ATI

public static final int GL_REG_7_ATI

See Also:
    Constant Field Values

GL_REG_8_ATI

public static final int GL_REG_8_ATI

See Also:
    Constant Field Values

GL_REG_9_ATI

public static final int GL_REG_9_ATI

See Also:
    Constant Field Values

GL_REG_10_ATI

public static final int GL_REG_10_ATI

See Also:
    Constant Field Values

GL_REG_11_ATI

public static final int GL_REG_11_ATI

See Also:
    Constant Field Values

GL_REG_12_ATI

public static final int GL_REG_12_ATI

See Also:
    Constant Field Values

GL_REG_13_ATI

public static final int GL_REG_13_ATI

See Also:
    Constant Field Values

GL_REG_14_ATI

public static final int GL_REG_14_ATI

See Also:
    Constant Field Values

GL_REG_15_ATI

public static final int GL_REG_15_ATI

See Also:
    Constant Field Values

GL_REG_16_ATI

public static final int GL_REG_16_ATI

See Also:
    Constant Field Values

GL_REG_17_ATI

public static final int GL_REG_17_ATI

See Also:
    Constant Field Values

GL_REG_18_ATI

public static final int GL_REG_18_ATI

See Also:
    Constant Field Values

GL_REG_19_ATI

public static final int GL_REG_19_ATI

See Also:
    Constant Field Values

GL_REG_20_ATI

public static final int GL_REG_20_ATI

See Also:
    Constant Field Values

GL_REG_21_ATI

public static final int GL_REG_21_ATI

See Also:
    Constant Field Values

GL_REG_22_ATI

public static final int GL_REG_22_ATI

See Also:
    Constant Field Values

GL_REG_23_ATI

public static final int GL_REG_23_ATI

See Also:
    Constant Field Values

GL_REG_24_ATI

public static final int GL_REG_24_ATI

See Also:
    Constant Field Values

GL_REG_25_ATI

public static final int GL_REG_25_ATI

See Also:
    Constant Field Values

GL_REG_26_ATI

public static final int GL_REG_26_ATI

See Also:
    Constant Field Values

GL_REG_27_ATI

public static final int GL_REG_27_ATI

See Also:
    Constant Field Values

GL_REG_28_ATI

public static final int GL_REG_28_ATI

See Also:
    Constant Field Values

GL_REG_29_ATI

public static final int GL_REG_29_ATI

See Also:
    Constant Field Values

GL_REG_30_ATI

public static final int GL_REG_30_ATI

See Also:
    Constant Field Values

GL_REG_31_ATI

public static final int GL_REG_31_ATI

See Also:
    Constant Field Values

GL_CON_0_ATI

public static final int GL_CON_0_ATI

See Also:
    Constant Field Values

GL_CON_1_ATI

public static final int GL_CON_1_ATI

See Also:
    Constant Field Values

GL_CON_2_ATI

public static final int GL_CON_2_ATI

See Also:
    Constant Field Values

GL_CON_3_ATI

public static final int GL_CON_3_ATI

See Also:
    Constant Field Values

GL_CON_4_ATI

public static final int GL_CON_4_ATI

See Also:
    Constant Field Values

GL_CON_5_ATI

public static final int GL_CON_5_ATI

See Also:
    Constant Field Values

GL_CON_6_ATI

public static final int GL_CON_6_ATI

See Also:
    Constant Field Values

GL_CON_7_ATI

public static final int GL_CON_7_ATI

See Also:
    Constant Field Values

GL_CON_8_ATI

public static final int GL_CON_8_ATI

See Also:
    Constant Field Values

GL_CON_9_ATI

public static final int GL_CON_9_ATI

See Also:
    Constant Field Values

GL_CON_10_ATI

public static final int GL_CON_10_ATI

See Also:
    Constant Field Values

GL_CON_11_ATI

public static final int GL_CON_11_ATI

See Also:
    Constant Field Values

GL_CON_12_ATI

public static final int GL_CON_12_ATI

See Also:
    Constant Field Values

GL_CON_13_ATI

public static final int GL_CON_13_ATI

See Also:
    Constant Field Values

GL_CON_14_ATI

public static final int GL_CON_14_ATI

See Also:
    Constant Field Values

GL_CON_15_ATI

public static final int GL_CON_15_ATI

See Also:
    Constant Field Values

GL_CON_16_ATI

public static final int GL_CON_16_ATI

See Also:
    Constant Field Values

GL_CON_17_ATI

public static final int GL_CON_17_ATI

See Also:
    Constant Field Values

GL_CON_18_ATI

public static final int GL_CON_18_ATI

See Also:
    Constant Field Values

GL_CON_19_ATI

public static final int GL_CON_19_ATI

See Also:
    Constant Field Values

GL_CON_20_ATI

public static final int GL_CON_20_ATI

See Also:
    Constant Field Values

GL_CON_21_ATI

public static final int GL_CON_21_ATI

See Also:
    Constant Field Values

GL_CON_22_ATI

public static final int GL_CON_22_ATI

See Also:
    Constant Field Values

GL_CON_23_ATI

public static final int GL_CON_23_ATI

See Also:
    Constant Field Values

GL_CON_24_ATI

public static final int GL_CON_24_ATI

See Also:
    Constant Field Values

GL_CON_25_ATI

public static final int GL_CON_25_ATI

See Also:
    Constant Field Values

GL_CON_26_ATI

public static final int GL_CON_26_ATI

See Also:
    Constant Field Values

GL_CON_27_ATI

public static final int GL_CON_27_ATI

See Also:
    Constant Field Values

GL_CON_28_ATI

public static final int GL_CON_28_ATI

See Also:
    Constant Field Values

GL_CON_29_ATI

public static final int GL_CON_29_ATI

See Also:
    Constant Field Values

GL_CON_30_ATI

public static final int GL_CON_30_ATI

See Also:
    Constant Field Values

GL_CON_31_ATI

public static final int GL_CON_31_ATI

See Also:
    Constant Field Values

GL_MOV_ATI

public static final int GL_MOV_ATI

See Also:
    Constant Field Values

GL_ADD_ATI

public static final int GL_ADD_ATI

See Also:
    Constant Field Values

GL_MUL_ATI

public static final int GL_MUL_ATI

See Also:
    Constant Field Values

GL_SUB_ATI

public static final int GL_SUB_ATI

See Also:
    Constant Field Values

GL_DOT3_ATI

public static final int GL_DOT3_ATI

See Also:
    Constant Field Values

GL_DOT4_ATI

public static final int GL_DOT4_ATI

See Also:
    Constant Field Values

GL_MAD_ATI

public static final int GL_MAD_ATI

See Also:
    Constant Field Values

GL_LERP_ATI

public static final int GL_LERP_ATI

See Also:
    Constant Field Values

GL_CND_ATI

public static final int GL_CND_ATI

See Also:
    Constant Field Values

GL_CND0_ATI

public static final int GL_CND0_ATI

See Also:
    Constant Field Values

GL_DOT2_ADD_ATI

public static final int GL_DOT2_ADD_ATI

See Also:
    Constant Field Values

GL_SECONDARY_INTERPOLATOR_ATI

public static final int GL_SECONDARY_INTERPOLATOR_ATI

See Also:
    Constant Field Values

GL_NUM_FRAGMENT_REGISTERS_ATI

public static final int GL_NUM_FRAGMENT_REGISTERS_ATI

See Also:
    Constant Field Values

GL_NUM_FRAGMENT_CONSTANTS_ATI

public static final int GL_NUM_FRAGMENT_CONSTANTS_ATI

See Also:
    Constant Field Values

GL_NUM_PASSES_ATI

public static final int GL_NUM_PASSES_ATI

See Also:
    Constant Field Values

GL_NUM_INSTRUCTIONS_PER_PASS_ATI

public static final int GL_NUM_INSTRUCTIONS_PER_PASS_ATI

See Also:
    Constant Field Values

GL_NUM_INSTRUCTIONS_TOTAL_ATI

public static final int GL_NUM_INSTRUCTIONS_TOTAL_ATI

See Also:
    Constant Field Values

GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI

public static final int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI

See Also:
    Constant Field Values

GL_NUM_LOOPBACK_COMPONENTS_ATI

public static final int GL_NUM_LOOPBACK_COMPONENTS_ATI

See Also:
    Constant Field Values

GL_COLOR_ALPHA_PAIRING_ATI

public static final int GL_COLOR_ALPHA_PAIRING_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STR_ATI

public static final int GL_SWIZZLE_STR_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STQ_ATI

public static final int GL_SWIZZLE_STQ_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STR_DR_ATI

public static final int GL_SWIZZLE_STR_DR_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STQ_DQ_ATI

public static final int GL_SWIZZLE_STQ_DQ_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STRQ_ATI

public static final int GL_SWIZZLE_STRQ_ATI

See Also:
    Constant Field Values

GL_SWIZZLE_STRQ_DQ_ATI

public static final int GL_SWIZZLE_STRQ_DQ_ATI

See Also:
    Constant Field Values

GL_RED_BIT_ATI

public static final int GL_RED_BIT_ATI

See Also:
    Constant Field Values

GL_GREEN_BIT_ATI

public static final int GL_GREEN_BIT_ATI

See Also:
    Constant Field Values

GL_BLUE_BIT_ATI

public static final int GL_BLUE_BIT_ATI

See Also:
    Constant Field Values

GL_2X_BIT_ATI

public static final int GL_2X_BIT_ATI

See Also:
    Constant Field Values

GL_4X_BIT_ATI

public static final int GL_4X_BIT_ATI

See Also:
    Constant Field Values

GL_8X_BIT_ATI

public static final int GL_8X_BIT_ATI

See Also:
    Constant Field Values

GL_HALF_BIT_ATI

public static final int GL_HALF_BIT_ATI

See Also:
    Constant Field Values

GL_QUARTER_BIT_ATI

public static final int GL_QUARTER_BIT_ATI

See Also:
    Constant Field Values

GL_EIGHTH_BIT_ATI

public static final int GL_EIGHTH_BIT_ATI

See Also:
    Constant Field Values

GL_SATURATE_BIT_ATI

public static final int GL_SATURATE_BIT_ATI

See Also:
    Constant Field Values

GL_COMP_BIT_ATI

public static final int GL_COMP_BIT_ATI

See Also:
    Constant Field Values

GL_NEGATE_BIT_ATI

public static final int GL_NEGATE_BIT_ATI

See Also:
    Constant Field Values

GL_BIAS_BIT_ATI

public static final int GL_BIAS_BIT_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_ATI

public static final int GL_PN_TRIANGLES_ATI

See Also:
    Constant Field Values

GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI

public static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_POINT_MODE_ATI

public static final int GL_PN_TRIANGLES_POINT_MODE_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_NORMAL_MODE_ATI

public static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI

public static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI

public static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI

public static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI

public static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI

See Also:
    Constant Field Values

GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI

public static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI

See Also:
    Constant Field Values

GL_STATIC_ATI

public static final int GL_STATIC_ATI

See Also:
    Constant Field Values

GL_DYNAMIC_ATI

public static final int GL_DYNAMIC_ATI

See Also:
    Constant Field Values

GL_PRESERVE_ATI

public static final int GL_PRESERVE_ATI

See Also:
    Constant Field Values

GL_DISCARD_ATI

public static final int GL_DISCARD_ATI

See Also:
    Constant Field Values

GL_OBJECT_BUFFER_SIZE_ATI

public static final int GL_OBJECT_BUFFER_SIZE_ATI

See Also:
    Constant Field Values

GL_OBJECT_BUFFER_USAGE_ATI

public static final int GL_OBJECT_BUFFER_USAGE_ATI

See Also:
    Constant Field Values

GL_ARRAY_OBJECT_BUFFER_ATI

public static final int GL_ARRAY_OBJECT_BUFFER_ATI

See Also:
    Constant Field Values

GL_ARRAY_OBJECT_OFFSET_ATI

public static final int GL_ARRAY_OBJECT_OFFSET_ATI

See Also:
    Constant Field Values

GL_VERTEX_SHADER_EXT

public static final int GL_VERTEX_SHADER_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_BINDING_EXT

public static final int GL_VERTEX_SHADER_BINDING_EXT

See Also:
    Constant Field Values

GL_OP_INDEX_EXT

public static final int GL_OP_INDEX_EXT

See Also:
    Constant Field Values

GL_OP_NEGATE_EXT

public static final int GL_OP_NEGATE_EXT

See Also:
    Constant Field Values

GL_OP_DOT3_EXT

public static final int GL_OP_DOT3_EXT

See Also:
    Constant Field Values

GL_OP_DOT4_EXT

public static final int GL_OP_DOT4_EXT

See Also:
    Constant Field Values

GL_OP_MUL_EXT

public static final int GL_OP_MUL_EXT

See Also:
    Constant Field Values

GL_OP_ADD_EXT

public static final int GL_OP_ADD_EXT

See Also:
    Constant Field Values

GL_OP_MADD_EXT

public static final int GL_OP_MADD_EXT

See Also:
    Constant Field Values

GL_OP_FRAC_EXT

public static final int GL_OP_FRAC_EXT

See Also:
    Constant Field Values

GL_OP_MAX_EXT

public static final int GL_OP_MAX_EXT

See Also:
    Constant Field Values

GL_OP_MIN_EXT

public static final int GL_OP_MIN_EXT

See Also:
    Constant Field Values

GL_OP_SET_GE_EXT

public static final int GL_OP_SET_GE_EXT

See Also:
    Constant Field Values

GL_OP_SET_LT_EXT

public static final int GL_OP_SET_LT_EXT

See Also:
    Constant Field Values

GL_OP_CLAMP_EXT

public static final int GL_OP_CLAMP_EXT

See Also:
    Constant Field Values

GL_OP_FLOOR_EXT

public static final int GL_OP_FLOOR_EXT

See Also:
    Constant Field Values

GL_OP_ROUND_EXT

public static final int GL_OP_ROUND_EXT

See Also:
    Constant Field Values

GL_OP_EXP_BASE_2_EXT

public static final int GL_OP_EXP_BASE_2_EXT

See Also:
    Constant Field Values

GL_OP_LOG_BASE_2_EXT

public static final int GL_OP_LOG_BASE_2_EXT

See Also:
    Constant Field Values

GL_OP_POWER_EXT

public static final int GL_OP_POWER_EXT

See Also:
    Constant Field Values

GL_OP_RECIP_EXT

public static final int GL_OP_RECIP_EXT

See Also:
    Constant Field Values

GL_OP_RECIP_SQRT_EXT

public static final int GL_OP_RECIP_SQRT_EXT

See Also:
    Constant Field Values

GL_OP_SUB_EXT

public static final int GL_OP_SUB_EXT

See Also:
    Constant Field Values

GL_OP_CROSS_PRODUCT_EXT

public static final int GL_OP_CROSS_PRODUCT_EXT

See Also:
    Constant Field Values

GL_OP_MULTIPLY_MATRIX_EXT

public static final int GL_OP_MULTIPLY_MATRIX_EXT

See Also:
    Constant Field Values

GL_OP_MOV_EXT

public static final int GL_OP_MOV_EXT

See Also:
    Constant Field Values

GL_OUTPUT_VERTEX_EXT

public static final int GL_OUTPUT_VERTEX_EXT

See Also:
    Constant Field Values

GL_OUTPUT_COLOR0_EXT

public static final int GL_OUTPUT_COLOR0_EXT

See Also:
    Constant Field Values

GL_OUTPUT_COLOR1_EXT

public static final int GL_OUTPUT_COLOR1_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD0_EXT

public static final int GL_OUTPUT_TEXTURE_COORD0_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD1_EXT

public static final int GL_OUTPUT_TEXTURE_COORD1_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD2_EXT

public static final int GL_OUTPUT_TEXTURE_COORD2_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD3_EXT

public static final int GL_OUTPUT_TEXTURE_COORD3_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD4_EXT

public static final int GL_OUTPUT_TEXTURE_COORD4_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD5_EXT

public static final int GL_OUTPUT_TEXTURE_COORD5_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD6_EXT

public static final int GL_OUTPUT_TEXTURE_COORD6_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD7_EXT

public static final int GL_OUTPUT_TEXTURE_COORD7_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD8_EXT

public static final int GL_OUTPUT_TEXTURE_COORD8_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD9_EXT

public static final int GL_OUTPUT_TEXTURE_COORD9_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD10_EXT

public static final int GL_OUTPUT_TEXTURE_COORD10_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD11_EXT

public static final int GL_OUTPUT_TEXTURE_COORD11_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD12_EXT

public static final int GL_OUTPUT_TEXTURE_COORD12_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD13_EXT

public static final int GL_OUTPUT_TEXTURE_COORD13_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD14_EXT

public static final int GL_OUTPUT_TEXTURE_COORD14_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD15_EXT

public static final int GL_OUTPUT_TEXTURE_COORD15_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD16_EXT

public static final int GL_OUTPUT_TEXTURE_COORD16_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD17_EXT

public static final int GL_OUTPUT_TEXTURE_COORD17_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD18_EXT

public static final int GL_OUTPUT_TEXTURE_COORD18_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD19_EXT

public static final int GL_OUTPUT_TEXTURE_COORD19_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD20_EXT

public static final int GL_OUTPUT_TEXTURE_COORD20_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD21_EXT

public static final int GL_OUTPUT_TEXTURE_COORD21_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD22_EXT

public static final int GL_OUTPUT_TEXTURE_COORD22_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD23_EXT

public static final int GL_OUTPUT_TEXTURE_COORD23_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD24_EXT

public static final int GL_OUTPUT_TEXTURE_COORD24_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD25_EXT

public static final int GL_OUTPUT_TEXTURE_COORD25_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD26_EXT

public static final int GL_OUTPUT_TEXTURE_COORD26_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD27_EXT

public static final int GL_OUTPUT_TEXTURE_COORD27_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD28_EXT

public static final int GL_OUTPUT_TEXTURE_COORD28_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD29_EXT

public static final int GL_OUTPUT_TEXTURE_COORD29_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD30_EXT

public static final int GL_OUTPUT_TEXTURE_COORD30_EXT

See Also:
    Constant Field Values

GL_OUTPUT_TEXTURE_COORD31_EXT

public static final int GL_OUTPUT_TEXTURE_COORD31_EXT

See Also:
    Constant Field Values

GL_OUTPUT_FOG_EXT

public static final int GL_OUTPUT_FOG_EXT

See Also:
    Constant Field Values

GL_SCALAR_EXT

public static final int GL_SCALAR_EXT

See Also:
    Constant Field Values

GL_VECTOR_EXT

public static final int GL_VECTOR_EXT

See Also:
    Constant Field Values

GL_MATRIX_EXT

public static final int GL_MATRIX_EXT

See Also:
    Constant Field Values

GL_VARIANT_EXT

public static final int GL_VARIANT_EXT

See Also:
    Constant Field Values

GL_INVARIANT_EXT

public static final int GL_INVARIANT_EXT

See Also:
    Constant Field Values

GL_LOCAL_CONSTANT_EXT

public static final int GL_LOCAL_CONSTANT_EXT

See Also:
    Constant Field Values

GL_LOCAL_EXT

public static final int GL_LOCAL_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT

public static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_SHADER_VARIANTS_EXT

public static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_SHADER_INVARIANTS_EXT

public static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

public static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_SHADER_LOCALS_EXT

public static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT

See Also:
    Constant Field Values

GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT

public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT

See Also:
    Constant Field Values

GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT

public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT

See Also:
    Constant Field Values

GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

See Also:
    Constant Field Values

GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT

public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT

See Also:
    Constant Field Values

GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT

public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_INSTRUCTIONS_EXT

public static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_VARIANTS_EXT

public static final int GL_VERTEX_SHADER_VARIANTS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_INVARIANTS_EXT

public static final int GL_VERTEX_SHADER_INVARIANTS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

public static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_LOCALS_EXT

public static final int GL_VERTEX_SHADER_LOCALS_EXT

See Also:
    Constant Field Values

GL_VERTEX_SHADER_OPTIMIZED_EXT

public static final int GL_VERTEX_SHADER_OPTIMIZED_EXT

See Also:
    Constant Field Values

GL_X_EXT

public static final int GL_X_EXT

See Also:
    Constant Field Values

GL_Y_EXT

public static final int GL_Y_EXT

See Also:
    Constant Field Values

GL_Z_EXT

public static final int GL_Z_EXT

See Also:
    Constant Field Values

GL_W_EXT

public static final int GL_W_EXT

See Also:
    Constant Field Values

GL_NEGATIVE_X_EXT

public static final int GL_NEGATIVE_X_EXT

See Also:
    Constant Field Values

GL_NEGATIVE_Y_EXT

public static final int GL_NEGATIVE_Y_EXT

See Also:
    Constant Field Values

GL_NEGATIVE_Z_EXT

public static final int GL_NEGATIVE_Z_EXT

See Also:
    Constant Field Values

GL_NEGATIVE_W_EXT

public static final int GL_NEGATIVE_W_EXT

See Also:
    Constant Field Values

GL_ZERO_EXT

public static final int GL_ZERO_EXT

See Also:
    Constant Field Values

GL_ONE_EXT

public static final int GL_ONE_EXT

See Also:
    Constant Field Values

GL_NEGATIVE_ONE_EXT

public static final int GL_NEGATIVE_ONE_EXT

See Also:
    Constant Field Values

GL_NORMALIZED_RANGE_EXT

public static final int GL_NORMALIZED_RANGE_EXT

See Also:
    Constant Field Values

GL_FULL_RANGE_EXT

public static final int GL_FULL_RANGE_EXT

See Also:
    Constant Field Values

GL_CURRENT_VERTEX_EXT

public static final int GL_CURRENT_VERTEX_EXT

See Also:
    Constant Field Values

GL_MVP_MATRIX_EXT

public static final int GL_MVP_MATRIX_EXT

See Also:
    Constant Field Values

GL_VARIANT_VALUE_EXT

public static final int GL_VARIANT_VALUE_EXT

See Also:
    Constant Field Values

GL_VARIANT_DATATYPE_EXT

public static final int GL_VARIANT_DATATYPE_EXT

See Also:
    Constant Field Values

GL_VARIANT_ARRAY_STRIDE_EXT

public static final int GL_VARIANT_ARRAY_STRIDE_EXT

See Also:
    Constant Field Values

GL_VARIANT_ARRAY_TYPE_EXT

public static final int GL_VARIANT_ARRAY_TYPE_EXT

See Also:
    Constant Field Values

GL_VARIANT_ARRAY_EXT

public static final int GL_VARIANT_ARRAY_EXT

See Also:
    Constant Field Values

GL_VARIANT_ARRAY_POINTER_EXT

public static final int GL_VARIANT_ARRAY_POINTER_EXT

See Also:
    Constant Field Values

GL_INVARIANT_VALUE_EXT

public static final int GL_INVARIANT_VALUE_EXT

See Also:
    Constant Field Values

GL_INVARIANT_DATATYPE_EXT

public static final int GL_INVARIANT_DATATYPE_EXT

See Also:
    Constant Field Values

GL_LOCAL_CONSTANT_VALUE_EXT

public static final int GL_LOCAL_CONSTANT_VALUE_EXT

See Also:
    Constant Field Values

GL_LOCAL_CONSTANT_DATATYPE_EXT

public static final int GL_LOCAL_CONSTANT_DATATYPE_EXT

See Also:
    Constant Field Values

GL_TEXTURE_RECTANGLE_EXT

public static final int GL_TEXTURE_RECTANGLE_EXT

See Also:
    Constant Field Values

GL_TEXTURE_BINDING_RECTANGLE_EXT

public static final int GL_TEXTURE_BINDING_RECTANGLE_EXT

See Also:
    Constant Field Values

GL_PROXY_TEXTURE_RECTANGLE_EXT

public static final int GL_PROXY_TEXTURE_RECTANGLE_EXT

See Also:
    Constant Field Values

GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT

public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT

See Also:
    Constant Field Values

GL_MAX_VERTEX_STREAMS_ATI

public static final int GL_MAX_VERTEX_STREAMS_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM0_ATI

public static final int GL_VERTEX_STREAM0_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM1_ATI

public static final int GL_VERTEX_STREAM1_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM2_ATI

public static final int GL_VERTEX_STREAM2_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM3_ATI

public static final int GL_VERTEX_STREAM3_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM4_ATI

public static final int GL_VERTEX_STREAM4_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM5_ATI

public static final int GL_VERTEX_STREAM5_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM6_ATI

public static final int GL_VERTEX_STREAM6_ATI

See Also:
    Constant Field Values

GL_VERTEX_STREAM7_ATI

public static final int GL_VERTEX_STREAM7_ATI

See Also:
    Constant Field Values

GL_VERTEX_SOURCE_ATI

public static final int GL_VERTEX_SOURCE_ATI

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_ATI

public static final int GL_ELEMENT_ARRAY_ATI

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_TYPE_ATI

public static final int GL_ELEMENT_ARRAY_TYPE_ATI

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_POINTER_ATI

public static final int GL_ELEMENT_ARRAY_POINTER_ATI

See Also:
    Constant Field Values

GL_QUAD_MESH_SUN

public static final int GL_QUAD_MESH_SUN

See Also:
    Constant Field Values

GL_TRIANGLE_MESH_SUN

public static final int GL_TRIANGLE_MESH_SUN

See Also:
    Constant Field Values

GL_SLICE_ACCUM_SUN

public static final int GL_SLICE_ACCUM_SUN

See Also:
    Constant Field Values

GL_MULTISAMPLE_FILTER_HINT_NV

public static final int GL_MULTISAMPLE_FILTER_HINT_NV

See Also:
    Constant Field Values

GL_DEPTH_CLAMP_NV

public static final int GL_DEPTH_CLAMP_NV

See Also:
    Constant Field Values

GL_PIXEL_COUNTER_BITS_NV

public static final int GL_PIXEL_COUNTER_BITS_NV

See Also:
    Constant Field Values

GL_CURRENT_OCCLUSION_QUERY_ID_NV

public static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV

See Also:
    Constant Field Values

GL_PIXEL_COUNT_NV

public static final int GL_PIXEL_COUNT_NV

See Also:
    Constant Field Values

GL_PIXEL_COUNT_AVAILABLE_NV

public static final int GL_PIXEL_COUNT_AVAILABLE_NV

See Also:
    Constant Field Values

GL_POINT_SPRITE_NV

public static final int GL_POINT_SPRITE_NV

See Also:
    Constant Field Values

GL_COORD_REPLACE_NV

public static final int GL_COORD_REPLACE_NV

See Also:
    Constant Field Values

GL_POINT_SPRITE_R_MODE_NV

public static final int GL_POINT_SPRITE_R_MODE_NV

See Also:
    Constant Field Values

GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV

public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV

public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV

See Also:
    Constant Field Values

GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV

public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV

public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV

See Also:
    Constant Field Values

GL_OFFSET_HILO_TEXTURE_2D_NV

public static final int GL_OFFSET_HILO_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV

public static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV

public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV

public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV

See Also:
    Constant Field Values

GL_DEPENDENT_HILO_TEXTURE_2D_NV

public static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV

See Also:
    Constant Field Values

GL_DEPENDENT_RGB_TEXTURE_3D_NV

public static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV

See Also:
    Constant Field Values

GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV

public static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_PASS_THROUGH_NV

public static final int GL_DOT_PRODUCT_PASS_THROUGH_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_TEXTURE_1D_NV

public static final int GL_DOT_PRODUCT_TEXTURE_1D_NV

See Also:
    Constant Field Values

GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV

public static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV

See Also:
    Constant Field Values

GL_HILO8_NV

public static final int GL_HILO8_NV

See Also:
    Constant Field Values

GL_SIGNED_HILO8_NV

public static final int GL_SIGNED_HILO8_NV

See Also:
    Constant Field Values

GL_FORCE_BLUE_TO_ONE_NV

public static final int GL_FORCE_BLUE_TO_ONE_NV

See Also:
    Constant Field Values

GL_STENCIL_TEST_TWO_SIDE_EXT

public static final int GL_STENCIL_TEST_TWO_SIDE_EXT

See Also:
    Constant Field Values

GL_ACTIVE_STENCIL_FACE_EXT

public static final int GL_ACTIVE_STENCIL_FACE_EXT

See Also:
    Constant Field Values

GL_TEXT_FRAGMENT_SHADER_ATI

public static final int GL_TEXT_FRAGMENT_SHADER_ATI

See Also:
    Constant Field Values

GL_UNPACK_CLIENT_STORAGE_APPLE

public static final int GL_UNPACK_CLIENT_STORAGE_APPLE

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_APPLE

public static final int GL_ELEMENT_ARRAY_APPLE

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_TYPE_APPLE

public static final int GL_ELEMENT_ARRAY_TYPE_APPLE

See Also:
    Constant Field Values

GL_ELEMENT_ARRAY_POINTER_APPLE

public static final int GL_ELEMENT_ARRAY_POINTER_APPLE

See Also:
    Constant Field Values

GL_DRAW_PIXELS_APPLE

public static final int GL_DRAW_PIXELS_APPLE

See Also:
    Constant Field Values

GL_FENCE_APPLE

public static final int GL_FENCE_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_BINDING_APPLE

public static final int GL_VERTEX_ARRAY_BINDING_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_APPLE

public static final int GL_VERTEX_ARRAY_RANGE_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE

public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE

See Also:
    Constant Field Values

GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE

public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_RANGE_POINTER_APPLE

public static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ARRAY_STORAGE_HINT_APPLE

public static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE

See Also:
    Constant Field Values

GL_STORAGE_PRIVATE_APPLE

public static final int GL_STORAGE_PRIVATE_APPLE

See Also:
    Constant Field Values

GL_STORAGE_CACHED_APPLE

public static final int GL_STORAGE_CACHED_APPLE

See Also:
    Constant Field Values

GL_STORAGE_SHARED_APPLE

public static final int GL_STORAGE_SHARED_APPLE

See Also:
    Constant Field Values

GL_YCBCR_422_APPLE

public static final int GL_YCBCR_422_APPLE

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_8_8_APPLE

public static final int GL_UNSIGNED_SHORT_8_8_APPLE

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_8_8_REV_APPLE

public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE

See Also:
    Constant Field Values

GL_RGB_S3TC

public static final int GL_RGB_S3TC

See Also:
    Constant Field Values

GL_RGB4_S3TC

public static final int GL_RGB4_S3TC

See Also:
    Constant Field Values

GL_RGBA_S3TC

public static final int GL_RGBA_S3TC

See Also:
    Constant Field Values

GL_RGBA4_S3TC

public static final int GL_RGBA4_S3TC

See Also:
    Constant Field Values

GL_MAX_DRAW_BUFFERS_ATI

public static final int GL_MAX_DRAW_BUFFERS_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER0_ATI

public static final int GL_DRAW_BUFFER0_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER1_ATI

public static final int GL_DRAW_BUFFER1_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER2_ATI

public static final int GL_DRAW_BUFFER2_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER3_ATI

public static final int GL_DRAW_BUFFER3_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER4_ATI

public static final int GL_DRAW_BUFFER4_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER5_ATI

public static final int GL_DRAW_BUFFER5_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER6_ATI

public static final int GL_DRAW_BUFFER6_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER7_ATI

public static final int GL_DRAW_BUFFER7_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER8_ATI

public static final int GL_DRAW_BUFFER8_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER9_ATI

public static final int GL_DRAW_BUFFER9_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER10_ATI

public static final int GL_DRAW_BUFFER10_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER11_ATI

public static final int GL_DRAW_BUFFER11_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER12_ATI

public static final int GL_DRAW_BUFFER12_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER13_ATI

public static final int GL_DRAW_BUFFER13_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER14_ATI

public static final int GL_DRAW_BUFFER14_ATI

See Also:
    Constant Field Values

GL_DRAW_BUFFER15_ATI

public static final int GL_DRAW_BUFFER15_ATI

See Also:
    Constant Field Values

GL_TYPE_RGBA_FLOAT_ATI

public static final int GL_TYPE_RGBA_FLOAT_ATI

See Also:
    Constant Field Values

GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI

public static final int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI

See Also:
    Constant Field Values

GL_MODULATE_ADD_ATI

public static final int GL_MODULATE_ADD_ATI

See Also:
    Constant Field Values

GL_MODULATE_SIGNED_ADD_ATI

public static final int GL_MODULATE_SIGNED_ADD_ATI

See Also:
    Constant Field Values

GL_MODULATE_SUBTRACT_ATI

public static final int GL_MODULATE_SUBTRACT_ATI

See Also:
    Constant Field Values

GL_RGBA_FLOAT32_ATI

public static final int GL_RGBA_FLOAT32_ATI

See Also:
    Constant Field Values

GL_RGB_FLOAT32_ATI

public static final int GL_RGB_FLOAT32_ATI

See Also:
    Constant Field Values

GL_ALPHA_FLOAT32_ATI

public static final int GL_ALPHA_FLOAT32_ATI

See Also:
    Constant Field Values

GL_INTENSITY_FLOAT32_ATI

public static final int GL_INTENSITY_FLOAT32_ATI

See Also:
    Constant Field Values

GL_LUMINANCE_FLOAT32_ATI

public static final int GL_LUMINANCE_FLOAT32_ATI

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA_FLOAT32_ATI

public static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI

See Also:
    Constant Field Values

GL_RGBA_FLOAT16_ATI

public static final int GL_RGBA_FLOAT16_ATI

See Also:
    Constant Field Values

GL_RGB_FLOAT16_ATI

public static final int GL_RGB_FLOAT16_ATI

See Also:
    Constant Field Values

GL_ALPHA_FLOAT16_ATI

public static final int GL_ALPHA_FLOAT16_ATI

See Also:
    Constant Field Values

GL_INTENSITY_FLOAT16_ATI

public static final int GL_INTENSITY_FLOAT16_ATI

See Also:
    Constant Field Values

GL_LUMINANCE_FLOAT16_ATI

public static final int GL_LUMINANCE_FLOAT16_ATI

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA_FLOAT16_ATI

public static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI

See Also:
    Constant Field Values

GL_FLOAT_R_NV

public static final int GL_FLOAT_R_NV

See Also:
    Constant Field Values

GL_FLOAT_RG_NV

public static final int GL_FLOAT_RG_NV

See Also:
    Constant Field Values

GL_FLOAT_RGB_NV

public static final int GL_FLOAT_RGB_NV

See Also:
    Constant Field Values

GL_FLOAT_RGBA_NV

public static final int GL_FLOAT_RGBA_NV

See Also:
    Constant Field Values

GL_FLOAT_R16_NV

public static final int GL_FLOAT_R16_NV

See Also:
    Constant Field Values

GL_FLOAT_R32_NV

public static final int GL_FLOAT_R32_NV

See Also:
    Constant Field Values

GL_FLOAT_RG16_NV

public static final int GL_FLOAT_RG16_NV

See Also:
    Constant Field Values

GL_FLOAT_RG32_NV

public static final int GL_FLOAT_RG32_NV

See Also:
    Constant Field Values

GL_FLOAT_RGB16_NV

public static final int GL_FLOAT_RGB16_NV

See Also:
    Constant Field Values

GL_FLOAT_RGB32_NV

public static final int GL_FLOAT_RGB32_NV

See Also:
    Constant Field Values

GL_FLOAT_RGBA16_NV

public static final int GL_FLOAT_RGBA16_NV

See Also:
    Constant Field Values

GL_FLOAT_RGBA32_NV

public static final int GL_FLOAT_RGBA32_NV

See Also:
    Constant Field Values

GL_TEXTURE_FLOAT_COMPONENTS_NV

public static final int GL_TEXTURE_FLOAT_COMPONENTS_NV

See Also:
    Constant Field Values

GL_FLOAT_CLEAR_COLOR_VALUE_NV

public static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV

See Also:
    Constant Field Values

GL_FLOAT_RGBA_MODE_NV

public static final int GL_FLOAT_RGBA_MODE_NV

See Also:
    Constant Field Values

GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV

public static final int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV

See Also:
    Constant Field Values

GL_FRAGMENT_PROGRAM_NV

public static final int GL_FRAGMENT_PROGRAM_NV

See Also:
    Constant Field Values

GL_MAX_TEXTURE_COORDS_NV

public static final int GL_MAX_TEXTURE_COORDS_NV

See Also:
    Constant Field Values

GL_MAX_TEXTURE_IMAGE_UNITS_NV

public static final int GL_MAX_TEXTURE_IMAGE_UNITS_NV

See Also:
    Constant Field Values

GL_FRAGMENT_PROGRAM_BINDING_NV

public static final int GL_FRAGMENT_PROGRAM_BINDING_NV

See Also:
    Constant Field Values

GL_PROGRAM_ERROR_STRING_NV

public static final int GL_PROGRAM_ERROR_STRING_NV

See Also:
    Constant Field Values

GL_HALF_FLOAT_NV

public static final int GL_HALF_FLOAT_NV

See Also:
    Constant Field Values

GL_WRITE_PIXEL_DATA_RANGE_NV

public static final int GL_WRITE_PIXEL_DATA_RANGE_NV

See Also:
    Constant Field Values

GL_READ_PIXEL_DATA_RANGE_NV

public static final int GL_READ_PIXEL_DATA_RANGE_NV

See Also:
    Constant Field Values

GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV

public static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV

See Also:
    Constant Field Values

GL_READ_PIXEL_DATA_RANGE_LENGTH_NV

public static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV

See Also:
    Constant Field Values

GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV

public static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV

See Also:
    Constant Field Values

GL_READ_PIXEL_DATA_RANGE_POINTER_NV

public static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV

See Also:
    Constant Field Values

GL_PRIMITIVE_RESTART_NV

public static final int GL_PRIMITIVE_RESTART_NV

See Also:
    Constant Field Values

GL_PRIMITIVE_RESTART_INDEX_NV

public static final int GL_PRIMITIVE_RESTART_INDEX_NV

See Also:
    Constant Field Values

GL_TEXTURE_UNSIGNED_REMAP_MODE_NV

public static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV

See Also:
    Constant Field Values

GL_STENCIL_BACK_FUNC_ATI

public static final int GL_STENCIL_BACK_FUNC_ATI

See Also:
    Constant Field Values

GL_STENCIL_BACK_FAIL_ATI

public static final int GL_STENCIL_BACK_FAIL_ATI

See Also:
    Constant Field Values

GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI

public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI

See Also:
    Constant Field Values

GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI

public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI

See Also:
    Constant Field Values

GL_IMPLEMENTATION_COLOR_READ_TYPE_OES

public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES

See Also:
    Constant Field Values

GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES

public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES

See Also:
    Constant Field Values

GL_DEPTH_BOUNDS_TEST_EXT

public static final int GL_DEPTH_BOUNDS_TEST_EXT

See Also:
    Constant Field Values

GL_DEPTH_BOUNDS_EXT

public static final int GL_DEPTH_BOUNDS_EXT

See Also:
    Constant Field Values

GL_MIRROR_CLAMP_EXT

public static final int GL_MIRROR_CLAMP_EXT

See Also:
    Constant Field Values

GL_MIRROR_CLAMP_TO_EDGE_EXT

public static final int GL_MIRROR_CLAMP_TO_EDGE_EXT

See Also:
    Constant Field Values

GL_MIRROR_CLAMP_TO_BORDER_EXT

public static final int GL_MIRROR_CLAMP_TO_BORDER_EXT

See Also:
    Constant Field Values

GL_BLEND_EQUATION_RGB_EXT

public static final int GL_BLEND_EQUATION_RGB_EXT

See Also:
    Constant Field Values

GL_BLEND_EQUATION_ALPHA_EXT

public static final int GL_BLEND_EQUATION_ALPHA_EXT

See Also:
    Constant Field Values

GL_PACK_INVERT_MESA

public static final int GL_PACK_INVERT_MESA

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_8_8_MESA

public static final int GL_UNSIGNED_SHORT_8_8_MESA

See Also:
    Constant Field Values

GL_UNSIGNED_SHORT_8_8_REV_MESA

public static final int GL_UNSIGNED_SHORT_8_8_REV_MESA

See Also:
    Constant Field Values

GL_YCBCR_MESA

public static final int GL_YCBCR_MESA

See Also:
    Constant Field Values

GL_PIXEL_PACK_BUFFER_EXT

public static final int GL_PIXEL_PACK_BUFFER_EXT

See Also:
    Constant Field Values

GL_PIXEL_UNPACK_BUFFER_EXT

public static final int GL_PIXEL_UNPACK_BUFFER_EXT

See Also:
    Constant Field Values

GL_PIXEL_PACK_BUFFER_BINDING_EXT

public static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT

See Also:
    Constant Field Values

GL_PIXEL_UNPACK_BUFFER_BINDING_EXT

public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT

See Also:
    Constant Field Values

GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV

public static final int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV

See Also:
    Constant Field Values

GL_MAX_PROGRAM_CALL_DEPTH_NV

public static final int GL_MAX_PROGRAM_CALL_DEPTH_NV

See Also:
    Constant Field Values

GL_MAX_PROGRAM_IF_DEPTH_NV

public static final int GL_MAX_PROGRAM_IF_DEPTH_NV

See Also:
    Constant Field Values

GL_MAX_PROGRAM_LOOP_DEPTH_NV

public static final int GL_MAX_PROGRAM_LOOP_DEPTH_NV

See Also:
    Constant Field Values

GL_MAX_PROGRAM_LOOP_COUNT_NV

public static final int GL_MAX_PROGRAM_LOOP_COUNT_NV

See Also:
    Constant Field Values

GL_INVALID_FRAMEBUFFER_OPERATION_EXT

public static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT

See Also:
    Constant Field Values

GL_MAX_RENDERBUFFER_SIZE_EXT

public static final int GL_MAX_RENDERBUFFER_SIZE_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_BINDING_EXT

public static final int GL_FRAMEBUFFER_BINDING_EXT

See Also:
    Constant Field Values

GL_RENDERBUFFER_BINDING_EXT

public static final int GL_RENDERBUFFER_BINDING_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT

public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT

public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT

public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT

public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT

public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_COMPLETE_EXT

public static final int GL_FRAMEBUFFER_COMPLETE_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTS_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTS_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT

public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_UNSUPPORTED_EXT

public static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_STATUS_ERROR_EXT

public static final int GL_FRAMEBUFFER_STATUS_ERROR_EXT

See Also:
    Constant Field Values

GL_MAX_COLOR_ATTACHMENTS_EXT

public static final int GL_MAX_COLOR_ATTACHMENTS_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT0_EXT

public static final int GL_COLOR_ATTACHMENT0_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT1_EXT

public static final int GL_COLOR_ATTACHMENT1_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT2_EXT

public static final int GL_COLOR_ATTACHMENT2_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT3_EXT

public static final int GL_COLOR_ATTACHMENT3_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT4_EXT

public static final int GL_COLOR_ATTACHMENT4_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT5_EXT

public static final int GL_COLOR_ATTACHMENT5_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT6_EXT

public static final int GL_COLOR_ATTACHMENT6_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT7_EXT

public static final int GL_COLOR_ATTACHMENT7_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT8_EXT

public static final int GL_COLOR_ATTACHMENT8_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT9_EXT

public static final int GL_COLOR_ATTACHMENT9_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT10_EXT

public static final int GL_COLOR_ATTACHMENT10_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT11_EXT

public static final int GL_COLOR_ATTACHMENT11_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT12_EXT

public static final int GL_COLOR_ATTACHMENT12_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT13_EXT

public static final int GL_COLOR_ATTACHMENT13_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT14_EXT

public static final int GL_COLOR_ATTACHMENT14_EXT

See Also:
    Constant Field Values

GL_COLOR_ATTACHMENT15_EXT

public static final int GL_COLOR_ATTACHMENT15_EXT

See Also:
    Constant Field Values

GL_DEPTH_ATTACHMENT_EXT

public static final int GL_DEPTH_ATTACHMENT_EXT

See Also:
    Constant Field Values

GL_STENCIL_ATTACHMENT_EXT

public static final int GL_STENCIL_ATTACHMENT_EXT

See Also:
    Constant Field Values

GL_FRAMEBUFFER_EXT

public static final int GL_FRAMEBUFFER_EXT

See Also:
    Constant Field Values

GL_RENDERBUFFER_EXT

public static final int GL_RENDERBUFFER_EXT

See Also:
    Constant Field Values

GL_RENDERBUFFER_WIDTH_EXT

public static final int GL_RENDERBUFFER_WIDTH_EXT

See Also:
    Constant Field Values

GL_RENDERBUFFER_HEIGHT_EXT

public static final int GL_RENDERBUFFER_HEIGHT_EXT

See Also:
    Constant Field Values

GL_RENDERBUFFER_INTERNAL_FORMAT_EXT

public static final int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT

See Also:
    Constant Field Values

GL_STENCIL_INDEX_EXT

public static final int GL_STENCIL_INDEX_EXT

See Also:
    Constant Field Values

GL_STENCIL_INDEX1_EXT

public static final int GL_STENCIL_INDEX1_EXT

See Also:
    Constant Field Values

GL_STENCIL_INDEX4_EXT

public static final int GL_STENCIL_INDEX4_EXT

See Also:
    Constant Field Values

GL_STENCIL_INDEX8_EXT

public static final int GL_STENCIL_INDEX8_EXT

See Also:
    Constant Field Values

GL_STENCIL_INDEX16_EXT

public static final int GL_STENCIL_INDEX16_EXT

See Also:
    Constant Field Values

GL_OES_read_format

public static final int GL_OES_read_format

See Also:
    Constant Field Values

GL_GREMEDY_string_marker

public static final int GL_GREMEDY_string_marker

See Also:
    Constant Field Values

GL_KTX_FRONT_REGION

public static final int GL_KTX_FRONT_REGION

See Also:
    Constant Field Values

GL_KTX_BACK_REGION

public static final int GL_KTX_BACK_REGION

See Also:
    Constant Field Values

GL_KTX_Z_REGION

public static final int GL_KTX_Z_REGION

See Also:
    Constant Field Values

GL_KTX_STENCIL_REGION

public static final int GL_KTX_STENCIL_REGION

See Also:
    Constant Field Values

GL_TEXTURE_RANGE_LENGTH_APPLE

public static final int GL_TEXTURE_RANGE_LENGTH_APPLE

See Also:
    Constant Field Values

GL_TEXTURE_RANGE_POINTER_APPLE

public static final int GL_TEXTURE_RANGE_POINTER_APPLE

See Also:
    Constant Field Values

GL_TEXTURE_STORAGE_HINT_APPLE

public static final int GL_TEXTURE_STORAGE_HINT_APPLE

See Also:
    Constant Field Values

GL_TEXTURE_MINIMIZE_STORAGE_APPLE

public static final int GL_TEXTURE_MINIMIZE_STORAGE_APPLE

See Also:
    Constant Field Values

GL_HALF_APPLE

public static final int GL_HALF_APPLE

See Also:
    Constant Field Values

GL_COLOR_FLOAT_APPLE

public static final int GL_COLOR_FLOAT_APPLE

See Also:
    Constant Field Values

GL_RGBA_FLOAT32_APPLE

public static final int GL_RGBA_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_RGB_FLOAT32_APPLE

public static final int GL_RGB_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_ALPHA_FLOAT32_APPLE

public static final int GL_ALPHA_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_INTENSITY_FLOAT32_APPLE

public static final int GL_INTENSITY_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_LUMINANCE_FLOAT32_APPLE

public static final int GL_LUMINANCE_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA_FLOAT32_APPLE

public static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE

See Also:
    Constant Field Values

GL_RGBA_FLOAT16_APPLE

public static final int GL_RGBA_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_RGB_FLOAT16_APPLE

public static final int GL_RGB_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_ALPHA_FLOAT16_APPLE

public static final int GL_ALPHA_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_INTENSITY_FLOAT16_APPLE

public static final int GL_INTENSITY_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_LUMINANCE_FLOAT16_APPLE

public static final int GL_LUMINANCE_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_LUMINANCE_ALPHA_FLOAT16_APPLE

public static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE

See Also:
    Constant Field Values

GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE

public static final int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP1_APPLE

public static final int GL_VERTEX_ATTRIB_MAP1_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP2_APPLE

public static final int GL_VERTEX_ATTRIB_MAP2_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE

public static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE

public static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE

public static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE

public static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE

public static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE

public static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE

public static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE

See Also:
    Constant Field Values

GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE

public static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE

See Also:
    Constant Field Values

Method Detail
glAccum

public void glAccum(int op,
                    float value)

    Interface to C language function:
    void glAccum(GLenum op, GLfloat value);

glActiveStencilFaceEXT

public void glActiveStencilFaceEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glActiveStencilFaceEXT(GLenum mode);

glActiveTexture

public void glActiveTexture(int mode)

    Entry point (through function pointer) to C language function:
    void glActiveTexture(GLenum mode);

glAlphaFragmentOp1ATI

public void glAlphaFragmentOp1ATI(int stage,
                                  int portion,
                                  int variable,
                                  int input,
                                  int mapping,
                                  int componentUsage)

    Entry point (through function pointer) to C language function:
    void glAlphaFragmentOp1ATI(GLenum stage, GLuint portion, GLuint variable, GLuint input, GLuint mapping, GLuint componentUsage);

glAlphaFragmentOp2ATI

public void glAlphaFragmentOp2ATI(int op,
                                  int dst,
                                  int dstMod,
                                  int arg1,
                                  int arg1Rep,
                                  int arg1Mod,
                                  int arg2,
                                  int arg2Rep,
                                  int arg2Mod)

    Entry point (through function pointer) to C language function:
    void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);

glAlphaFragmentOp3ATI

public void glAlphaFragmentOp3ATI(int op,
                                  int dst,
                                  int dstMod,
                                  int arg1,
                                  int arg1Rep,
                                  int arg1Mod,
                                  int arg2,
                                  int arg2Rep,
                                  int arg2Mod,
                                  int arg3,
                                  int arg3Rep,
                                  int arg3Mod)

    Entry point (through function pointer) to C language function:
    void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);

glAlphaFunc

public void glAlphaFunc(int func,
                        float ref)

    Interface to C language function:
    void glAlphaFunc(GLenum func, GLclampf ref);

glApplyTextureEXT

public void glApplyTextureEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glApplyTextureEXT(GLenum mode);

glAreProgramsResidentNV

public boolean glAreProgramsResidentNV(int n,
                                       IntBuffer textures,
                                       ByteBuffer residences)

    Entry point (through function pointer) to C language function:
    GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint * textures, GLboolean * residences);

glAreProgramsResidentNV

public boolean glAreProgramsResidentNV(int n,
                                       int[] textures,
                                       int textures_offset,
                                       byte[] residences,
                                       int residences_offset)

    Entry point (through function pointer) to C language function:
    GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint * textures, GLboolean * residences);

glAreTexturesResident

public boolean glAreTexturesResident(int n,
                                     IntBuffer textures,
                                     ByteBuffer residences)

    Interface to C language function:
    GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences);

glAreTexturesResident

public boolean glAreTexturesResident(int n,
                                     int[] textures,
                                     int textures_offset,
                                     byte[] residences,
                                     int residences_offset)

    Interface to C language function:
    GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences);

glArrayElement

public void glArrayElement(int i)

    Interface to C language function:
    void glArrayElement(GLint i);

glArrayObjectATI

public void glArrayObjectATI(int array,
                             int size,
                             int type,
                             int stride,
                             int buffer,
                             int offset)

    Entry point (through function pointer) to C language function:
    void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);

glAsyncMarkerSGIX

public void glAsyncMarkerSGIX(int mode)

    Entry point (through function pointer) to C language function:
    void glAsyncMarkerSGIX(GLuint mode);

glAttachObjectARB

public void glAttachObjectARB(int target,
                              int id)

    Entry point (through function pointer) to C language function:
    void glAttachObjectARB(GLhandleARB target, GLhandleARB id);

glAttachShader

public void glAttachShader(int target,
                           int id)

    Entry point (through function pointer) to C language function:
    void glAttachShader(GLuint target, GLuint id);

glBegin

public void glBegin(int mode)

    Interface to C language function:
    void glBegin(GLenum mode);

glBeginFragmentShaderATI

public void glBeginFragmentShaderATI()

    Entry point (through function pointer) to C language function:
    void glBeginFragmentShaderATI(void);

glBeginOcclusionQueryNV

public void glBeginOcclusionQueryNV(int mode)

    Entry point (through function pointer) to C language function:
    void glBeginOcclusionQueryNV(GLuint mode);

glBeginQuery

public void glBeginQuery(int target,
                         int id)

    Entry point (through function pointer) to C language function:
    void glBeginQuery(GLenum target, GLuint id);

glBeginQueryARB

public void glBeginQueryARB(int target,
                            int id)

    Entry point (through function pointer) to C language function:
    void glBeginQueryARB(GLenum target, GLuint id);

glBeginVertexShaderEXT

public void glBeginVertexShaderEXT()

    Entry point (through function pointer) to C language function:
    void glBeginVertexShaderEXT(void);

glBindAttribLocation

public void glBindAttribLocation(int program,
                                 int index,
                                 String name)

    Entry point (through function pointer) to C language function:
    void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name);

glBindAttribLocationARB

public void glBindAttribLocationARB(int program,
                                    int index,
                                    String name)

    Entry point (through function pointer) to C language function:
    void glBindAttribLocationARB(GLhandleARB program, GLuint index, const GLcharARB * name);

glBindBuffer

public void glBindBuffer(int target,
                         int id)

    Entry point (through function pointer) to C language function:
    void glBindBuffer(GLenum target, GLuint id);

glBindBufferARB

public void glBindBufferARB(int target,
                            int id)

    Entry point (through function pointer) to C language function:
    void glBindBufferARB(GLenum target, GLuint id);

glBindFragmentShaderATI

public void glBindFragmentShaderATI(int mode)

    Entry point (through function pointer) to C language function:
    void glBindFragmentShaderATI(GLuint mode);

glBindFramebufferEXT

public void glBindFramebufferEXT(int target,
                                 int id)

    Entry point (through function pointer) to C language function:
    void glBindFramebufferEXT(GLenum target, GLuint id);

glBindLightParameterEXT

public int glBindLightParameterEXT(int light,
                                   int value)

    Entry point (through function pointer) to C language function:
    GLuint glBindLightParameterEXT(GLenum light, GLenum value);

glBindMaterialParameterEXT

public int glBindMaterialParameterEXT(int light,
                                      int value)

    Entry point (through function pointer) to C language function:
    GLuint glBindMaterialParameterEXT(GLenum light, GLenum value);

glBindParameterEXT

public int glBindParameterEXT(int type)

    Entry point (through function pointer) to C language function:
    GLuint glBindParameterEXT(GLenum type);

glBindProgramARB

public void glBindProgramARB(int target,
                             int id)

    Entry point (through function pointer) to C language function:
    void glBindProgramARB(GLenum target, GLuint id);

glBindProgramNV

public void glBindProgramNV(int target,
                            int id)

    Entry point (through function pointer) to C language function:
    void glBindProgramNV(GLenum target, GLuint id);

glBindRenderbufferEXT

public void glBindRenderbufferEXT(int target,
                                  int id)

    Entry point (through function pointer) to C language function:
    void glBindRenderbufferEXT(GLenum target, GLuint id);

glBindTexGenParameterEXT

public int glBindTexGenParameterEXT(int unit,
                                    int coord,
                                    int value)

    Entry point (through function pointer) to C language function:
    GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);

glBindTexture

public void glBindTexture(int target,
                          int texture)

    Interface to C language function:
    void glBindTexture(GLenum target, GLuint texture);

glBindTextureUnitParameterEXT

public int glBindTextureUnitParameterEXT(int light,
                                         int value)

    Entry point (through function pointer) to C language function:
    GLuint glBindTextureUnitParameterEXT(GLenum light, GLenum value);

glBindVertexArrayAPPLE

public void glBindVertexArrayAPPLE(int mode)

    Entry point (through function pointer) to C language function:
    void glBindVertexArrayAPPLE(GLuint mode);

glBindVertexShaderEXT

public void glBindVertexShaderEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glBindVertexShaderEXT(GLuint mode);

glBitmap

public void glBitmap(int width,
                     int height,
                     float xorig,
                     float yorig,
                     float xmove,
                     float ymove,
                     ByteBuffer bitmap)

    Interface to C language function:
    void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);

glBitmap

public void glBitmap(int width,
                     int height,
                     float xorig,
                     float yorig,
                     float xmove,
                     float ymove,
                     byte[] bitmap,
                     int bitmap_offset)

    Interface to C language function:
    void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);

glBitmap

public void glBitmap(int width,
                     int height,
                     float xorig,
                     float yorig,
                     float xmove,
                     float ymove,
                     long bitmap_buffer_offset)

    Interface to C language function:
    void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);

glBlendColor

public void glBlendColor(float red,
                         float green,
                         float blue,
                         float alpha)

    Entry point (through function pointer) to C language function:
    void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

glBlendEquation

public void glBlendEquation(int mode)

    Entry point (through function pointer) to C language function:
    void glBlendEquation(GLenum mode);

glBlendEquationSeparate

public void glBlendEquationSeparate(int target,
                                    int id)

    Entry point (through function pointer) to C language function:
    void glBlendEquationSeparate(GLenum target, GLenum id);

glBlendEquationSeparateEXT

public void glBlendEquationSeparateEXT(int target,
                                       int id)

    Entry point (through function pointer) to C language function:
    void glBlendEquationSeparateEXT(GLenum target, GLenum id);

glBlendFunc

public void glBlendFunc(int sfactor,
                        int dfactor)

    Interface to C language function:
    void glBlendFunc(GLenum sfactor, GLenum dfactor);

glBlendFuncSeparate

public void glBlendFuncSeparate(int sfactorRGB,
                                int dfactorRGB,
                                int sfactorAlpha,
                                int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glBlendFuncSeparateEXT

public void glBlendFuncSeparateEXT(int sfactorRGB,
                                   int dfactorRGB,
                                   int sfactorAlpha,
                                   int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glBlendFuncSeparateINGR

public void glBlendFuncSeparateINGR(int sfactorRGB,
                                    int dfactorRGB,
                                    int sfactorAlpha,
                                    int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glBufferData

public void glBufferData(int target,
                         int size,
                         Buffer data,
                         int usage)

    Entry point (through function pointer) to C language function:
    void glBufferData(GLenum target, ptrdiff_t size, const GLvoid * data, GLenum usage);

glBufferDataARB

public void glBufferDataARB(int target,
                            int size,
                            Buffer data,
                            int usage)

    Entry point (through function pointer) to C language function:
    void glBufferDataARB(GLenum target, ptrdiff_t size, const GLvoid * data, GLenum usage);

glBufferRegionEnabled

public int glBufferRegionEnabled()

    Entry point (through function pointer) to C language function:
    GLuint glBufferRegionEnabled(GLvoid);

glBufferSubData

public void glBufferSubData(int target,
                            int offset,
                            int size,
                            Buffer data)

    Entry point (through function pointer) to C language function:
    void glBufferSubData(GLenum target, ptrdiff_t offset, ptrdiff_t size, const GLvoid * data);

glBufferSubDataARB

public void glBufferSubDataARB(int target,
                               int offset,
                               int size,
                               Buffer data)

    Entry point (through function pointer) to C language function:
    void glBufferSubDataARB(GLenum target, ptrdiff_t offset, ptrdiff_t size, const GLvoid * data);

glCallList

public void glCallList(int list)

    Interface to C language function:
    void glCallList(GLuint list);

glCallLists

public void glCallLists(int n,
                        int type,
                        Buffer lists)

    Interface to C language function:
    void glCallLists(GLsizei n, GLenum type, const GLvoid * lists);

glCheckFramebufferStatusEXT

public int glCheckFramebufferStatusEXT(int type)

    Entry point (through function pointer) to C language function:
    GLenum glCheckFramebufferStatusEXT(GLenum type);

glClampColorARB

public void glClampColorARB(int target,
                            int id)

    Entry point (through function pointer) to C language function:
    void glClampColorARB(GLenum target, GLenum id);

glClear

public void glClear(int mask)

    Interface to C language function:
    void glClear(GLbitfield mask);

glClearAccum

public void glClearAccum(float red,
                         float green,
                         float blue,
                         float alpha)

    Interface to C language function:
    void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

glClearColor

public void glClearColor(float red,
                         float green,
                         float blue,
                         float alpha)

    Interface to C language function:
    void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

glClearDepth

public void glClearDepth(double depth)

    Interface to C language function:
    void glClearDepth(GLclampd depth);

glClearIndex

public void glClearIndex(float c)

    Interface to C language function:
    void glClearIndex(GLfloat c);

glClearStencil

public void glClearStencil(int s)

    Interface to C language function:
    void glClearStencil(GLint s);

glClientActiveTexture

public void glClientActiveTexture(int mode)

    Entry point (through function pointer) to C language function:
    void glClientActiveTexture(GLenum mode);

glClientActiveVertexStreamATI

public void glClientActiveVertexStreamATI(int mode)

    Entry point (through function pointer) to C language function:
    void glClientActiveVertexStreamATI(GLenum mode);

glClipPlane

public void glClipPlane(int plane,
                        DoubleBuffer equation)

    Interface to C language function:
    void glClipPlane(GLenum plane, const GLdouble * equation);

glClipPlane

public void glClipPlane(int plane,
                        double[] equation,
                        int equation_offset)

    Interface to C language function:
    void glClipPlane(GLenum plane, const GLdouble * equation);

glColor3b

public void glColor3b(byte red,
                      byte green,
                      byte blue)

    Interface to C language function:
    void glColor3b(GLbyte red, GLbyte green, GLbyte blue);

glColor3bv

public void glColor3bv(ByteBuffer v)

    Interface to C language function:
    void glColor3bv(const GLbyte * v);

glColor3bv

public void glColor3bv(byte[] v,
                       int v_offset)

    Interface to C language function:
    void glColor3bv(const GLbyte * v);

glColor3d

public void glColor3d(double red,
                      double green,
                      double blue)

    Interface to C language function:
    void glColor3d(GLdouble red, GLdouble green, GLdouble blue);

glColor3dv

public void glColor3dv(DoubleBuffer v)

    Interface to C language function:
    void glColor3dv(const GLdouble * v);

glColor3dv

public void glColor3dv(double[] v,
                       int v_offset)

    Interface to C language function:
    void glColor3dv(const GLdouble * v);

glColor3f

public void glColor3f(float red,
                      float green,
                      float blue)

    Interface to C language function:
    void glColor3f(GLfloat red, GLfloat green, GLfloat blue);

glColor3fVertex3fSUN

public void glColor3fVertex3fSUN(float r,
                                 float g,
                                 float b,
                                 float x,
                                 float y,
                                 float z)

    Entry point (through function pointer) to C language function:
    void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

glColor3fVertex3fvSUN

public void glColor3fVertex3fvSUN(FloatBuffer c,
                                  FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glColor3fVertex3fvSUN

public void glColor3fVertex3fvSUN(float[] c,
                                  int c_offset,
                                  float[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glColor3fv

public void glColor3fv(FloatBuffer v)

    Interface to C language function:
    void glColor3fv(const GLfloat * v);

glColor3fv

public void glColor3fv(float[] v,
                       int v_offset)

    Interface to C language function:
    void glColor3fv(const GLfloat * v);

glColor3hNV

public void glColor3hNV(short red,
                        short green,
                        short blue)

    Entry point (through function pointer) to C language function:
    void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

glColor3hvNV

public void glColor3hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor3hvNV(const GLhalfNV * v);

glColor3hvNV

public void glColor3hvNV(short[] v,
                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor3hvNV(const GLhalfNV * v);

glColor3i

public void glColor3i(int red,
                      int green,
                      int blue)

    Interface to C language function:
    void glColor3i(GLint red, GLint green, GLint blue);

glColor3iv

public void glColor3iv(IntBuffer v)

    Interface to C language function:
    void glColor3iv(const GLint * v);

glColor3iv

public void glColor3iv(int[] v,
                       int v_offset)

    Interface to C language function:
    void glColor3iv(const GLint * v);

glColor3s

public void glColor3s(short red,
                      short green,
                      short blue)

    Interface to C language function:
    void glColor3s(GLshort red, GLshort green, GLshort blue);

glColor3sv

public void glColor3sv(ShortBuffer v)

    Interface to C language function:
    void glColor3sv(const GLshort * v);

glColor3sv

public void glColor3sv(short[] v,
                       int v_offset)

    Interface to C language function:
    void glColor3sv(const GLshort * v);

glColor3ub

public void glColor3ub(byte red,
                       byte green,
                       byte blue)

    Interface to C language function:
    void glColor3ub(GLubyte red, GLubyte green, GLubyte blue);

glColor3ubv

public void glColor3ubv(ByteBuffer v)

    Interface to C language function:
    void glColor3ubv(const GLubyte * v);

glColor3ubv

public void glColor3ubv(byte[] v,
                        int v_offset)

    Interface to C language function:
    void glColor3ubv(const GLubyte * v);

glColor3ui

public void glColor3ui(int red,
                       int green,
                       int blue)

    Interface to C language function:
    void glColor3ui(GLuint red, GLuint green, GLuint blue);

glColor3uiv

public void glColor3uiv(IntBuffer v)

    Interface to C language function:
    void glColor3uiv(const GLuint * v);

glColor3uiv

public void glColor3uiv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glColor3uiv(const GLuint * v);

glColor3us

public void glColor3us(short red,
                       short green,
                       short blue)

    Interface to C language function:
    void glColor3us(GLushort red, GLushort green, GLushort blue);

glColor3usv

public void glColor3usv(ShortBuffer v)

    Interface to C language function:
    void glColor3usv(const GLushort * v);

glColor3usv

public void glColor3usv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glColor3usv(const GLushort * v);

glColor4b

public void glColor4b(byte red,
                      byte green,
                      byte blue,
                      byte alpha)

    Interface to C language function:
    void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);

glColor4bv

public void glColor4bv(ByteBuffer v)

    Interface to C language function:
    void glColor4bv(const GLbyte * v);

glColor4bv

public void glColor4bv(byte[] v,
                       int v_offset)

    Interface to C language function:
    void glColor4bv(const GLbyte * v);

glColor4d

public void glColor4d(double red,
                      double green,
                      double blue,
                      double alpha)

    Interface to C language function:
    void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);

glColor4dv

public void glColor4dv(DoubleBuffer v)

    Interface to C language function:
    void glColor4dv(const GLdouble * v);

glColor4dv

public void glColor4dv(double[] v,
                       int v_offset)

    Interface to C language function:
    void glColor4dv(const GLdouble * v);

glColor4f

public void glColor4f(float red,
                      float green,
                      float blue,
                      float alpha)

    Interface to C language function:
    void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

glColor4fNormal3fVertex3fSUN

public void glColor4fNormal3fVertex3fSUN(float r,
                                         float g,
                                         float b,
                                         float a,
                                         float nx,
                                         float ny,
                                         float nz,
                                         float x,
                                         float y,
                                         float z)

    Entry point (through function pointer) to C language function:
    void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

glColor4fNormal3fVertex3fvSUN

public void glColor4fNormal3fVertex3fvSUN(FloatBuffer c,
                                          FloatBuffer n,
                                          FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glColor4fNormal3fVertex3fvSUN

public void glColor4fNormal3fVertex3fvSUN(float[] c,
                                          int c_offset,
                                          float[] n,
                                          int n_offset,
                                          float[] v,
                                          int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glColor4fv

public void glColor4fv(FloatBuffer v)

    Interface to C language function:
    void glColor4fv(const GLfloat * v);

glColor4fv

public void glColor4fv(float[] v,
                       int v_offset)

    Interface to C language function:
    void glColor4fv(const GLfloat * v);

glColor4hNV

public void glColor4hNV(short x,
                        short y,
                        short z,
                        short w)

    Entry point (through function pointer) to C language function:
    void glColor4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);

glColor4hvNV

public void glColor4hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor4hvNV(const GLhalfNV * v);

glColor4hvNV

public void glColor4hvNV(short[] v,
                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor4hvNV(const GLhalfNV * v);

glColor4i

public void glColor4i(int red,
                      int green,
                      int blue,
                      int alpha)

    Interface to C language function:
    void glColor4i(GLint red, GLint green, GLint blue, GLint alpha);

glColor4iv

public void glColor4iv(IntBuffer v)

    Interface to C language function:
    void glColor4iv(const GLint * v);

glColor4iv

public void glColor4iv(int[] v,
                       int v_offset)

    Interface to C language function:
    void glColor4iv(const GLint * v);

glColor4s

public void glColor4s(short red,
                      short green,
                      short blue,
                      short alpha)

    Interface to C language function:
    void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);

glColor4sv

public void glColor4sv(ShortBuffer v)

    Interface to C language function:
    void glColor4sv(const GLshort * v);

glColor4sv

public void glColor4sv(short[] v,
                       int v_offset)

    Interface to C language function:
    void glColor4sv(const GLshort * v);

glColor4ub

public void glColor4ub(byte red,
                       byte green,
                       byte blue,
                       byte alpha)

    Interface to C language function:
    void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);

glColor4ubVertex2fSUN

public void glColor4ubVertex2fSUN(byte r,
                                  byte g,
                                  byte b,
                                  byte a,
                                  float x,
                                  float y)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);

glColor4ubVertex2fvSUN

public void glColor4ubVertex2fvSUN(ByteBuffer c,
                                   FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v);

glColor4ubVertex2fvSUN

public void glColor4ubVertex2fvSUN(byte[] c,
                                   int c_offset,
                                   float[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v);

glColor4ubVertex3fSUN

public void glColor4ubVertex3fSUN(byte r,
                                  byte g,
                                  byte b,
                                  byte a,
                                  float x,
                                  float y,
                                  float z)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

glColor4ubVertex3fvSUN

public void glColor4ubVertex3fvSUN(ByteBuffer c,
                                   FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v);

glColor4ubVertex3fvSUN

public void glColor4ubVertex3fvSUN(byte[] c,
                                   int c_offset,
                                   float[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v);

glColor4ubv

public void glColor4ubv(ByteBuffer v)

    Interface to C language function:
    void glColor4ubv(const GLubyte * v);

glColor4ubv

public void glColor4ubv(byte[] v,
                        int v_offset)

    Interface to C language function:
    void glColor4ubv(const GLubyte * v);

glColor4ui

public void glColor4ui(int red,
                       int green,
                       int blue,
                       int alpha)

    Interface to C language function:
    void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);

glColor4uiv

public void glColor4uiv(IntBuffer v)

    Interface to C language function:
    void glColor4uiv(const GLuint * v);

glColor4uiv

public void glColor4uiv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glColor4uiv(const GLuint * v);

glColor4us

public void glColor4us(short red,
                       short green,
                       short blue,
                       short alpha)

    Interface to C language function:
    void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);

glColor4usv

public void glColor4usv(ShortBuffer v)

    Interface to C language function:
    void glColor4usv(const GLushort * v);

glColor4usv

public void glColor4usv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glColor4usv(const GLushort * v);

glColorFragmentOp1ATI

public void glColorFragmentOp1ATI(int op,
                                  int dst,
                                  int dstMask,
                                  int dstMod,
                                  int arg1,
                                  int arg1Rep,
                                  int arg1Mod)

    Entry point (through function pointer) to C language function:
    void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);

glColorFragmentOp2ATI

public void glColorFragmentOp2ATI(int op,
                                  int dst,
                                  int dstMask,
                                  int dstMod,
                                  int arg1,
                                  int arg1Rep,
                                  int arg1Mod,
                                  int arg2,
                                  int arg2Rep,
                                  int arg2Mod)

    Entry point (through function pointer) to C language function:
    void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);

glColorFragmentOp3ATI

public void glColorFragmentOp3ATI(int op,
                                  int dst,
                                  int dstMask,
                                  int dstMod,
                                  int arg1,
                                  int arg1Rep,
                                  int arg1Mod,
                                  int arg2,
                                  int arg2Rep,
                                  int arg2Mod,
                                  int arg3,
                                  int arg3Rep,
                                  int arg3Mod)

    Entry point (through function pointer) to C language function:
    void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);

glColorMask

public void glColorMask(boolean red,
                        boolean green,
                        boolean blue,
                        boolean alpha)

    Interface to C language function:
    void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

glColorMaterial

public void glColorMaterial(int face,
                            int mode)

    Interface to C language function:
    void glColorMaterial(GLenum face, GLenum mode);

glColorPointer

public void glColorPointer(int size,
                           int type,
                           int stride,
                           Buffer ptr)

    Interface to C language function:
    void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glColorPointer

public void glColorPointer(int size,
                           int type,
                           int stride,
                           long ptr_buffer_offset)

    Interface to C language function:
    void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

glColorSubTable

public void glColorSubTable(int target,
                            int start,
                            int count,
                            int format,
                            int type,
                            Buffer data)

    Entry point (through function pointer) to C language function:
    void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data);

glColorSubTable

public void glColorSubTable(int target,
                            int start,
                            int count,
                            int format,
                            int type,
                            long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data);

glColorTable

public void glColorTable(int target,
                         int internalformat,
                         int width,
                         int format,
                         int type,
                         Buffer table)

    Entry point (through function pointer) to C language function:
    void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);

glColorTable

public void glColorTable(int target,
                         int internalformat,
                         int width,
                         int format,
                         int type,
                         long table_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);

glColorTableEXT

public void glColorTableEXT(int target,
                            int internalformat,
                            int width,
                            int format,
                            int type,
                            Buffer table)

    Entry point (through function pointer) to C language function:
    void glColorTableEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);

glColorTableParameterfv

public void glColorTableParameterfv(int target,
                                    int pname,
                                    FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glColorTableParameterfv

public void glColorTableParameterfv(int target,
                                    int pname,
                                    float[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glColorTableParameteriv

public void glColorTableParameteriv(int target,
                                    int pname,
                                    IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params);

glColorTableParameteriv

public void glColorTableParameteriv(int target,
                                    int pname,
                                    int[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params);

glCombinerInputNV

public void glCombinerInputNV(int stage,
                              int portion,
                              int variable,
                              int input,
                              int mapping,
                              int componentUsage)

    Entry point (through function pointer) to C language function:
    void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);

glCombinerOutputNV

public void glCombinerOutputNV(int stage,
                               int portion,
                               int abOutput,
                               int cdOutput,
                               int sumOutput,
                               int scale,
                               int bias,
                               boolean abDotProduct,
                               boolean cdDotProduct,
                               boolean muxSum)

    Entry point (through function pointer) to C language function:
    void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);

glCombinerParameterfNV

public void glCombinerParameterfNV(int target,
                                   float s)

    Entry point (through function pointer) to C language function:
    void glCombinerParameterfNV(GLenum target, GLfloat s);

glCombinerParameterfvNV

public void glCombinerParameterfvNV(int target,
                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glCombinerParameterfvNV(GLenum target, const GLfloat * v);

glCombinerParameterfvNV

public void glCombinerParameterfvNV(int target,
                                    float[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glCombinerParameterfvNV(GLenum target, const GLfloat * v);

glCombinerParameteriNV

public void glCombinerParameteriNV(int target,
                                   int s)

    Entry point (through function pointer) to C language function:
    void glCombinerParameteriNV(GLenum target, GLint s);

glCombinerParameterivNV

public void glCombinerParameterivNV(int target,
                                    IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glCombinerParameterivNV(GLenum target, const GLint * v);

glCombinerParameterivNV

public void glCombinerParameterivNV(int target,
                                    int[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glCombinerParameterivNV(GLenum target, const GLint * v);

glCombinerStageParameterfvNV

public void glCombinerStageParameterfvNV(int target,
                                         int pname,
                                         FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glCombinerStageParameterfvNV(GLenum target, GLenum pname, const GLfloat * params);

glCombinerStageParameterfvNV

public void glCombinerStageParameterfvNV(int target,
                                         int pname,
                                         float[] params,
                                         int params_offset)

    Entry point (through function pointer) to C language function:
    void glCombinerStageParameterfvNV(GLenum target, GLenum pname, const GLfloat * params);

glCompileShader

public void glCompileShader(int mode)

    Entry point (through function pointer) to C language function:
    void glCompileShader(GLuint mode);

glCompileShaderARB

public void glCompileShaderARB(int mode)

    Entry point (through function pointer) to C language function:
    void glCompileShaderARB(GLhandleARB mode);

glCompressedTexImage1D

public void glCompressedTexImage1D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int border,
                                   int imageSize,
                                   Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexImage1D

public void glCompressedTexImage1D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int border,
                                   int imageSize,
                                   long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexImage2D

public void glCompressedTexImage2D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int height,
                                   int border,
                                   int imageSize,
                                   Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexImage2D

public void glCompressedTexImage2D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int height,
                                   int border,
                                   int imageSize,
                                   long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexImage3D

public void glCompressedTexImage3D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int height,
                                   int depth,
                                   int border,
                                   int imageSize,
                                   Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexImage3D

public void glCompressedTexImage3D(int target,
                                   int level,
                                   int internalformat,
                                   int width,
                                   int height,
                                   int depth,
                                   int border,
                                   int imageSize,
                                   long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage1D

public void glCompressedTexSubImage1D(int target,
                                      int level,
                                      int xoffset,
                                      int width,
                                      int format,
                                      int imageSize,
                                      Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage1D

public void glCompressedTexSubImage1D(int target,
                                      int level,
                                      int xoffset,
                                      int width,
                                      int format,
                                      int imageSize,
                                      long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage2D

public void glCompressedTexSubImage2D(int target,
                                      int level,
                                      int xoffset,
                                      int yoffset,
                                      int width,
                                      int height,
                                      int format,
                                      int imageSize,
                                      Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage2D

public void glCompressedTexSubImage2D(int target,
                                      int level,
                                      int xoffset,
                                      int yoffset,
                                      int width,
                                      int height,
                                      int format,
                                      int imageSize,
                                      long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage3D

public void glCompressedTexSubImage3D(int target,
                                      int level,
                                      int xoffset,
                                      int yoffset,
                                      int zoffset,
                                      int width,
                                      int height,
                                      int depth,
                                      int format,
                                      int imageSize,
                                      Buffer data)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);

glCompressedTexSubImage3D

public void glCompressedTexSubImage3D(int target,
                                      int level,
                                      int xoffset,
                                      int yoffset,
                                      int zoffset,
                                      int width,
                                      int height,
                                      int depth,
                                      int format,
                                      int imageSize,
                                      long data_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);

glConvolutionFilter1D

public void glConvolutionFilter1D(int target,
                                  int internalformat,
                                  int width,
                                  int format,
                                  int type,
                                  Buffer table)

    Entry point (through function pointer) to C language function:
    void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);

glConvolutionFilter1D

public void glConvolutionFilter1D(int target,
                                  int internalformat,
                                  int width,
                                  int format,
                                  int type,
                                  long table_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);

glConvolutionFilter2D

public void glConvolutionFilter2D(int target,
                                  int internalformat,
                                  int width,
                                  int height,
                                  int format,
                                  int type,
                                  Buffer image)

    Entry point (through function pointer) to C language function:
    void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image);

glConvolutionFilter2D

public void glConvolutionFilter2D(int target,
                                  int internalformat,
                                  int width,
                                  int height,
                                  int format,
                                  int type,
                                  long image_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image);

glConvolutionParameterf

public void glConvolutionParameterf(int target,
                                    int pname,
                                    float params)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);

glConvolutionParameterfv

public void glConvolutionParameterfv(int target,
                                     int pname,
                                     FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glConvolutionParameterfv

public void glConvolutionParameterfv(int target,
                                     int pname,
                                     float[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glConvolutionParameteri

public void glConvolutionParameteri(int target,
                                    int pname,
                                    int params)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameteri(GLenum target, GLenum pname, GLint params);

glConvolutionParameteriv

public void glConvolutionParameteriv(int target,
                                     int pname,
                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params);

glConvolutionParameteriv

public void glConvolutionParameteriv(int target,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params);

glCopyColorSubTable

public void glCopyColorSubTable(int target,
                                int start,
                                int x,
                                int y,
                                int width)

    Entry point (through function pointer) to C language function:
    void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

glCopyColorTable

public void glCopyColorTable(int target,
                             int internalformat,
                             int x,
                             int y,
                             int width)

    Entry point (through function pointer) to C language function:
    void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

glCopyConvolutionFilter1D

public void glCopyConvolutionFilter1D(int target,
                                      int internalformat,
                                      int x,
                                      int y,
                                      int width)

    Entry point (through function pointer) to C language function:
    void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

glCopyConvolutionFilter2D

public void glCopyConvolutionFilter2D(int target,
                                      int internalformat,
                                      int x,
                                      int y,
                                      int width,
                                      int height)

    Entry point (through function pointer) to C language function:
    void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);

glCopyPixels

public void glCopyPixels(int x,
                         int y,
                         int width,
                         int height,
                         int type)

    Interface to C language function:
    void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);

glCopyTexImage1D

public void glCopyTexImage1D(int target,
                             int level,
                             int internalformat,
                             int x,
                             int y,
                             int width,
                             int border)

    Interface to C language function:
    void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);

glCopyTexImage2D

public void glCopyTexImage2D(int target,
                             int level,
                             int internalformat,
                             int x,
                             int y,
                             int width,
                             int height,
                             int border)

    Interface to C language function:
    void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);

glCopyTexSubImage1D

public void glCopyTexSubImage1D(int target,
                                int level,
                                int xoffset,
                                int x,
                                int y,
                                int width)

    Interface to C language function:
    void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);

glCopyTexSubImage2D

public void glCopyTexSubImage2D(int target,
                                int level,
                                int xoffset,
                                int yoffset,
                                int x,
                                int y,
                                int width,
                                int height)

    Interface to C language function:
    void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);

glCopyTexSubImage3D

public void glCopyTexSubImage3D(int target,
                                int level,
                                int xoffset,
                                int yoffset,
                                int zoffset,
                                int x,
                                int y,
                                int width,
                                int height)

    Entry point (through function pointer) to C language function:
    void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

glCreateProgram

public int glCreateProgram()

    Entry point (through function pointer) to C language function:
    GLuint glCreateProgram(void);

glCreateProgramObjectARB

public int glCreateProgramObjectARB()

    Entry point (through function pointer) to C language function:
    GLhandleARB glCreateProgramObjectARB(void);

glCreateShader

public int glCreateShader(int type)

    Entry point (through function pointer) to C language function:
    GLuint glCreateShader(GLenum type);

glCreateShaderObjectARB

public int glCreateShaderObjectARB(int type)

    Entry point (through function pointer) to C language function:
    GLhandleARB glCreateShaderObjectARB(GLenum type);

glCullFace

public void glCullFace(int mode)

    Interface to C language function:
    void glCullFace(GLenum mode);

glCullParameterdvEXT

public void glCullParameterdvEXT(int pname,
                                 DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glCullParameterdvEXT(GLenum pname, GLdouble * params);

glCullParameterdvEXT

public void glCullParameterdvEXT(int pname,
                                 double[] params,
                                 int params_offset)

    Entry point (through function pointer) to C language function:
    void glCullParameterdvEXT(GLenum pname, GLdouble * params);

glCullParameterfvEXT

public void glCullParameterfvEXT(int pname,
                                 FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glCullParameterfvEXT(GLenum pname, GLfloat * params);

glCullParameterfvEXT

public void glCullParameterfvEXT(int pname,
                                 float[] params,
                                 int params_offset)

    Entry point (through function pointer) to C language function:
    void glCullParameterfvEXT(GLenum pname, GLfloat * params);

glCurrentPaletteMatrixARB

public void glCurrentPaletteMatrixARB(int count)

    Entry point (through function pointer) to C language function:
    void glCurrentPaletteMatrixARB(GLint count);

glDeformSGIX

public void glDeformSGIX(int mode)

    Entry point (through function pointer) to C language function:
    void glDeformSGIX(GLbitfield mode);

glDeformationMap3dSGIX

public void glDeformationMap3dSGIX(int target,
                                   double u1,
                                   double u2,
                                   int ustride,
                                   int uorder,
                                   double v1,
                                   double v2,
                                   int vstride,
                                   int vorder,
                                   double w1,
                                   double w2,
                                   int wstride,
                                   int worder,
                                   DoubleBuffer points)

    Entry point (through function pointer) to C language function:
    void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points);

glDeformationMap3dSGIX

public void glDeformationMap3dSGIX(int target,
                                   double u1,
                                   double u2,
                                   int ustride,
                                   int uorder,
                                   double v1,
                                   double v2,
                                   int vstride,
                                   int vorder,
                                   double w1,
                                   double w2,
                                   int wstride,
                                   int worder,
                                   double[] points,
                                   int points_offset)

    Entry point (through function pointer) to C language function:
    void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points);

glDeformationMap3fSGIX

public void glDeformationMap3fSGIX(int target,
                                   float u1,
                                   float u2,
                                   int ustride,
                                   int uorder,
                                   float v1,
                                   float v2,
                                   int vstride,
                                   int vorder,
                                   float w1,
                                   float w2,
                                   int wstride,
                                   int worder,
                                   FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points);

glDeformationMap3fSGIX

public void glDeformationMap3fSGIX(int target,
                                   float u1,
                                   float u2,
                                   int ustride,
                                   int uorder,
                                   float v1,
                                   float v2,
                                   int vstride,
                                   int vorder,
                                   float w1,
                                   float w2,
                                   int wstride,
                                   int worder,
                                   float[] points,
                                   int points_offset)

    Entry point (through function pointer) to C language function:
    void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points);

glDeleteAsyncMarkersSGIX

public void glDeleteAsyncMarkersSGIX(int target,
                                     int s)

    Entry point (through function pointer) to C language function:
    void glDeleteAsyncMarkersSGIX(GLuint target, GLsizei s);

glDeleteBufferRegion

public void glDeleteBufferRegion(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteBufferRegion(GLuint mode);

glDeleteBuffers

public void glDeleteBuffers(int n,
                            IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteBuffers(GLsizei n, const GLuint * ids);

glDeleteBuffers

public void glDeleteBuffers(int n,
                            int[] ids,
                            int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteBuffers(GLsizei n, const GLuint * ids);

glDeleteBuffersARB

public void glDeleteBuffersARB(int n,
                               IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteBuffersARB(GLsizei n, const GLuint * ids);

glDeleteBuffersARB

public void glDeleteBuffersARB(int n,
                               int[] ids,
                               int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteBuffersARB(GLsizei n, const GLuint * ids);

glDeleteFencesAPPLE

public void glDeleteFencesAPPLE(int n,
                                IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteFencesAPPLE(GLsizei n, const GLuint * ids);

glDeleteFencesAPPLE

public void glDeleteFencesAPPLE(int n,
                                int[] ids,
                                int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteFencesAPPLE(GLsizei n, const GLuint * ids);

glDeleteFencesNV

public void glDeleteFencesNV(int n,
                             IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteFencesNV(GLsizei n, const GLuint * ids);

glDeleteFencesNV

public void glDeleteFencesNV(int n,
                             int[] ids,
                             int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteFencesNV(GLsizei n, const GLuint * ids);

glDeleteFragmentShaderATI

public void glDeleteFragmentShaderATI(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteFragmentShaderATI(GLuint mode);

glDeleteFramebuffersEXT

public void glDeleteFramebuffersEXT(int n,
                                    IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteFramebuffersEXT(GLsizei n, const GLuint * ids);

glDeleteFramebuffersEXT

public void glDeleteFramebuffersEXT(int n,
                                    int[] ids,
                                    int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteFramebuffersEXT(GLsizei n, const GLuint * ids);

glDeleteLists

public void glDeleteLists(int list,
                          int range)

    Interface to C language function:
    void glDeleteLists(GLuint list, GLsizei range);

glDeleteObjectARB

public void glDeleteObjectARB(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteObjectARB(GLhandleARB mode);

glDeleteOcclusionQueriesNV

public void glDeleteOcclusionQueriesNV(int n,
                                       IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids);

glDeleteOcclusionQueriesNV

public void glDeleteOcclusionQueriesNV(int n,
                                       int[] ids,
                                       int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids);

glDeleteProgram

public void glDeleteProgram(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteProgram(GLuint mode);

glDeleteProgramsARB

public void glDeleteProgramsARB(int n,
                                IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteProgramsARB(GLsizei n, const GLuint * ids);

glDeleteProgramsARB

public void glDeleteProgramsARB(int n,
                                int[] ids,
                                int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteProgramsARB(GLsizei n, const GLuint * ids);

glDeleteProgramsNV

public void glDeleteProgramsNV(int n,
                               IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteProgramsNV(GLsizei n, const GLuint * ids);

glDeleteProgramsNV

public void glDeleteProgramsNV(int n,
                               int[] ids,
                               int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteProgramsNV(GLsizei n, const GLuint * ids);

glDeleteQueries

public void glDeleteQueries(int n,
                            IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteQueries(GLsizei n, const GLuint * ids);

glDeleteQueries

public void glDeleteQueries(int n,
                            int[] ids,
                            int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteQueries(GLsizei n, const GLuint * ids);

glDeleteQueriesARB

public void glDeleteQueriesARB(int n,
                               IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteQueriesARB(GLsizei n, const GLuint * ids);

glDeleteQueriesARB

public void glDeleteQueriesARB(int n,
                               int[] ids,
                               int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteQueriesARB(GLsizei n, const GLuint * ids);

glDeleteRenderbuffersEXT

public void glDeleteRenderbuffersEXT(int n,
                                     IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteRenderbuffersEXT(GLsizei n, const GLuint * ids);

glDeleteRenderbuffersEXT

public void glDeleteRenderbuffersEXT(int n,
                                     int[] ids,
                                     int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteRenderbuffersEXT(GLsizei n, const GLuint * ids);

glDeleteShader

public void glDeleteShader(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteShader(GLuint mode);

glDeleteTextures

public void glDeleteTextures(int n,
                             IntBuffer textures)

    Interface to C language function:
    void glDeleteTextures(GLsizei n, const GLuint * textures);

glDeleteTextures

public void glDeleteTextures(int n,
                             int[] textures,
                             int textures_offset)

    Interface to C language function:
    void glDeleteTextures(GLsizei n, const GLuint * textures);

glDeleteVertexArraysAPPLE

public void glDeleteVertexArraysAPPLE(int n,
                                      IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * ids);

glDeleteVertexArraysAPPLE

public void glDeleteVertexArraysAPPLE(int n,
                                      int[] ids,
                                      int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * ids);

glDeleteVertexShaderEXT

public void glDeleteVertexShaderEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glDeleteVertexShaderEXT(GLuint mode);

glDepthBoundsEXT

public void glDepthBoundsEXT(double x,
                             double y)

    Entry point (through function pointer) to C language function:
    void glDepthBoundsEXT(GLclampd x, GLclampd y);

glDepthFunc

public void glDepthFunc(int func)

    Interface to C language function:
    void glDepthFunc(GLenum func);

glDepthMask

public void glDepthMask(boolean flag)

    Interface to C language function:
    void glDepthMask(GLboolean flag);

glDepthRange

public void glDepthRange(double near_val,
                         double far_val)

    Interface to C language function:
    void glDepthRange(GLclampd near_val, GLclampd far_val);

glDetachObjectARB

public void glDetachObjectARB(int target,
                              int id)

    Entry point (through function pointer) to C language function:
    void glDetachObjectARB(GLhandleARB target, GLhandleARB id);

glDetachShader

public void glDetachShader(int target,
                           int id)

    Entry point (through function pointer) to C language function:
    void glDetachShader(GLuint target, GLuint id);

glDetailTexFuncSGIS

public void glDetailTexFuncSGIS(int target,
                                int n,
                                FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points);

glDetailTexFuncSGIS

public void glDetailTexFuncSGIS(int target,
                                int n,
                                float[] points,
                                int points_offset)

    Entry point (through function pointer) to C language function:
    void glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points);

glDisable

public void glDisable(int cap)

    Interface to C language function:
    void glDisable(GLenum cap);

glDisableClientState

public void glDisableClientState(int cap)

    Interface to C language function:
    void glDisableClientState(GLenum cap);

glDisableVariantClientStateEXT

public void glDisableVariantClientStateEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glDisableVariantClientStateEXT(GLuint mode);

glDisableVertexAttribAPPLE

public void glDisableVertexAttribAPPLE(int index,
                                       int pname)

    Entry point (through function pointer) to C language function:
    void glDisableVertexAttribAPPLE(GLuint index, GLenum pname);

glDisableVertexAttribArray

public void glDisableVertexAttribArray(int mode)

    Entry point (through function pointer) to C language function:
    void glDisableVertexAttribArray(GLuint mode);

glDisableVertexAttribArrayARB

public void glDisableVertexAttribArrayARB(int mode)

    Entry point (through function pointer) to C language function:
    void glDisableVertexAttribArrayARB(GLuint mode);

glDrawArrays

public void glDrawArrays(int mode,
                         int first,
                         int count)

    Interface to C language function:
    void glDrawArrays(GLenum mode, GLint first, GLsizei count);

glDrawBuffer

public void glDrawBuffer(int mode)

    Interface to C language function:
    void glDrawBuffer(GLenum mode);

glDrawBufferRegion

public void glDrawBufferRegion(int region,
                               int x,
                               int y,
                               int width,
                               int height,
                               int xDest,
                               int yDest)

    Entry point (through function pointer) to C language function:
    void glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);

glDrawBuffers

public void glDrawBuffers(int n,
                          IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDrawBuffers(GLsizei n, const GLenum * ids);

glDrawBuffers

public void glDrawBuffers(int n,
                          int[] ids,
                          int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDrawBuffers(GLsizei n, const GLenum * ids);

glDrawBuffersARB

public void glDrawBuffersARB(int n,
                             IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDrawBuffersARB(GLsizei n, const GLenum * ids);

glDrawBuffersARB

public void glDrawBuffersARB(int n,
                             int[] ids,
                             int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDrawBuffersARB(GLsizei n, const GLenum * ids);

glDrawBuffersATI

public void glDrawBuffersATI(int n,
                             IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glDrawBuffersATI(GLsizei n, const GLenum * ids);

glDrawBuffersATI

public void glDrawBuffersATI(int n,
                             int[] ids,
                             int ids_offset)

    Entry point (through function pointer) to C language function:
    void glDrawBuffersATI(GLsizei n, const GLenum * ids);

glDrawElementArrayAPPLE

public void glDrawElementArrayAPPLE(int target,
                                    int s,
                                    int t)

    Entry point (through function pointer) to C language function:
    void glDrawElementArrayAPPLE(GLenum target, GLint s, GLsizei t);

glDrawElementArrayATI

public void glDrawElementArrayATI(int target,
                                  int s)

    Entry point (through function pointer) to C language function:
    void glDrawElementArrayATI(GLenum target, GLsizei s);

glDrawElements

public void glDrawElements(int mode,
                           int count,
                           int type,
                           Buffer indices)

    Interface to C language function:
    void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);

glDrawElements

public void glDrawElements(int mode,
                           int count,
                           int type,
                           long indices_buffer_offset)

    Interface to C language function:
    void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);

glDrawMeshArraysSUN

public void glDrawMeshArraysSUN(int target,
                                int s,
                                int t,
                                int r)

    Entry point (through function pointer) to C language function:
    void glDrawMeshArraysSUN(GLenum target, GLint s, GLsizei t, GLsizei r);

glDrawPixels

public void glDrawPixels(int width,
                         int height,
                         int format,
                         int type,
                         Buffer pixels)

    Interface to C language function:
    void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);

glDrawPixels

public void glDrawPixels(int width,
                         int height,
                         int format,
                         int type,
                         long pixels_buffer_offset)

    Interface to C language function:
    void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);

glDrawRangeElementArrayAPPLE

public void glDrawRangeElementArrayAPPLE(int mode,
                                         int start,
                                         int end,
                                         int first,
                                         int count)

    Entry point (through function pointer) to C language function:
    void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);

glDrawRangeElementArrayATI

public void glDrawRangeElementArrayATI(int mode,
                                       int start,
                                       int end,
                                       int count)

    Entry point (through function pointer) to C language function:
    void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);

glDrawRangeElements

public void glDrawRangeElements(int mode,
                                int start,
                                int end,
                                int count,
                                int type,
                                Buffer indices)

    Entry point (through function pointer) to C language function:
    void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);

glDrawRangeElements

public void glDrawRangeElements(int mode,
                                int start,
                                int end,
                                int count,
                                int type,
                                long indices_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);

glEdgeFlag

public void glEdgeFlag(boolean flag)

    Interface to C language function:
    void glEdgeFlag(GLboolean flag);

glEdgeFlagPointer

public void glEdgeFlagPointer(int stride,
                              Buffer ptr)

    Interface to C language function:
    void glEdgeFlagPointer(GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glEdgeFlagPointer

public void glEdgeFlagPointer(int stride,
                              long ptr_buffer_offset)

    Interface to C language function:
    void glEdgeFlagPointer(GLsizei stride, const GLvoid * ptr);

glEdgeFlagv

public void glEdgeFlagv(ByteBuffer flag)

    Interface to C language function:
    void glEdgeFlagv(const GLboolean * flag);

glEdgeFlagv

public void glEdgeFlagv(byte[] flag,
                        int flag_offset)

    Interface to C language function:
    void glEdgeFlagv(const GLboolean * flag);

glElementPointerAPPLE

public void glElementPointerAPPLE(int pname,
                                  Buffer params)

    Entry point (through function pointer) to C language function:
    void glElementPointerAPPLE(GLenum pname, const GLvoid * params);

    Parameters:
        params - a direct Buffer

glElementPointerATI

public void glElementPointerATI(int pname,
                                Buffer params)

    Entry point (through function pointer) to C language function:
    void glElementPointerATI(GLenum pname, const GLvoid * params);

    Parameters:
        params - a direct Buffer

glElementPointerATI

public void glElementPointerATI(int pname,
                                long params_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glElementPointerATI(GLenum pname, const GLvoid * params);

glEnable

public void glEnable(int cap)

    Interface to C language function:
    void glEnable(GLenum cap);

glEnableClientState

public void glEnableClientState(int cap)

    Interface to C language function:
    void glEnableClientState(GLenum cap);

glEnableVariantClientStateEXT

public void glEnableVariantClientStateEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glEnableVariantClientStateEXT(GLuint mode);

glEnableVertexAttribAPPLE

public void glEnableVertexAttribAPPLE(int index,
                                      int pname)

    Entry point (through function pointer) to C language function:
    void glEnableVertexAttribAPPLE(GLuint index, GLenum pname);

glEnableVertexAttribArray

public void glEnableVertexAttribArray(int mode)

    Entry point (through function pointer) to C language function:
    void glEnableVertexAttribArray(GLuint mode);

glEnableVertexAttribArrayARB

public void glEnableVertexAttribArrayARB(int mode)

    Entry point (through function pointer) to C language function:
    void glEnableVertexAttribArrayARB(GLuint mode);

glEnd

public void glEnd()

    Interface to C language function:
    void glEnd(void);

glEndFragmentShaderATI

public void glEndFragmentShaderATI()

    Entry point (through function pointer) to C language function:
    void glEndFragmentShaderATI(void);

glEndList

public void glEndList()

    Interface to C language function:
    void glEndList(void);

glEndOcclusionQueryNV

public void glEndOcclusionQueryNV()

    Entry point (through function pointer) to C language function:
    void glEndOcclusionQueryNV(void);

glEndQuery

public void glEndQuery(int mode)

    Entry point (through function pointer) to C language function:
    void glEndQuery(GLenum mode);

glEndQueryARB

public void glEndQueryARB(int mode)

    Entry point (through function pointer) to C language function:
    void glEndQueryARB(GLenum mode);

glEndVertexShaderEXT

public void glEndVertexShaderEXT()

    Entry point (through function pointer) to C language function:
    void glEndVertexShaderEXT(void);

glEvalCoord1d

public void glEvalCoord1d(double u)

    Interface to C language function:
    void glEvalCoord1d(GLdouble u);

glEvalCoord1dv

public void glEvalCoord1dv(DoubleBuffer u)

    Interface to C language function:
    void glEvalCoord1dv(const GLdouble * u);

glEvalCoord1dv

public void glEvalCoord1dv(double[] u,
                           int u_offset)

    Interface to C language function:
    void glEvalCoord1dv(const GLdouble * u);

glEvalCoord1f

public void glEvalCoord1f(float u)

    Interface to C language function:
    void glEvalCoord1f(GLfloat u);

glEvalCoord1fv

public void glEvalCoord1fv(FloatBuffer u)

    Interface to C language function:
    void glEvalCoord1fv(const GLfloat * u);

glEvalCoord1fv

public void glEvalCoord1fv(float[] u,
                           int u_offset)

    Interface to C language function:
    void glEvalCoord1fv(const GLfloat * u);

glEvalCoord2d

public void glEvalCoord2d(double u,
                          double v)

    Interface to C language function:
    void glEvalCoord2d(GLdouble u, GLdouble v);

glEvalCoord2dv

public void glEvalCoord2dv(DoubleBuffer u)

    Interface to C language function:
    void glEvalCoord2dv(const GLdouble * u);

glEvalCoord2dv

public void glEvalCoord2dv(double[] u,
                           int u_offset)

    Interface to C language function:
    void glEvalCoord2dv(const GLdouble * u);

glEvalCoord2f

public void glEvalCoord2f(float u,
                          float v)

    Interface to C language function:
    void glEvalCoord2f(GLfloat u, GLfloat v);

glEvalCoord2fv

public void glEvalCoord2fv(FloatBuffer u)

    Interface to C language function:
    void glEvalCoord2fv(const GLfloat * u);

glEvalCoord2fv

public void glEvalCoord2fv(float[] u,
                           int u_offset)

    Interface to C language function:
    void glEvalCoord2fv(const GLfloat * u);

glEvalMapsNV

public void glEvalMapsNV(int target,
                         int id)

    Entry point (through function pointer) to C language function:
    void glEvalMapsNV(GLenum target, GLenum id);

glEvalMesh1

public void glEvalMesh1(int mode,
                        int i1,
                        int i2)

    Interface to C language function:
    void glEvalMesh1(GLenum mode, GLint i1, GLint i2);

glEvalMesh2

public void glEvalMesh2(int mode,
                        int i1,
                        int i2,
                        int j1,
                        int j2)

    Interface to C language function:
    void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);

glEvalPoint1

public void glEvalPoint1(int i)

    Interface to C language function:
    void glEvalPoint1(GLint i);

glEvalPoint2

public void glEvalPoint2(int i,
                         int j)

    Interface to C language function:
    void glEvalPoint2(GLint i, GLint j);

glExecuteProgramNV

public void glExecuteProgramNV(int target,
                               int pname,
                               FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glExecuteProgramNV(GLenum target, GLuint pname, const GLfloat * params);

glExecuteProgramNV

public void glExecuteProgramNV(int target,
                               int pname,
                               float[] params,
                               int params_offset)

    Entry point (through function pointer) to C language function:
    void glExecuteProgramNV(GLenum target, GLuint pname, const GLfloat * params);

glExtractComponentEXT

public void glExtractComponentEXT(int red,
                                  int green,
                                  int blue)

    Entry point (through function pointer) to C language function:
    void glExtractComponentEXT(GLuint red, GLuint green, GLuint blue);

glFeedbackBuffer

public void glFeedbackBuffer(int size,
                             int type,
                             FloatBuffer buffer)

    Interface to C language function:
    void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer);

    Parameters:
        buffer - a direct FloatBuffer

glFinalCombinerInputNV

public void glFinalCombinerInputNV(int sfactorRGB,
                                   int dfactorRGB,
                                   int sfactorAlpha,
                                   int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glFinalCombinerInputNV(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glFinish

public void glFinish()

    Interface to C language function:
    void glFinish(void);

glFinishAsyncSGIX

public int glFinishAsyncSGIX(IntBuffer markerp)

    Entry point (through function pointer) to C language function:
    GLint glFinishAsyncSGIX(GLuint * markerp);

glFinishAsyncSGIX

public int glFinishAsyncSGIX(int[] markerp,
                             int markerp_offset)

    Entry point (through function pointer) to C language function:
    GLint glFinishAsyncSGIX(GLuint * markerp);

glFinishFenceAPPLE

public void glFinishFenceAPPLE(int mode)

    Entry point (through function pointer) to C language function:
    void glFinishFenceAPPLE(GLuint mode);

glFinishFenceNV

public void glFinishFenceNV(int mode)

    Entry point (through function pointer) to C language function:
    void glFinishFenceNV(GLuint mode);

glFinishObjectAPPLE

public void glFinishObjectAPPLE(int target,
                                int s)

    Entry point (through function pointer) to C language function:
    void glFinishObjectAPPLE(GLenum target, GLint s);

glFinishRenderAPPLE

public void glFinishRenderAPPLE()

    Entry point (through function pointer) to C language function:
    void glFinishRenderAPPLE(void);

glFinishTextureSUNX

public void glFinishTextureSUNX()

    Entry point (through function pointer) to C language function:
    void glFinishTextureSUNX(void);

glFlush

public void glFlush()

    Interface to C language function:
    void glFlush(void);

glFlushPixelDataRangeNV

public void glFlushPixelDataRangeNV(int mode)

    Entry point (through function pointer) to C language function:
    void glFlushPixelDataRangeNV(GLenum mode);

glFlushRasterSGIX

public void glFlushRasterSGIX()

    Entry point (through function pointer) to C language function:
    void glFlushRasterSGIX(void);

glFlushRenderAPPLE

public void glFlushRenderAPPLE()

    Entry point (through function pointer) to C language function:
    void glFlushRenderAPPLE(void);

glFlushVertexArrayRangeAPPLE

public void glFlushVertexArrayRangeAPPLE(int length,
                                         Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid * pointer);

glFlushVertexArrayRangeNV

public void glFlushVertexArrayRangeNV()

    Entry point (through function pointer) to C language function:
    void glFlushVertexArrayRangeNV(void);

glFogCoordPointer

public void glFogCoordPointer(int type,
                              int stride,
                              Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glFogCoordPointer

public void glFogCoordPointer(int type,
                              int stride,
                              long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid * pointer);

glFogCoordPointerEXT

public void glFogCoordPointerEXT(int type,
                                 int stride,
                                 Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glFogCoordPointerEXT

public void glFogCoordPointerEXT(int type,
                                 int stride,
                                 long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid * pointer);

glFogCoordd

public void glFogCoordd(double coord)

    Entry point (through function pointer) to C language function:
    void glFogCoordd(GLdouble coord);

glFogCoorddEXT

public void glFogCoorddEXT(double coord)

    Entry point (through function pointer) to C language function:
    void glFogCoorddEXT(GLdouble coord);

glFogCoorddv

public void glFogCoorddv(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glFogCoorddv(const GLdouble * m);

glFogCoorddv

public void glFogCoorddv(double[] m,
                         int m_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoorddv(const GLdouble * m);

glFogCoorddvEXT

public void glFogCoorddvEXT(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glFogCoorddvEXT(const GLdouble * m);

glFogCoorddvEXT

public void glFogCoorddvEXT(double[] m,
                            int m_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoorddvEXT(const GLdouble * m);

glFogCoordf

public void glFogCoordf(float coord)

    Entry point (through function pointer) to C language function:
    void glFogCoordf(GLfloat coord);

glFogCoordfEXT

public void glFogCoordfEXT(float coord)

    Entry point (through function pointer) to C language function:
    void glFogCoordfEXT(GLfloat coord);

glFogCoordfv

public void glFogCoordfv(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glFogCoordfv(const GLfloat * m);

glFogCoordfv

public void glFogCoordfv(float[] m,
                         int m_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoordfv(const GLfloat * m);

glFogCoordfvEXT

public void glFogCoordfvEXT(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glFogCoordfvEXT(const GLfloat * m);

glFogCoordfvEXT

public void glFogCoordfvEXT(float[] m,
                            int m_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoordfvEXT(const GLfloat * m);

glFogCoordhNV

public void glFogCoordhNV(short factor)

    Entry point (through function pointer) to C language function:
    void glFogCoordhNV(GLhalfNV factor);

glFogCoordhvNV

public void glFogCoordhvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glFogCoordhvNV(const GLhalfNV * v);

glFogCoordhvNV

public void glFogCoordhvNV(short[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glFogCoordhvNV(const GLhalfNV * v);

glFogFuncSGIS

public void glFogFuncSGIS(int size,
                          FloatBuffer weights)

    Entry point (through function pointer) to C language function:
    void glFogFuncSGIS(GLsizei size, const GLfloat * weights);

glFogFuncSGIS

public void glFogFuncSGIS(int size,
                          float[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glFogFuncSGIS(GLsizei size, const GLfloat * weights);

glFogf

public void glFogf(int pname,
                   float param)

    Interface to C language function:
    void glFogf(GLenum pname, GLfloat param);

glFogfv

public void glFogfv(int pname,
                    FloatBuffer params)

    Interface to C language function:
    void glFogfv(GLenum pname, const GLfloat * params);

glFogfv

public void glFogfv(int pname,
                    float[] params,
                    int params_offset)

    Interface to C language function:
    void glFogfv(GLenum pname, const GLfloat * params);

glFogi

public void glFogi(int pname,
                   int param)

    Interface to C language function:
    void glFogi(GLenum pname, GLint param);

glFogiv

public void glFogiv(int pname,
                    IntBuffer params)

    Interface to C language function:
    void glFogiv(GLenum pname, const GLint * params);

glFogiv

public void glFogiv(int pname,
                    int[] params,
                    int params_offset)

    Interface to C language function:
    void glFogiv(GLenum pname, const GLint * params);

glFragmentColorMaterialSGIX

public void glFragmentColorMaterialSGIX(int target,
                                        int id)

    Entry point (through function pointer) to C language function:
    void glFragmentColorMaterialSGIX(GLenum target, GLenum id);

glFragmentLightModelfSGIX

public void glFragmentLightModelfSGIX(int target,
                                      float s)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModelfSGIX(GLenum target, GLfloat s);

glFragmentLightModelfvSGIX

public void glFragmentLightModelfvSGIX(int target,
                                       FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModelfvSGIX(GLenum target, const GLfloat * v);

glFragmentLightModelfvSGIX

public void glFragmentLightModelfvSGIX(int target,
                                       float[] v,
                                       int v_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModelfvSGIX(GLenum target, const GLfloat * v);

glFragmentLightModeliSGIX

public void glFragmentLightModeliSGIX(int target,
                                      int s)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModeliSGIX(GLenum target, GLint s);

glFragmentLightModelivSGIX

public void glFragmentLightModelivSGIX(int target,
                                       IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModelivSGIX(GLenum target, const GLint * v);

glFragmentLightModelivSGIX

public void glFragmentLightModelivSGIX(int target,
                                       int[] v,
                                       int v_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentLightModelivSGIX(GLenum target, const GLint * v);

glFragmentLightfSGIX

public void glFragmentLightfSGIX(int target,
                                 int pname,
                                 float params)

    Entry point (through function pointer) to C language function:
    void glFragmentLightfSGIX(GLenum target, GLenum pname, GLfloat params);

glFragmentLightfvSGIX

public void glFragmentLightfvSGIX(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glFragmentLightfvSGIX(GLenum target, GLenum pname, const GLfloat * params);

glFragmentLightfvSGIX

public void glFragmentLightfvSGIX(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentLightfvSGIX(GLenum target, GLenum pname, const GLfloat * params);

glFragmentLightiSGIX

public void glFragmentLightiSGIX(int target,
                                 int pname,
                                 int params)

    Entry point (through function pointer) to C language function:
    void glFragmentLightiSGIX(GLenum target, GLenum pname, GLint params);

glFragmentLightivSGIX

public void glFragmentLightivSGIX(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glFragmentLightivSGIX(GLenum target, GLenum pname, const GLint * params);

glFragmentLightivSGIX

public void glFragmentLightivSGIX(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentLightivSGIX(GLenum target, GLenum pname, const GLint * params);

glFragmentMaterialfSGIX

public void glFragmentMaterialfSGIX(int target,
                                    int pname,
                                    float params)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialfSGIX(GLenum target, GLenum pname, GLfloat params);

glFragmentMaterialfvSGIX

public void glFragmentMaterialfvSGIX(int target,
                                     int pname,
                                     FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialfvSGIX(GLenum target, GLenum pname, const GLfloat * params);

glFragmentMaterialfvSGIX

public void glFragmentMaterialfvSGIX(int target,
                                     int pname,
                                     float[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialfvSGIX(GLenum target, GLenum pname, const GLfloat * params);

glFragmentMaterialiSGIX

public void glFragmentMaterialiSGIX(int target,
                                    int pname,
                                    int params)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialiSGIX(GLenum target, GLenum pname, GLint params);

glFragmentMaterialivSGIX

public void glFragmentMaterialivSGIX(int target,
                                     int pname,
                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialivSGIX(GLenum target, GLenum pname, const GLint * params);

glFragmentMaterialivSGIX

public void glFragmentMaterialivSGIX(int target,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glFragmentMaterialivSGIX(GLenum target, GLenum pname, const GLint * params);

glFrameZoomSGIX

public void glFrameZoomSGIX(int count)

    Entry point (through function pointer) to C language function:
    void glFrameZoomSGIX(GLint count);

glFramebufferRenderbufferEXT

public void glFramebufferRenderbufferEXT(int sfactorRGB,
                                         int dfactorRGB,
                                         int sfactorAlpha,
                                         int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glFramebufferRenderbufferEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLuint dfactorAlpha);

glFramebufferTexture1DEXT

public void glFramebufferTexture1DEXT(int target,
                                      int attachment,
                                      int textarget,
                                      int texture,
                                      int level)

    Entry point (through function pointer) to C language function:
    void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);

glFramebufferTexture2DEXT

public void glFramebufferTexture2DEXT(int target,
                                      int attachment,
                                      int textarget,
                                      int texture,
                                      int level)

    Entry point (through function pointer) to C language function:
    void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);

glFramebufferTexture3DEXT

public void glFramebufferTexture3DEXT(int target,
                                      int attachment,
                                      int textarget,
                                      int texture,
                                      int level,
                                      int zoffset)

    Entry point (through function pointer) to C language function:
    void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);

glFreeObjectBufferATI

public void glFreeObjectBufferATI(int mode)

    Entry point (through function pointer) to C language function:
    void glFreeObjectBufferATI(GLuint mode);

glFrontFace

public void glFrontFace(int mode)

    Interface to C language function:
    void glFrontFace(GLenum mode);

glFrustum

public void glFrustum(double left,
                      double right,
                      double bottom,
                      double top,
                      double near_val,
                      double far_val)

    Interface to C language function:
    void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);

glGenAsyncMarkersSGIX

public int glGenAsyncMarkersSGIX(int range)

    Entry point (through function pointer) to C language function:
    GLuint glGenAsyncMarkersSGIX(GLsizei range);

glGenBuffers

public void glGenBuffers(int n,
                         IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenBuffers(GLsizei n, GLuint * ids);

glGenBuffers

public void glGenBuffers(int n,
                         int[] ids,
                         int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenBuffers(GLsizei n, GLuint * ids);

glGenBuffersARB

public void glGenBuffersARB(int n,
                            IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenBuffersARB(GLsizei n, GLuint * ids);

glGenBuffersARB

public void glGenBuffersARB(int n,
                            int[] ids,
                            int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenBuffersARB(GLsizei n, GLuint * ids);

glGenFencesAPPLE

public void glGenFencesAPPLE(int n,
                             IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenFencesAPPLE(GLsizei n, GLuint * ids);

glGenFencesAPPLE

public void glGenFencesAPPLE(int n,
                             int[] ids,
                             int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenFencesAPPLE(GLsizei n, GLuint * ids);

glGenFencesNV

public void glGenFencesNV(int n,
                          IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenFencesNV(GLsizei n, GLuint * ids);

glGenFencesNV

public void glGenFencesNV(int n,
                          int[] ids,
                          int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenFencesNV(GLsizei n, GLuint * ids);

glGenFragmentShadersATI

public int glGenFragmentShadersATI(int type)

    Entry point (through function pointer) to C language function:
    GLuint glGenFragmentShadersATI(GLuint type);

glGenFramebuffersEXT

public void glGenFramebuffersEXT(int n,
                                 IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenFramebuffersEXT(GLsizei n, GLuint * ids);

glGenFramebuffersEXT

public void glGenFramebuffersEXT(int n,
                                 int[] ids,
                                 int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenFramebuffersEXT(GLsizei n, GLuint * ids);

glGenLists

public int glGenLists(int range)

    Interface to C language function:
    GLuint glGenLists(GLsizei range);

glGenOcclusionQueriesNV

public void glGenOcclusionQueriesNV(int n,
                                    IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenOcclusionQueriesNV(GLsizei n, GLuint * ids);

glGenOcclusionQueriesNV

public void glGenOcclusionQueriesNV(int n,
                                    int[] ids,
                                    int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenOcclusionQueriesNV(GLsizei n, GLuint * ids);

glGenProgramsARB

public void glGenProgramsARB(int n,
                             IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenProgramsARB(GLsizei n, GLuint * ids);

glGenProgramsARB

public void glGenProgramsARB(int n,
                             int[] ids,
                             int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenProgramsARB(GLsizei n, GLuint * ids);

glGenProgramsNV

public void glGenProgramsNV(int n,
                            IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenProgramsNV(GLsizei n, GLuint * ids);

glGenProgramsNV

public void glGenProgramsNV(int n,
                            int[] ids,
                            int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenProgramsNV(GLsizei n, GLuint * ids);

glGenQueries

public void glGenQueries(int n,
                         IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenQueries(GLsizei n, GLuint * ids);

glGenQueries

public void glGenQueries(int n,
                         int[] ids,
                         int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenQueries(GLsizei n, GLuint * ids);

glGenQueriesARB

public void glGenQueriesARB(int n,
                            IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenQueriesARB(GLsizei n, GLuint * ids);

glGenQueriesARB

public void glGenQueriesARB(int n,
                            int[] ids,
                            int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenQueriesARB(GLsizei n, GLuint * ids);

glGenRenderbuffersEXT

public void glGenRenderbuffersEXT(int n,
                                  IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenRenderbuffersEXT(GLsizei n, GLuint * ids);

glGenRenderbuffersEXT

public void glGenRenderbuffersEXT(int n,
                                  int[] ids,
                                  int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenRenderbuffersEXT(GLsizei n, GLuint * ids);

glGenSymbolsEXT

public int glGenSymbolsEXT(int datatype,
                           int storagetype,
                           int range,
                           int components)

    Entry point (through function pointer) to C language function:
    GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);

glGenTextures

public void glGenTextures(int n,
                          IntBuffer textures)

    Interface to C language function:
    void glGenTextures(GLsizei n, GLuint * textures);

glGenTextures

public void glGenTextures(int n,
                          int[] textures,
                          int textures_offset)

    Interface to C language function:
    void glGenTextures(GLsizei n, GLuint * textures);

glGenVertexArraysAPPLE

public void glGenVertexArraysAPPLE(int n,
                                   IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glGenVertexArraysAPPLE(GLsizei n, const GLuint * ids);

glGenVertexArraysAPPLE

public void glGenVertexArraysAPPLE(int n,
                                   int[] ids,
                                   int ids_offset)

    Entry point (through function pointer) to C language function:
    void glGenVertexArraysAPPLE(GLsizei n, const GLuint * ids);

glGenVertexShadersEXT

public int glGenVertexShadersEXT(int type)

    Entry point (through function pointer) to C language function:
    GLuint glGenVertexShadersEXT(GLuint type);

glGenerateMipmapEXT

public void glGenerateMipmapEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glGenerateMipmapEXT(GLenum mode);

glGetActiveAttrib

public void glGetActiveAttrib(int program,
                              int index,
                              int bufSize,
                              IntBuffer length,
                              IntBuffer size,
                              IntBuffer type,
                              ByteBuffer name)

    Entry point (through function pointer) to C language function:
    void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);

glGetActiveAttrib

public void glGetActiveAttrib(int program,
                              int index,
                              int bufSize,
                              int[] length,
                              int length_offset,
                              int[] size,
                              int size_offset,
                              int[] type,
                              int type_offset,
                              byte[] name,
                              int name_offset)

    Entry point (through function pointer) to C language function:
    void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);

glGetActiveAttribARB

public void glGetActiveAttribARB(int program,
                                 int index,
                                 int bufSize,
                                 IntBuffer length,
                                 IntBuffer size,
                                 IntBuffer type,
                                 ByteBuffer name)

    Entry point (through function pointer) to C language function:
    void glGetActiveAttribARB(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);

glGetActiveAttribARB

public void glGetActiveAttribARB(int program,
                                 int index,
                                 int bufSize,
                                 int[] length,
                                 int length_offset,
                                 int[] size,
                                 int size_offset,
                                 int[] type,
                                 int type_offset,
                                 byte[] name,
                                 int name_offset)

    Entry point (through function pointer) to C language function:
    void glGetActiveAttribARB(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);

glGetActiveUniform

public void glGetActiveUniform(int program,
                               int index,
                               int bufSize,
                               IntBuffer length,
                               IntBuffer size,
                               IntBuffer type,
                               ByteBuffer name)

    Entry point (through function pointer) to C language function:
    void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);

glGetActiveUniform

public void glGetActiveUniform(int program,
                               int index,
                               int bufSize,
                               int[] length,
                               int length_offset,
                               int[] size,
                               int size_offset,
                               int[] type,
                               int type_offset,
                               byte[] name,
                               int name_offset)

    Entry point (through function pointer) to C language function:
    void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);

glGetActiveUniformARB

public void glGetActiveUniformARB(int program,
                                  int index,
                                  int bufSize,
                                  IntBuffer length,
                                  IntBuffer size,
                                  IntBuffer type,
                                  ByteBuffer name)

    Entry point (through function pointer) to C language function:
    void glGetActiveUniformARB(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);

glGetActiveUniformARB

public void glGetActiveUniformARB(int program,
                                  int index,
                                  int bufSize,
                                  int[] length,
                                  int length_offset,
                                  int[] size,
                                  int size_offset,
                                  int[] type,
                                  int type_offset,
                                  byte[] name,
                                  int name_offset)

    Entry point (through function pointer) to C language function:
    void glGetActiveUniformARB(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);

glGetArrayObjectfvATI

public void glGetArrayObjectfvATI(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetArrayObjectfvATI(GLenum target, GLenum pname, GLfloat * params);

glGetArrayObjectfvATI

public void glGetArrayObjectfvATI(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetArrayObjectfvATI(GLenum target, GLenum pname, GLfloat * params);

glGetArrayObjectivATI

public void glGetArrayObjectivATI(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetArrayObjectivATI(GLenum target, GLenum pname, GLint * params);

glGetArrayObjectivATI

public void glGetArrayObjectivATI(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetArrayObjectivATI(GLenum target, GLenum pname, GLint * params);

glGetAttachedObjectsARB

public void glGetAttachedObjectsARB(int program,
                                    int maxCount,
                                    IntBuffer count,
                                    IntBuffer obj)

    Entry point (through function pointer) to C language function:
    void glGetAttachedObjectsARB(GLhandleARB program, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);

glGetAttachedObjectsARB

public void glGetAttachedObjectsARB(int program,
                                    int maxCount,
                                    int[] count,
                                    int count_offset,
                                    int[] obj,
                                    int obj_offset)

    Entry point (through function pointer) to C language function:
    void glGetAttachedObjectsARB(GLhandleARB program, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);

glGetAttachedShaders

public void glGetAttachedShaders(int program,
                                 int maxCount,
                                 IntBuffer count,
                                 IntBuffer obj)

    Entry point (through function pointer) to C language function:
    void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj);

glGetAttachedShaders

public void glGetAttachedShaders(int program,
                                 int maxCount,
                                 int[] count,
                                 int count_offset,
                                 int[] obj,
                                 int obj_offset)

    Entry point (through function pointer) to C language function:
    void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj);

glGetAttribLocation

public int glGetAttribLocation(int program,
                               String name)

    Entry point (through function pointer) to C language function:
    GLint glGetAttribLocation(GLuint program, const GLchar * name);

glGetAttribLocationARB

public int glGetAttribLocationARB(int program,
                                  String name)

    Entry point (through function pointer) to C language function:
    GLint glGetAttribLocationARB(GLhandleARB program, const GLcharARB * name);

glGetBooleanv

public void glGetBooleanv(int pname,
                          ByteBuffer params)

    Interface to C language function:
    void glGetBooleanv(GLenum pname, GLboolean * params);

glGetBooleanv

public void glGetBooleanv(int pname,
                          byte[] params,
                          int params_offset)

    Interface to C language function:
    void glGetBooleanv(GLenum pname, GLboolean * params);

glGetBufferParameteriv

public void glGetBufferParameteriv(int target,
                                   int pname,
                                   IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params);

glGetBufferParameteriv

public void glGetBufferParameteriv(int target,
                                   int pname,
                                   int[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params);

glGetBufferParameterivARB

public void glGetBufferParameterivARB(int target,
                                      int pname,
                                      IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params);

glGetBufferParameterivARB

public void glGetBufferParameterivARB(int target,
                                      int pname,
                                      int[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params);

glGetBufferSubData

public void glGetBufferSubData(int target,
                               int offset,
                               int size,
                               Buffer data)

    Entry point (through function pointer) to C language function:
    void glGetBufferSubData(GLenum target, ptrdiff_t offset, ptrdiff_t size, GLvoid * data);

glGetBufferSubDataARB

public void glGetBufferSubDataARB(int target,
                                  int offset,
                                  int size,
                                  Buffer data)

    Entry point (through function pointer) to C language function:
    void glGetBufferSubDataARB(GLenum target, ptrdiff_t offset, ptrdiff_t size, GLvoid * data);

    Parameters:
        data - a direct Buffer

glGetClipPlane

public void glGetClipPlane(int plane,
                           DoubleBuffer equation)

    Interface to C language function:
    void glGetClipPlane(GLenum plane, GLdouble * equation);

glGetClipPlane

public void glGetClipPlane(int plane,
                           double[] equation,
                           int equation_offset)

    Interface to C language function:
    void glGetClipPlane(GLenum plane, GLdouble * equation);

glGetColorTable

public void glGetColorTable(int target,
                            int format,
                            int type,
                            Buffer table)

    Entry point (through function pointer) to C language function:
    void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid * table);

glGetColorTable

public void glGetColorTable(int target,
                            int format,
                            int type,
                            long table_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid * table);

glGetColorTableEXT

public void glGetColorTableEXT(int target,
                               int format,
                               int type,
                               Buffer table)

    Entry point (through function pointer) to C language function:
    void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid * table);

glGetColorTableParameterfv

public void glGetColorTableParameterfv(int target,
                                       int pname,
                                       FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetColorTableParameterfv

public void glGetColorTableParameterfv(int target,
                                       int pname,
                                       float[] params,
                                       int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetColorTableParameterfvEXT

public void glGetColorTableParameterfvEXT(int target,
                                          int pname,
                                          FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params);

glGetColorTableParameterfvEXT

public void glGetColorTableParameterfvEXT(int target,
                                          int pname,
                                          float[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params);

glGetColorTableParameteriv

public void glGetColorTableParameteriv(int target,
                                       int pname,
                                       IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params);

glGetColorTableParameteriv

public void glGetColorTableParameteriv(int target,
                                       int pname,
                                       int[] params,
                                       int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params);

glGetColorTableParameterivEXT

public void glGetColorTableParameterivEXT(int target,
                                          int pname,
                                          IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params);

glGetColorTableParameterivEXT

public void glGetColorTableParameterivEXT(int target,
                                          int pname,
                                          int[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params);

glGetCombinerInputParameterfvNV

public void glGetCombinerInputParameterfvNV(int stage,
                                            int portion,
                                            int variable,
                                            int pname,
                                            FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);

glGetCombinerInputParameterfvNV

public void glGetCombinerInputParameterfvNV(int stage,
                                            int portion,
                                            int variable,
                                            int pname,
                                            float[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);

glGetCombinerInputParameterivNV

public void glGetCombinerInputParameterivNV(int stage,
                                            int portion,
                                            int variable,
                                            int pname,
                                            IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);

glGetCombinerInputParameterivNV

public void glGetCombinerInputParameterivNV(int stage,
                                            int portion,
                                            int variable,
                                            int pname,
                                            int[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);

glGetCombinerOutputParameterfvNV

public void glGetCombinerOutputParameterfvNV(int stage,
                                             int portion,
                                             int pname,
                                             FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);

glGetCombinerOutputParameterfvNV

public void glGetCombinerOutputParameterfvNV(int stage,
                                             int portion,
                                             int pname,
                                             float[] params,
                                             int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);

glGetCombinerOutputParameterivNV

public void glGetCombinerOutputParameterivNV(int stage,
                                             int portion,
                                             int pname,
                                             IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params);

glGetCombinerOutputParameterivNV

public void glGetCombinerOutputParameterivNV(int stage,
                                             int portion,
                                             int pname,
                                             int[] params,
                                             int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params);

glGetCombinerStageParameterfvNV

public void glGetCombinerStageParameterfvNV(int target,
                                            int pname,
                                            FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetCombinerStageParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetCombinerStageParameterfvNV

public void glGetCombinerStageParameterfvNV(int target,
                                            int pname,
                                            float[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetCombinerStageParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetCompressedTexImage

public void glGetCompressedTexImage(int target,
                                    int level,
                                    Buffer img)

    Entry point (through function pointer) to C language function:
    void glGetCompressedTexImage(GLenum target, GLint level, GLvoid * img);

glGetCompressedTexImage

public void glGetCompressedTexImage(int target,
                                    int level,
                                    long img_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetCompressedTexImage(GLenum target, GLint level, GLvoid * img);

glGetConvolutionFilter

public void glGetConvolutionFilter(int target,
                                   int format,
                                   int type,
                                   Buffer table)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid * table);

glGetConvolutionFilter

public void glGetConvolutionFilter(int target,
                                   int format,
                                   int type,
                                   long table_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid * table);

glGetConvolutionParameterfv

public void glGetConvolutionParameterfv(int target,
                                        int pname,
                                        FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetConvolutionParameterfv

public void glGetConvolutionParameterfv(int target,
                                        int pname,
                                        float[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetConvolutionParameteriv

public void glGetConvolutionParameteriv(int target,
                                        int pname,
                                        IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params);

glGetConvolutionParameteriv

public void glGetConvolutionParameteriv(int target,
                                        int pname,
                                        int[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params);

glGetDetailTexFuncSGIS

public void glGetDetailTexFuncSGIS(int pname,
                                   FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetDetailTexFuncSGIS(GLenum pname, GLfloat * params);

glGetDetailTexFuncSGIS

public void glGetDetailTexFuncSGIS(int pname,
                                   float[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetDetailTexFuncSGIS(GLenum pname, GLfloat * params);

glGetDoublev

public void glGetDoublev(int pname,
                         DoubleBuffer params)

    Interface to C language function:
    void glGetDoublev(GLenum pname, GLdouble * params);

glGetDoublev

public void glGetDoublev(int pname,
                         double[] params,
                         int params_offset)

    Interface to C language function:
    void glGetDoublev(GLenum pname, GLdouble * params);

glGetError

public int glGetError()

    Interface to C language function:
    GLenum glGetError(void);

glGetFenceivNV

public void glGetFenceivNV(int target,
                           int pname,
                           IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFenceivNV(GLuint target, GLenum pname, GLint * params);

glGetFenceivNV

public void glGetFenceivNV(int target,
                           int pname,
                           int[] params,
                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFenceivNV(GLuint target, GLenum pname, GLint * params);

glGetFinalCombinerInputParameterfvNV

public void glGetFinalCombinerInputParameterfvNV(int target,
                                                 int pname,
                                                 FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFinalCombinerInputParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetFinalCombinerInputParameterfvNV

public void glGetFinalCombinerInputParameterfvNV(int target,
                                                 int pname,
                                                 float[] params,
                                                 int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFinalCombinerInputParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetFinalCombinerInputParameterivNV

public void glGetFinalCombinerInputParameterivNV(int target,
                                                 int pname,
                                                 IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFinalCombinerInputParameterivNV(GLenum target, GLenum pname, GLint * params);

glGetFinalCombinerInputParameterivNV

public void glGetFinalCombinerInputParameterivNV(int target,
                                                 int pname,
                                                 int[] params,
                                                 int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFinalCombinerInputParameterivNV(GLenum target, GLenum pname, GLint * params);

glGetFloatv

public void glGetFloatv(int pname,
                        FloatBuffer params)

    Interface to C language function:
    void glGetFloatv(GLenum pname, GLfloat * params);

glGetFloatv

public void glGetFloatv(int pname,
                        float[] params,
                        int params_offset)

    Interface to C language function:
    void glGetFloatv(GLenum pname, GLfloat * params);

glGetFogFuncSGIS

public void glGetFogFuncSGIS(FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glGetFogFuncSGIS(GLfloat * points);

glGetFogFuncSGIS

public void glGetFogFuncSGIS(float[] points,
                             int points_offset)

    Entry point (through function pointer) to C language function:
    void glGetFogFuncSGIS(GLfloat * points);

glGetFragmentLightfvSGIX

public void glGetFragmentLightfvSGIX(int target,
                                     int pname,
                                     FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFragmentLightfvSGIX(GLenum target, GLenum pname, GLfloat * params);

glGetFragmentLightfvSGIX

public void glGetFragmentLightfvSGIX(int target,
                                     int pname,
                                     float[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFragmentLightfvSGIX(GLenum target, GLenum pname, GLfloat * params);

glGetFragmentLightivSGIX

public void glGetFragmentLightivSGIX(int target,
                                     int pname,
                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFragmentLightivSGIX(GLenum target, GLenum pname, GLint * params);

glGetFragmentLightivSGIX

public void glGetFragmentLightivSGIX(int target,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFragmentLightivSGIX(GLenum target, GLenum pname, GLint * params);

glGetFragmentMaterialfvSGIX

public void glGetFragmentMaterialfvSGIX(int target,
                                        int pname,
                                        FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFragmentMaterialfvSGIX(GLenum target, GLenum pname, GLfloat * params);

glGetFragmentMaterialfvSGIX

public void glGetFragmentMaterialfvSGIX(int target,
                                        int pname,
                                        float[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFragmentMaterialfvSGIX(GLenum target, GLenum pname, GLfloat * params);

glGetFragmentMaterialivSGIX

public void glGetFragmentMaterialivSGIX(int target,
                                        int pname,
                                        IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFragmentMaterialivSGIX(GLenum target, GLenum pname, GLint * params);

glGetFragmentMaterialivSGIX

public void glGetFragmentMaterialivSGIX(int target,
                                        int pname,
                                        int[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFragmentMaterialivSGIX(GLenum target, GLenum pname, GLint * params);

glGetFramebufferAttachmentParameterivEXT

public void glGetFramebufferAttachmentParameterivEXT(int stage,
                                                     int portion,
                                                     int pname,
                                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetFramebufferAttachmentParameterivEXT(GLenum stage, GLenum portion, GLenum pname, GLint * params);

glGetFramebufferAttachmentParameterivEXT

public void glGetFramebufferAttachmentParameterivEXT(int stage,
                                                     int portion,
                                                     int pname,
                                                     int[] params,
                                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetFramebufferAttachmentParameterivEXT(GLenum stage, GLenum portion, GLenum pname, GLint * params);

glGetHandleARB

public int glGetHandleARB(int type)

    Entry point (through function pointer) to C language function:
    GLhandleARB glGetHandleARB(GLenum type);

glGetHistogram

public void glGetHistogram(int target,
                           boolean reset,
                           int format,
                           int type,
                           Buffer values)

    Entry point (through function pointer) to C language function:
    void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values);

glGetHistogram

public void glGetHistogram(int target,
                           boolean reset,
                           int format,
                           int type,
                           long values_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values);

glGetHistogramParameterfv

public void glGetHistogramParameterfv(int target,
                                      int pname,
                                      FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetHistogramParameterfv

public void glGetHistogramParameterfv(int target,
                                      int pname,
                                      float[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetHistogramParameteriv

public void glGetHistogramParameteriv(int target,
                                      int pname,
                                      IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params);

glGetHistogramParameteriv

public void glGetHistogramParameteriv(int target,
                                      int pname,
                                      int[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params);

glGetImageTransformParameterfvHP

public void glGetImageTransformParameterfvHP(int target,
                                             int pname,
                                             FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params);

glGetImageTransformParameterfvHP

public void glGetImageTransformParameterfvHP(int target,
                                             int pname,
                                             float[] params,
                                             int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params);

glGetImageTransformParameterivHP

public void glGetImageTransformParameterivHP(int target,
                                             int pname,
                                             IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params);

glGetImageTransformParameterivHP

public void glGetImageTransformParameterivHP(int target,
                                             int pname,
                                             int[] params,
                                             int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params);

glGetInfoLogARB

public void glGetInfoLogARB(int program,
                            int bufSize,
                            IntBuffer length,
                            ByteBuffer infoLog)

    Entry point (through function pointer) to C language function:
    void glGetInfoLogARB(GLhandleARB program, GLsizei bufSize, GLsizei * length, GLcharARB * infoLog);

glGetInfoLogARB

public void glGetInfoLogARB(int program,
                            int bufSize,
                            int[] length,
                            int length_offset,
                            byte[] infoLog,
                            int infoLog_offset)

    Entry point (through function pointer) to C language function:
    void glGetInfoLogARB(GLhandleARB program, GLsizei bufSize, GLsizei * length, GLcharARB * infoLog);

glGetInstrumentsSGIX

public int glGetInstrumentsSGIX()

    Entry point (through function pointer) to C language function:
    GLint glGetInstrumentsSGIX(void);

glGetIntegerv

public void glGetIntegerv(int pname,
                          IntBuffer params)

    Interface to C language function:
    void glGetIntegerv(GLenum pname, GLint * params);

glGetIntegerv

public void glGetIntegerv(int pname,
                          int[] params,
                          int params_offset)

    Interface to C language function:
    void glGetIntegerv(GLenum pname, GLint * params);

glGetInvariantBooleanvEXT

public void glGetInvariantBooleanvEXT(int id,
                                      int pname,
                                      ByteBuffer program)

    Entry point (through function pointer) to C language function:
    void glGetInvariantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetInvariantBooleanvEXT

public void glGetInvariantBooleanvEXT(int id,
                                      int pname,
                                      byte[] program,
                                      int program_offset)

    Entry point (through function pointer) to C language function:
    void glGetInvariantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetInvariantFloatvEXT

public void glGetInvariantFloatvEXT(int target,
                                    int pname,
                                    FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetInvariantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetInvariantFloatvEXT

public void glGetInvariantFloatvEXT(int target,
                                    int pname,
                                    float[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetInvariantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetInvariantIntegervEXT

public void glGetInvariantIntegervEXT(int target,
                                      int pname,
                                      IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetInvariantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetInvariantIntegervEXT

public void glGetInvariantIntegervEXT(int target,
                                      int pname,
                                      int[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetInvariantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetLightfv

public void glGetLightfv(int light,
                         int pname,
                         FloatBuffer params)

    Interface to C language function:
    void glGetLightfv(GLenum light, GLenum pname, GLfloat * params);

glGetLightfv

public void glGetLightfv(int light,
                         int pname,
                         float[] params,
                         int params_offset)

    Interface to C language function:
    void glGetLightfv(GLenum light, GLenum pname, GLfloat * params);

glGetLightiv

public void glGetLightiv(int light,
                         int pname,
                         IntBuffer params)

    Interface to C language function:
    void glGetLightiv(GLenum light, GLenum pname, GLint * params);

glGetLightiv

public void glGetLightiv(int light,
                         int pname,
                         int[] params,
                         int params_offset)

    Interface to C language function:
    void glGetLightiv(GLenum light, GLenum pname, GLint * params);

glGetListParameterfvSGIX

public void glGetListParameterfvSGIX(int target,
                                     int pname,
                                     FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetListParameterfvSGIX(GLuint target, GLenum pname, GLfloat * params);

glGetListParameterfvSGIX

public void glGetListParameterfvSGIX(int target,
                                     int pname,
                                     float[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetListParameterfvSGIX(GLuint target, GLenum pname, GLfloat * params);

glGetListParameterivSGIX

public void glGetListParameterivSGIX(int target,
                                     int pname,
                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetListParameterivSGIX(GLuint target, GLenum pname, GLint * params);

glGetListParameterivSGIX

public void glGetListParameterivSGIX(int target,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetListParameterivSGIX(GLuint target, GLenum pname, GLint * params);

glGetLocalConstantBooleanvEXT

public void glGetLocalConstantBooleanvEXT(int id,
                                          int pname,
                                          ByteBuffer program)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetLocalConstantBooleanvEXT

public void glGetLocalConstantBooleanvEXT(int id,
                                          int pname,
                                          byte[] program,
                                          int program_offset)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetLocalConstantFloatvEXT

public void glGetLocalConstantFloatvEXT(int target,
                                        int pname,
                                        FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetLocalConstantFloatvEXT

public void glGetLocalConstantFloatvEXT(int target,
                                        int pname,
                                        float[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetLocalConstantIntegervEXT

public void glGetLocalConstantIntegervEXT(int target,
                                          int pname,
                                          IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetLocalConstantIntegervEXT

public void glGetLocalConstantIntegervEXT(int target,
                                          int pname,
                                          int[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetLocalConstantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetMapAttribParameterfvNV

public void glGetMapAttribParameterfvNV(int stage,
                                        int portion,
                                        int pname,
                                        FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMapAttribParameterfvNV(GLenum stage, GLuint portion, GLenum pname, GLfloat * params);

glGetMapAttribParameterfvNV

public void glGetMapAttribParameterfvNV(int stage,
                                        int portion,
                                        int pname,
                                        float[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMapAttribParameterfvNV(GLenum stage, GLuint portion, GLenum pname, GLfloat * params);

glGetMapAttribParameterivNV

public void glGetMapAttribParameterivNV(int stage,
                                        int portion,
                                        int pname,
                                        IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMapAttribParameterivNV(GLenum stage, GLuint portion, GLenum pname, GLint * params);

glGetMapAttribParameterivNV

public void glGetMapAttribParameterivNV(int stage,
                                        int portion,
                                        int pname,
                                        int[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMapAttribParameterivNV(GLenum stage, GLuint portion, GLenum pname, GLint * params);

glGetMapControlPointsNV

public void glGetMapControlPointsNV(int target,
                                    int index,
                                    int type,
                                    int ustride,
                                    int vstride,
                                    boolean packed,
                                    Buffer points)

    Entry point (through function pointer) to C language function:
    void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid * points);

glGetMapParameterfvNV

public void glGetMapParameterfvNV(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetMapParameterfvNV

public void glGetMapParameterfvNV(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params);

glGetMapParameterivNV

public void glGetMapParameterivNV(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params);

glGetMapParameterivNV

public void glGetMapParameterivNV(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params);

glGetMapdv

public void glGetMapdv(int target,
                       int query,
                       DoubleBuffer v)

    Interface to C language function:
    void glGetMapdv(GLenum target, GLenum query, GLdouble * v);

glGetMapdv

public void glGetMapdv(int target,
                       int query,
                       double[] v,
                       int v_offset)

    Interface to C language function:
    void glGetMapdv(GLenum target, GLenum query, GLdouble * v);

glGetMapfv

public void glGetMapfv(int target,
                       int query,
                       FloatBuffer v)

    Interface to C language function:
    void glGetMapfv(GLenum target, GLenum query, GLfloat * v);

glGetMapfv

public void glGetMapfv(int target,
                       int query,
                       float[] v,
                       int v_offset)

    Interface to C language function:
    void glGetMapfv(GLenum target, GLenum query, GLfloat * v);

glGetMapiv

public void glGetMapiv(int target,
                       int query,
                       IntBuffer v)

    Interface to C language function:
    void glGetMapiv(GLenum target, GLenum query, GLint * v);

glGetMapiv

public void glGetMapiv(int target,
                       int query,
                       int[] v,
                       int v_offset)

    Interface to C language function:
    void glGetMapiv(GLenum target, GLenum query, GLint * v);

glGetMaterialfv

public void glGetMaterialfv(int face,
                            int pname,
                            FloatBuffer params)

    Interface to C language function:
    void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params);

glGetMaterialfv

public void glGetMaterialfv(int face,
                            int pname,
                            float[] params,
                            int params_offset)

    Interface to C language function:
    void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params);

glGetMaterialiv

public void glGetMaterialiv(int face,
                            int pname,
                            IntBuffer params)

    Interface to C language function:
    void glGetMaterialiv(GLenum face, GLenum pname, GLint * params);

glGetMaterialiv

public void glGetMaterialiv(int face,
                            int pname,
                            int[] params,
                            int params_offset)

    Interface to C language function:
    void glGetMaterialiv(GLenum face, GLenum pname, GLint * params);

glGetMinmax

public void glGetMinmax(int target,
                        boolean reset,
                        int format,
                        int type,
                        Buffer values)

    Entry point (through function pointer) to C language function:
    void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values);

glGetMinmax

public void glGetMinmax(int target,
                        boolean reset,
                        int format,
                        int type,
                        long values_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values);

glGetMinmaxParameterfv

public void glGetMinmaxParameterfv(int target,
                                   int pname,
                                   FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetMinmaxParameterfv

public void glGetMinmaxParameterfv(int target,
                                   int pname,
                                   float[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetMinmaxParameteriv

public void glGetMinmaxParameteriv(int target,
                                   int pname,
                                   IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params);

glGetMinmaxParameteriv

public void glGetMinmaxParameteriv(int target,
                                   int pname,
                                   int[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params);

glGetObjectBufferfvATI

public void glGetObjectBufferfvATI(int target,
                                   int pname,
                                   FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetObjectBufferfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetObjectBufferfvATI

public void glGetObjectBufferfvATI(int target,
                                   int pname,
                                   float[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetObjectBufferfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetObjectBufferivATI

public void glGetObjectBufferivATI(int target,
                                   int pname,
                                   IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetObjectBufferivATI(GLuint target, GLenum pname, GLint * params);

glGetObjectBufferivATI

public void glGetObjectBufferivATI(int target,
                                   int pname,
                                   int[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetObjectBufferivATI(GLuint target, GLenum pname, GLint * params);

glGetObjectParameterfvARB

public void glGetObjectParameterfvARB(int target,
                                      int pname,
                                      FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetObjectParameterfvARB(GLhandleARB target, GLenum pname, GLfloat * params);

glGetObjectParameterfvARB

public void glGetObjectParameterfvARB(int target,
                                      int pname,
                                      float[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetObjectParameterfvARB(GLhandleARB target, GLenum pname, GLfloat * params);

glGetObjectParameterivARB

public void glGetObjectParameterivARB(int target,
                                      int pname,
                                      IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetObjectParameterivARB(GLhandleARB target, GLenum pname, GLint * params);

glGetObjectParameterivARB

public void glGetObjectParameterivARB(int target,
                                      int pname,
                                      int[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetObjectParameterivARB(GLhandleARB target, GLenum pname, GLint * params);

glGetOcclusionQueryivNV

public void glGetOcclusionQueryivNV(int target,
                                    int pname,
                                    IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetOcclusionQueryivNV(GLuint target, GLenum pname, GLint * params);

glGetOcclusionQueryivNV

public void glGetOcclusionQueryivNV(int target,
                                    int pname,
                                    int[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetOcclusionQueryivNV(GLuint target, GLenum pname, GLint * params);

glGetOcclusionQueryuivNV

public void glGetOcclusionQueryuivNV(int id,
                                     int pname,
                                     IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params);

glGetOcclusionQueryuivNV

public void glGetOcclusionQueryuivNV(int id,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params);

glGetPixelMapfv

public void glGetPixelMapfv(int map,
                            FloatBuffer values)

    Interface to C language function:
    void glGetPixelMapfv(GLenum map, GLfloat * values);

glGetPixelMapfv

public void glGetPixelMapfv(int map,
                            float[] values,
                            int values_offset)

    Interface to C language function:
    void glGetPixelMapfv(GLenum map, GLfloat * values);

glGetPixelMapfv

public void glGetPixelMapfv(int map,
                            long values_buffer_offset)

    Interface to C language function:
    void glGetPixelMapfv(GLenum map, GLfloat * values);

glGetPixelMapuiv

public void glGetPixelMapuiv(int map,
                             IntBuffer values)

    Interface to C language function:
    void glGetPixelMapuiv(GLenum map, GLuint * values);

glGetPixelMapuiv

public void glGetPixelMapuiv(int map,
                             int[] values,
                             int values_offset)

    Interface to C language function:
    void glGetPixelMapuiv(GLenum map, GLuint * values);

glGetPixelMapuiv

public void glGetPixelMapuiv(int map,
                             long values_buffer_offset)

    Interface to C language function:
    void glGetPixelMapuiv(GLenum map, GLuint * values);

glGetPixelMapusv

public void glGetPixelMapusv(int map,
                             ShortBuffer values)

    Interface to C language function:
    void glGetPixelMapusv(GLenum map, GLushort * values);

glGetPixelMapusv

public void glGetPixelMapusv(int map,
                             short[] values,
                             int values_offset)

    Interface to C language function:
    void glGetPixelMapusv(GLenum map, GLushort * values);

glGetPixelMapusv

public void glGetPixelMapusv(int map,
                             long values_buffer_offset)

    Interface to C language function:
    void glGetPixelMapusv(GLenum map, GLushort * values);

glGetPixelTexGenParameterfvSGIS

public void glGetPixelTexGenParameterfvSGIS(int pname,
                                            FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params);

glGetPixelTexGenParameterfvSGIS

public void glGetPixelTexGenParameterfvSGIS(int pname,
                                            float[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params);

glGetPixelTexGenParameterivSGIS

public void glGetPixelTexGenParameterivSGIS(int pname,
                                            IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params);

glGetPixelTexGenParameterivSGIS

public void glGetPixelTexGenParameterivSGIS(int pname,
                                            int[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params);

glGetPolygonStipple

public void glGetPolygonStipple(ByteBuffer mask)

    Interface to C language function:
    void glGetPolygonStipple(GLubyte * mask);

glGetPolygonStipple

public void glGetPolygonStipple(byte[] mask,
                                int mask_offset)

    Interface to C language function:
    void glGetPolygonStipple(GLubyte * mask);

glGetPolygonStipple

public void glGetPolygonStipple(long mask_buffer_offset)

    Interface to C language function:
    void glGetPolygonStipple(GLubyte * mask);

glGetProgramEnvParameterdvARB

public void glGetProgramEnvParameterdvARB(int index,
                                          int pname,
                                          DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramEnvParameterdvARB(GLenum index, GLuint pname, GLdouble * params);

glGetProgramEnvParameterdvARB

public void glGetProgramEnvParameterdvARB(int index,
                                          int pname,
                                          double[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramEnvParameterdvARB(GLenum index, GLuint pname, GLdouble * params);

glGetProgramEnvParameterfvARB

public void glGetProgramEnvParameterfvARB(int target,
                                          int pname,
                                          FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramEnvParameterfvARB(GLenum target, GLuint pname, GLfloat * params);

glGetProgramEnvParameterfvARB

public void glGetProgramEnvParameterfvARB(int target,
                                          int pname,
                                          float[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramEnvParameterfvARB(GLenum target, GLuint pname, GLfloat * params);

glGetProgramInfoLog

public void glGetProgramInfoLog(int program,
                                int bufSize,
                                IntBuffer length,
                                ByteBuffer infoLog)

    Entry point (through function pointer) to C language function:
    void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetProgramInfoLog

public void glGetProgramInfoLog(int program,
                                int bufSize,
                                int[] length,
                                int length_offset,
                                byte[] infoLog,
                                int infoLog_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetProgramLocalParameterdvARB

public void glGetProgramLocalParameterdvARB(int index,
                                            int pname,
                                            DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramLocalParameterdvARB(GLenum index, GLuint pname, GLdouble * params);

glGetProgramLocalParameterdvARB

public void glGetProgramLocalParameterdvARB(int index,
                                            int pname,
                                            double[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramLocalParameterdvARB(GLenum index, GLuint pname, GLdouble * params);

glGetProgramLocalParameterfvARB

public void glGetProgramLocalParameterfvARB(int target,
                                            int pname,
                                            FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramLocalParameterfvARB(GLenum target, GLuint pname, GLfloat * params);

glGetProgramLocalParameterfvARB

public void glGetProgramLocalParameterfvARB(int target,
                                            int pname,
                                            float[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramLocalParameterfvARB(GLenum target, GLuint pname, GLfloat * params);

glGetProgramNamedParameterdvNV

public void glGetProgramNamedParameterdvNV(int id,
                                           int len,
                                           String name,
                                           DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);

glGetProgramNamedParameterdvNV

public void glGetProgramNamedParameterdvNV(int id,
                                           int len,
                                           String name,
                                           double[] params,
                                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);

glGetProgramNamedParameterfvNV

public void glGetProgramNamedParameterfvNV(int id,
                                           int len,
                                           String name,
                                           FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);

glGetProgramNamedParameterfvNV

public void glGetProgramNamedParameterfvNV(int id,
                                           int len,
                                           String name,
                                           float[] params,
                                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);

glGetProgramParameterdvNV

public void glGetProgramParameterdvNV(int target,
                                      int index,
                                      int pname,
                                      DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params);

glGetProgramParameterdvNV

public void glGetProgramParameterdvNV(int target,
                                      int index,
                                      int pname,
                                      double[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params);

glGetProgramParameterfvNV

public void glGetProgramParameterfvNV(int stage,
                                      int portion,
                                      int pname,
                                      FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramParameterfvNV(GLenum stage, GLuint portion, GLenum pname, GLfloat * params);

glGetProgramParameterfvNV

public void glGetProgramParameterfvNV(int stage,
                                      int portion,
                                      int pname,
                                      float[] params,
                                      int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramParameterfvNV(GLenum stage, GLuint portion, GLenum pname, GLfloat * params);

glGetProgramStringARB

public void glGetProgramStringARB(int target,
                                  int pname,
                                  Buffer string)

    Entry point (through function pointer) to C language function:
    void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid * string);

    Parameters:
        string - a direct Buffer

glGetProgramStringNV

public void glGetProgramStringNV(int id,
                                 int pname,
                                 ByteBuffer program)

    Entry point (through function pointer) to C language function:
    void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program);

glGetProgramStringNV

public void glGetProgramStringNV(int id,
                                 int pname,
                                 byte[] program,
                                 int program_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program);

glGetProgramiv

public void glGetProgramiv(int target,
                           int pname,
                           IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramiv(GLuint target, GLenum pname, GLint * params);

glGetProgramiv

public void glGetProgramiv(int target,
                           int pname,
                           int[] params,
                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramiv(GLuint target, GLenum pname, GLint * params);

glGetProgramivARB

public void glGetProgramivARB(int target,
                              int pname,
                              IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramivARB(GLenum target, GLenum pname, GLint * params);

glGetProgramivARB

public void glGetProgramivARB(int target,
                              int pname,
                              int[] params,
                              int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramivARB(GLenum target, GLenum pname, GLint * params);

glGetProgramivNV

public void glGetProgramivNV(int target,
                             int pname,
                             IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetProgramivNV(GLuint target, GLenum pname, GLint * params);

glGetProgramivNV

public void glGetProgramivNV(int target,
                             int pname,
                             int[] params,
                             int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetProgramivNV(GLuint target, GLenum pname, GLint * params);

glGetQueryObjectiv

public void glGetQueryObjectiv(int target,
                               int pname,
                               IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectiv(GLuint target, GLenum pname, GLint * params);

glGetQueryObjectiv

public void glGetQueryObjectiv(int target,
                               int pname,
                               int[] params,
                               int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectiv(GLuint target, GLenum pname, GLint * params);

glGetQueryObjectivARB

public void glGetQueryObjectivARB(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectivARB(GLuint target, GLenum pname, GLint * params);

glGetQueryObjectivARB

public void glGetQueryObjectivARB(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectivARB(GLuint target, GLenum pname, GLint * params);

glGetQueryObjectuiv

public void glGetQueryObjectuiv(int id,
                                int pname,
                                IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);

glGetQueryObjectuiv

public void glGetQueryObjectuiv(int id,
                                int pname,
                                int[] params,
                                int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);

glGetQueryObjectuivARB

public void glGetQueryObjectuivARB(int id,
                                   int pname,
                                   IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params);

glGetQueryObjectuivARB

public void glGetQueryObjectuivARB(int id,
                                   int pname,
                                   int[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params);

glGetQueryiv

public void glGetQueryiv(int target,
                         int pname,
                         IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryiv(GLenum target, GLenum pname, GLint * params);

glGetQueryiv

public void glGetQueryiv(int target,
                         int pname,
                         int[] params,
                         int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryiv(GLenum target, GLenum pname, GLint * params);

glGetQueryivARB

public void glGetQueryivARB(int target,
                            int pname,
                            IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetQueryivARB(GLenum target, GLenum pname, GLint * params);

glGetQueryivARB

public void glGetQueryivARB(int target,
                            int pname,
                            int[] params,
                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetQueryivARB(GLenum target, GLenum pname, GLint * params);

glGetRenderbufferParameterivEXT

public void glGetRenderbufferParameterivEXT(int target,
                                            int pname,
                                            IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params);

glGetRenderbufferParameterivEXT

public void glGetRenderbufferParameterivEXT(int target,
                                            int pname,
                                            int[] params,
                                            int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params);

glGetSeparableFilter

public void glGetSeparableFilter(int target,
                                 int format,
                                 int type,
                                 Buffer row,
                                 Buffer column,
                                 Buffer span)

    Entry point (through function pointer) to C language function:
    void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span);

glGetSeparableFilter

public void glGetSeparableFilter(int target,
                                 int format,
                                 int type,
                                 long row_buffer_offset,
                                 long column_buffer_offset,
                                 long span_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span);

glGetShaderInfoLog

public void glGetShaderInfoLog(int program,
                               int bufSize,
                               IntBuffer length,
                               ByteBuffer infoLog)

    Entry point (through function pointer) to C language function:
    void glGetShaderInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetShaderInfoLog

public void glGetShaderInfoLog(int program,
                               int bufSize,
                               int[] length,
                               int length_offset,
                               byte[] infoLog,
                               int infoLog_offset)

    Entry point (through function pointer) to C language function:
    void glGetShaderInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetShaderSource

public void glGetShaderSource(int program,
                              int bufSize,
                              IntBuffer length,
                              ByteBuffer infoLog)

    Entry point (through function pointer) to C language function:
    void glGetShaderSource(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetShaderSource

public void glGetShaderSource(int program,
                              int bufSize,
                              int[] length,
                              int length_offset,
                              byte[] infoLog,
                              int infoLog_offset)

    Entry point (through function pointer) to C language function:
    void glGetShaderSource(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);

glGetShaderSourceARB

public void glGetShaderSourceARB(int program,
                                 int bufSize,
                                 IntBuffer length,
                                 ByteBuffer infoLog)

    Entry point (through function pointer) to C language function:
    void glGetShaderSourceARB(GLhandleARB program, GLsizei bufSize, GLsizei * length, GLcharARB * infoLog);

glGetShaderSourceARB

public void glGetShaderSourceARB(int program,
                                 int bufSize,
                                 int[] length,
                                 int length_offset,
                                 byte[] infoLog,
                                 int infoLog_offset)

    Entry point (through function pointer) to C language function:
    void glGetShaderSourceARB(GLhandleARB program, GLsizei bufSize, GLsizei * length, GLcharARB * infoLog);

glGetShaderiv

public void glGetShaderiv(int target,
                          int pname,
                          IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetShaderiv(GLuint target, GLenum pname, GLint * params);

glGetShaderiv

public void glGetShaderiv(int target,
                          int pname,
                          int[] params,
                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetShaderiv(GLuint target, GLenum pname, GLint * params);

glGetSharpenTexFuncSGIS

public void glGetSharpenTexFuncSGIS(int pname,
                                    FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetSharpenTexFuncSGIS(GLenum pname, GLfloat * params);

glGetSharpenTexFuncSGIS

public void glGetSharpenTexFuncSGIS(int pname,
                                    float[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetSharpenTexFuncSGIS(GLenum pname, GLfloat * params);

glGetString

public String glGetString(int name)

    Interface to C language function:
    const GLubyte * glGetString(GLenum name);

glGetTexBumpParameterfvATI

public void glGetTexBumpParameterfvATI(int pname,
                                       FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetTexBumpParameterfvATI(GLenum pname, GLfloat * params);

glGetTexBumpParameterfvATI

public void glGetTexBumpParameterfvATI(int pname,
                                       float[] params,
                                       int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetTexBumpParameterfvATI(GLenum pname, GLfloat * params);

glGetTexBumpParameterivATI

public void glGetTexBumpParameterivATI(int pname,
                                       IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetTexBumpParameterivATI(GLenum pname, GLint * params);

glGetTexBumpParameterivATI

public void glGetTexBumpParameterivATI(int pname,
                                       int[] params,
                                       int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetTexBumpParameterivATI(GLenum pname, GLint * params);

glGetTexEnvfv

public void glGetTexEnvfv(int target,
                          int pname,
                          FloatBuffer params)

    Interface to C language function:
    void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params);

glGetTexEnvfv

public void glGetTexEnvfv(int target,
                          int pname,
                          float[] params,
                          int params_offset)

    Interface to C language function:
    void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params);

glGetTexEnviv

public void glGetTexEnviv(int target,
                          int pname,
                          IntBuffer params)

    Interface to C language function:
    void glGetTexEnviv(GLenum target, GLenum pname, GLint * params);

glGetTexEnviv

public void glGetTexEnviv(int target,
                          int pname,
                          int[] params,
                          int params_offset)

    Interface to C language function:
    void glGetTexEnviv(GLenum target, GLenum pname, GLint * params);

glGetTexFilterFuncSGIS

public void glGetTexFilterFuncSGIS(int target,
                                   int pname,
                                   FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetTexFilterFuncSGIS(GLenum target, GLenum pname, GLfloat * params);

glGetTexFilterFuncSGIS

public void glGetTexFilterFuncSGIS(int target,
                                   int pname,
                                   float[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetTexFilterFuncSGIS(GLenum target, GLenum pname, GLfloat * params);

glGetTexGendv

public void glGetTexGendv(int coord,
                          int pname,
                          DoubleBuffer params)

    Interface to C language function:
    void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params);

glGetTexGendv

public void glGetTexGendv(int coord,
                          int pname,
                          double[] params,
                          int params_offset)

    Interface to C language function:
    void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params);

glGetTexGenfv

public void glGetTexGenfv(int coord,
                          int pname,
                          FloatBuffer params)

    Interface to C language function:
    void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params);

glGetTexGenfv

public void glGetTexGenfv(int coord,
                          int pname,
                          float[] params,
                          int params_offset)

    Interface to C language function:
    void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params);

glGetTexGeniv

public void glGetTexGeniv(int coord,
                          int pname,
                          IntBuffer params)

    Interface to C language function:
    void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params);

glGetTexGeniv

public void glGetTexGeniv(int coord,
                          int pname,
                          int[] params,
                          int params_offset)

    Interface to C language function:
    void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params);

glGetTexImage

public void glGetTexImage(int target,
                          int level,
                          int format,
                          int type,
                          Buffer pixels)

    Interface to C language function:
    void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);

glGetTexImage

public void glGetTexImage(int target,
                          int level,
                          int format,
                          int type,
                          long pixels_buffer_offset)

    Interface to C language function:
    void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);

glGetTexLevelParameterfv

public void glGetTexLevelParameterfv(int target,
                                     int level,
                                     int pname,
                                     FloatBuffer params)

    Interface to C language function:
    void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);

glGetTexLevelParameterfv

public void glGetTexLevelParameterfv(int target,
                                     int level,
                                     int pname,
                                     float[] params,
                                     int params_offset)

    Interface to C language function:
    void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);

glGetTexLevelParameteriv

public void glGetTexLevelParameteriv(int target,
                                     int level,
                                     int pname,
                                     IntBuffer params)

    Interface to C language function:
    void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);

glGetTexLevelParameteriv

public void glGetTexLevelParameteriv(int target,
                                     int level,
                                     int pname,
                                     int[] params,
                                     int params_offset)

    Interface to C language function:
    void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);

glGetTexParameterfv

public void glGetTexParameterfv(int target,
                                int pname,
                                FloatBuffer params)

    Interface to C language function:
    void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetTexParameterfv

public void glGetTexParameterfv(int target,
                                int pname,
                                float[] params,
                                int params_offset)

    Interface to C language function:
    void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);

glGetTexParameteriv

public void glGetTexParameteriv(int target,
                                int pname,
                                IntBuffer params)

    Interface to C language function:
    void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params);

glGetTexParameteriv

public void glGetTexParameteriv(int target,
                                int pname,
                                int[] params,
                                int params_offset)

    Interface to C language function:
    void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params);

glGetTrackMatrixivNV

public void glGetTrackMatrixivNV(int stage,
                                 int portion,
                                 int pname,
                                 IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetTrackMatrixivNV(GLenum stage, GLuint portion, GLenum pname, GLint * params);

glGetTrackMatrixivNV

public void glGetTrackMatrixivNV(int stage,
                                 int portion,
                                 int pname,
                                 int[] params,
                                 int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetTrackMatrixivNV(GLenum stage, GLuint portion, GLenum pname, GLint * params);

glGetUniformLocation

public int glGetUniformLocation(int program,
                                String name)

    Entry point (through function pointer) to C language function:
    GLint glGetUniformLocation(GLuint program, const GLchar * name);

glGetUniformLocationARB

public int glGetUniformLocationARB(int program,
                                   String name)

    Entry point (through function pointer) to C language function:
    GLint glGetUniformLocationARB(GLhandleARB program, const GLcharARB * name);

glGetUniformfv

public void glGetUniformfv(int program,
                           int location,
                           FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetUniformfv(GLuint program, GLint location, GLfloat * params);

glGetUniformfv

public void glGetUniformfv(int program,
                           int location,
                           float[] params,
                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetUniformfv(GLuint program, GLint location, GLfloat * params);

glGetUniformfvARB

public void glGetUniformfvARB(int program,
                              int location,
                              FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetUniformfvARB(GLhandleARB program, GLint location, GLfloat * params);

glGetUniformfvARB

public void glGetUniformfvARB(int program,
                              int location,
                              float[] params,
                              int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetUniformfvARB(GLhandleARB program, GLint location, GLfloat * params);

glGetUniformiv

public void glGetUniformiv(int program,
                           int location,
                           IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetUniformiv(GLuint program, GLint location, GLint * params);

glGetUniformiv

public void glGetUniformiv(int program,
                           int location,
                           int[] params,
                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetUniformiv(GLuint program, GLint location, GLint * params);

glGetUniformivARB

public void glGetUniformivARB(int program,
                              int location,
                              IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetUniformivARB(GLhandleARB program, GLint location, GLint * params);

glGetUniformivARB

public void glGetUniformivARB(int program,
                              int location,
                              int[] params,
                              int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetUniformivARB(GLhandleARB program, GLint location, GLint * params);

glGetVariantArrayObjectfvATI

public void glGetVariantArrayObjectfvATI(int target,
                                         int pname,
                                         FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVariantArrayObjectfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetVariantArrayObjectfvATI

public void glGetVariantArrayObjectfvATI(int target,
                                         int pname,
                                         float[] params,
                                         int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVariantArrayObjectfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetVariantArrayObjectivATI

public void glGetVariantArrayObjectivATI(int target,
                                         int pname,
                                         IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVariantArrayObjectivATI(GLuint target, GLenum pname, GLint * params);

glGetVariantArrayObjectivATI

public void glGetVariantArrayObjectivATI(int target,
                                         int pname,
                                         int[] params,
                                         int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVariantArrayObjectivATI(GLuint target, GLenum pname, GLint * params);

glGetVariantBooleanvEXT

public void glGetVariantBooleanvEXT(int id,
                                    int pname,
                                    ByteBuffer program)

    Entry point (through function pointer) to C language function:
    void glGetVariantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetVariantBooleanvEXT

public void glGetVariantBooleanvEXT(int id,
                                    int pname,
                                    byte[] program,
                                    int program_offset)

    Entry point (through function pointer) to C language function:
    void glGetVariantBooleanvEXT(GLuint id, GLenum pname, GLboolean * program);

glGetVariantFloatvEXT

public void glGetVariantFloatvEXT(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVariantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetVariantFloatvEXT

public void glGetVariantFloatvEXT(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVariantFloatvEXT(GLuint target, GLenum pname, GLfloat * params);

glGetVariantIntegervEXT

public void glGetVariantIntegervEXT(int target,
                                    int pname,
                                    IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVariantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetVariantIntegervEXT

public void glGetVariantIntegervEXT(int target,
                                    int pname,
                                    int[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVariantIntegervEXT(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribArrayObjectfvATI

public void glGetVertexAttribArrayObjectfvATI(int target,
                                              int pname,
                                              FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribArrayObjectfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribArrayObjectfvATI

public void glGetVertexAttribArrayObjectfvATI(int target,
                                              int pname,
                                              float[] params,
                                              int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribArrayObjectfvATI(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribArrayObjectivATI

public void glGetVertexAttribArrayObjectivATI(int target,
                                              int pname,
                                              IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribArrayObjectivATI(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribArrayObjectivATI

public void glGetVertexAttribArrayObjectivATI(int target,
                                              int pname,
                                              int[] params,
                                              int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribArrayObjectivATI(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribdv

public void glGetVertexAttribdv(int index,
                                int pname,
                                DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribdv

public void glGetVertexAttribdv(int index,
                                int pname,
                                double[] params,
                                int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribdvARB

public void glGetVertexAttribdvARB(int index,
                                   int pname,
                                   DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribdvARB

public void glGetVertexAttribdvARB(int index,
                                   int pname,
                                   double[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribdvNV

public void glGetVertexAttribdvNV(int index,
                                  int pname,
                                  DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribdvNV

public void glGetVertexAttribdvNV(int index,
                                  int pname,
                                  double[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params);

glGetVertexAttribfv

public void glGetVertexAttribfv(int target,
                                int pname,
                                FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfv(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribfv

public void glGetVertexAttribfv(int target,
                                int pname,
                                float[] params,
                                int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfv(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribfvARB

public void glGetVertexAttribfvARB(int target,
                                   int pname,
                                   FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfvARB(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribfvARB

public void glGetVertexAttribfvARB(int target,
                                   int pname,
                                   float[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfvARB(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribfvNV

public void glGetVertexAttribfvNV(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfvNV(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribfvNV

public void glGetVertexAttribfvNV(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribfvNV(GLuint target, GLenum pname, GLfloat * params);

glGetVertexAttribiv

public void glGetVertexAttribiv(int target,
                                int pname,
                                IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribiv(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribiv

public void glGetVertexAttribiv(int target,
                                int pname,
                                int[] params,
                                int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribiv(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribivARB

public void glGetVertexAttribivARB(int target,
                                   int pname,
                                   IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribivARB(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribivARB

public void glGetVertexAttribivARB(int target,
                                   int pname,
                                   int[] params,
                                   int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribivARB(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribivNV

public void glGetVertexAttribivNV(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribivNV(GLuint target, GLenum pname, GLint * params);

glGetVertexAttribivNV

public void glGetVertexAttribivNV(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glGetVertexAttribivNV(GLuint target, GLenum pname, GLint * params);

glGlobalAlphaFactorbSUN

public void glGlobalAlphaFactorbSUN(byte factor)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactorbSUN(GLbyte factor);

glGlobalAlphaFactordSUN

public void glGlobalAlphaFactordSUN(double coord)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactordSUN(GLdouble coord);

glGlobalAlphaFactorfSUN

public void glGlobalAlphaFactorfSUN(float coord)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactorfSUN(GLfloat coord);

glGlobalAlphaFactoriSUN

public void glGlobalAlphaFactoriSUN(int count)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactoriSUN(GLint count);

glGlobalAlphaFactorsSUN

public void glGlobalAlphaFactorsSUN(short factor)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactorsSUN(GLshort factor);

glGlobalAlphaFactorubSUN

public void glGlobalAlphaFactorubSUN(byte factor)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactorubSUN(GLubyte factor);

glGlobalAlphaFactoruiSUN

public void glGlobalAlphaFactoruiSUN(int mode)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactoruiSUN(GLuint mode);

glGlobalAlphaFactorusSUN

public void glGlobalAlphaFactorusSUN(short factor)

    Entry point (through function pointer) to C language function:
    void glGlobalAlphaFactorusSUN(GLushort factor);

glHint

public void glHint(int target,
                   int mode)

    Interface to C language function:
    void glHint(GLenum target, GLenum mode);

glHintPGI

public void glHintPGI(int target,
                      int s)

    Entry point (through function pointer) to C language function:
    void glHintPGI(GLenum target, GLint s);

glHistogram

public void glHistogram(int target,
                        int width,
                        int internalformat,
                        boolean sink)

    Entry point (through function pointer) to C language function:
    void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);

glIglooInterfaceSGIX

public void glIglooInterfaceSGIX(int pname,
                                 Buffer params)

    Entry point (through function pointer) to C language function:
    void glIglooInterfaceSGIX(GLenum pname, const GLvoid * params);

glImageTransformParameterfHP

public void glImageTransformParameterfHP(int target,
                                         int pname,
                                         float params)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat params);

glImageTransformParameterfvHP

public void glImageTransformParameterfvHP(int target,
                                          int pname,
                                          FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params);

glImageTransformParameterfvHP

public void glImageTransformParameterfvHP(int target,
                                          int pname,
                                          float[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params);

glImageTransformParameteriHP

public void glImageTransformParameteriHP(int target,
                                         int pname,
                                         int params)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint params);

glImageTransformParameterivHP

public void glImageTransformParameterivHP(int target,
                                          int pname,
                                          IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params);

glImageTransformParameterivHP

public void glImageTransformParameterivHP(int target,
                                          int pname,
                                          int[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params);

glIndexFuncEXT

public void glIndexFuncEXT(int target,
                           float s)

    Entry point (through function pointer) to C language function:
    void glIndexFuncEXT(GLenum target, GLclampf s);

glIndexMask

public void glIndexMask(int mask)

    Interface to C language function:
    void glIndexMask(GLuint mask);

glIndexMaterialEXT

public void glIndexMaterialEXT(int target,
                               int id)

    Entry point (through function pointer) to C language function:
    void glIndexMaterialEXT(GLenum target, GLenum id);

glIndexPointer

public void glIndexPointer(int type,
                           int stride,
                           Buffer ptr)

    Interface to C language function:
    void glIndexPointer(GLenum type, GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glIndexd

public void glIndexd(double c)

    Interface to C language function:
    void glIndexd(GLdouble c);

glIndexdv

public void glIndexdv(DoubleBuffer c)

    Interface to C language function:
    void glIndexdv(const GLdouble * c);

glIndexdv

public void glIndexdv(double[] c,
                      int c_offset)

    Interface to C language function:
    void glIndexdv(const GLdouble * c);

glIndexf

public void glIndexf(float c)

    Interface to C language function:
    void glIndexf(GLfloat c);

glIndexfv

public void glIndexfv(FloatBuffer c)

    Interface to C language function:
    void glIndexfv(const GLfloat * c);

glIndexfv

public void glIndexfv(float[] c,
                      int c_offset)

    Interface to C language function:
    void glIndexfv(const GLfloat * c);

glIndexi

public void glIndexi(int c)

    Interface to C language function:
    void glIndexi(GLint c);

glIndexiv

public void glIndexiv(IntBuffer c)

    Interface to C language function:
    void glIndexiv(const GLint * c);

glIndexiv

public void glIndexiv(int[] c,
                      int c_offset)

    Interface to C language function:
    void glIndexiv(const GLint * c);

glIndexs

public void glIndexs(short c)

    Interface to C language function:
    void glIndexs(GLshort c);

glIndexsv

public void glIndexsv(ShortBuffer c)

    Interface to C language function:
    void glIndexsv(const GLshort * c);

glIndexsv

public void glIndexsv(short[] c,
                      int c_offset)

    Interface to C language function:
    void glIndexsv(const GLshort * c);

glIndexub

public void glIndexub(byte c)

    Interface to C language function:
    void glIndexub(GLubyte c);

glIndexubv

public void glIndexubv(ByteBuffer c)

    Interface to C language function:
    void glIndexubv(const GLubyte * c);

glIndexubv

public void glIndexubv(byte[] c,
                       int c_offset)

    Interface to C language function:
    void glIndexubv(const GLubyte * c);

glInitNames

public void glInitNames()

    Interface to C language function:
    void glInitNames(void);

glInsertComponentEXT

public void glInsertComponentEXT(int red,
                                 int green,
                                 int blue)

    Entry point (through function pointer) to C language function:
    void glInsertComponentEXT(GLuint red, GLuint green, GLuint blue);

glInstrumentsBufferSGIX

public void glInstrumentsBufferSGIX(int size,
                                    IntBuffer buffer)

    Entry point (through function pointer) to C language function:
    void glInstrumentsBufferSGIX(GLsizei size, GLint * buffer);

glInstrumentsBufferSGIX

public void glInstrumentsBufferSGIX(int size,
                                    int[] buffer,
                                    int buffer_offset)

    Entry point (through function pointer) to C language function:
    void glInstrumentsBufferSGIX(GLsizei size, GLint * buffer);

glInterleavedArrays

public void glInterleavedArrays(int format,
                                int stride,
                                Buffer pointer)

    Interface to C language function:
    void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer);

glInterleavedArrays

public void glInterleavedArrays(int format,
                                int stride,
                                long pointer_buffer_offset)

    Interface to C language function:
    void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer);

glIsAsyncMarkerSGIX

public boolean glIsAsyncMarkerSGIX(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsAsyncMarkerSGIX(GLuint id);

glIsBuffer

public boolean glIsBuffer(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsBuffer(GLuint id);

glIsBufferARB

public boolean glIsBufferARB(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsBufferARB(GLuint id);

glIsEnabled

public boolean glIsEnabled(int cap)

    Interface to C language function:
    GLboolean glIsEnabled(GLenum cap);

glIsFenceAPPLE

public boolean glIsFenceAPPLE(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsFenceAPPLE(GLuint id);

glIsFenceNV

public boolean glIsFenceNV(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsFenceNV(GLuint id);

glIsFramebufferEXT

public boolean glIsFramebufferEXT(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsFramebufferEXT(GLuint id);

glIsList

public boolean glIsList(int list)

    Interface to C language function:
    GLboolean glIsList(GLuint list);

glIsObjectBufferATI

public boolean glIsObjectBufferATI(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsObjectBufferATI(GLuint id);

glIsOcclusionQueryNV

public boolean glIsOcclusionQueryNV(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsOcclusionQueryNV(GLuint id);

glIsProgram

public boolean glIsProgram(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsProgram(GLuint id);

glIsProgramARB

public boolean glIsProgramARB(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsProgramARB(GLuint id);

glIsProgramNV

public boolean glIsProgramNV(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsProgramNV(GLuint id);

glIsQuery

public boolean glIsQuery(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsQuery(GLuint id);

glIsQueryARB

public boolean glIsQueryARB(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsQueryARB(GLuint id);

glIsRenderbufferEXT

public boolean glIsRenderbufferEXT(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsRenderbufferEXT(GLuint id);

glIsShader

public boolean glIsShader(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsShader(GLuint id);

glIsTexture

public boolean glIsTexture(int texture)

    Interface to C language function:
    GLboolean glIsTexture(GLuint texture);

glIsVariantEnabledEXT

public boolean glIsVariantEnabledEXT(int id,
                                     int cap)

    Entry point (through function pointer) to C language function:
    GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap);

glIsVertexArrayAPPLE

public boolean glIsVertexArrayAPPLE(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glIsVertexArrayAPPLE(GLuint id);

glIsVertexAttribEnabledAPPLE

public boolean glIsVertexAttribEnabledAPPLE(int index,
                                            int pname)

    Entry point (through function pointer) to C language function:
    GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);

glLightEnviSGIX

public void glLightEnviSGIX(int target,
                            int s)

    Entry point (through function pointer) to C language function:
    void glLightEnviSGIX(GLenum target, GLint s);

glLightModelf

public void glLightModelf(int pname,
                          float param)

    Interface to C language function:
    void glLightModelf(GLenum pname, GLfloat param);

glLightModelfv

public void glLightModelfv(int pname,
                           FloatBuffer params)

    Interface to C language function:
    void glLightModelfv(GLenum pname, const GLfloat * params);

glLightModelfv

public void glLightModelfv(int pname,
                           float[] params,
                           int params_offset)

    Interface to C language function:
    void glLightModelfv(GLenum pname, const GLfloat * params);

glLightModeli

public void glLightModeli(int pname,
                          int param)

    Interface to C language function:
    void glLightModeli(GLenum pname, GLint param);

glLightModeliv

public void glLightModeliv(int pname,
                           IntBuffer params)

    Interface to C language function:
    void glLightModeliv(GLenum pname, const GLint * params);

glLightModeliv

public void glLightModeliv(int pname,
                           int[] params,
                           int params_offset)

    Interface to C language function:
    void glLightModeliv(GLenum pname, const GLint * params);

glLightf

public void glLightf(int light,
                     int pname,
                     float param)

    Interface to C language function:
    void glLightf(GLenum light, GLenum pname, GLfloat param);

glLightfv

public void glLightfv(int light,
                      int pname,
                      FloatBuffer params)

    Interface to C language function:
    void glLightfv(GLenum light, GLenum pname, const GLfloat * params);

glLightfv

public void glLightfv(int light,
                      int pname,
                      float[] params,
                      int params_offset)

    Interface to C language function:
    void glLightfv(GLenum light, GLenum pname, const GLfloat * params);

glLighti

public void glLighti(int light,
                     int pname,
                     int param)

    Interface to C language function:
    void glLighti(GLenum light, GLenum pname, GLint param);

glLightiv

public void glLightiv(int light,
                      int pname,
                      IntBuffer params)

    Interface to C language function:
    void glLightiv(GLenum light, GLenum pname, const GLint * params);

glLightiv

public void glLightiv(int light,
                      int pname,
                      int[] params,
                      int params_offset)

    Interface to C language function:
    void glLightiv(GLenum light, GLenum pname, const GLint * params);

glLineStipple

public void glLineStipple(int factor,
                          short pattern)

    Interface to C language function:
    void glLineStipple(GLint factor, GLushort pattern);

glLineWidth

public void glLineWidth(float width)

    Interface to C language function:
    void glLineWidth(GLfloat width);

glLinkProgram

public void glLinkProgram(int mode)

    Entry point (through function pointer) to C language function:
    void glLinkProgram(GLuint mode);

glLinkProgramARB

public void glLinkProgramARB(int mode)

    Entry point (through function pointer) to C language function:
    void glLinkProgramARB(GLhandleARB mode);

glListBase

public void glListBase(int base)

    Interface to C language function:
    void glListBase(GLuint base);

glListParameterfSGIX

public void glListParameterfSGIX(int target,
                                 int pname,
                                 float params)

    Entry point (through function pointer) to C language function:
    void glListParameterfSGIX(GLuint target, GLenum pname, GLfloat params);

glListParameterfvSGIX

public void glListParameterfvSGIX(int target,
                                  int pname,
                                  FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glListParameterfvSGIX(GLuint target, GLenum pname, const GLfloat * params);

glListParameterfvSGIX

public void glListParameterfvSGIX(int target,
                                  int pname,
                                  float[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glListParameterfvSGIX(GLuint target, GLenum pname, const GLfloat * params);

glListParameteriSGIX

public void glListParameteriSGIX(int target,
                                 int pname,
                                 int params)

    Entry point (through function pointer) to C language function:
    void glListParameteriSGIX(GLuint target, GLenum pname, GLint params);

glListParameterivSGIX

public void glListParameterivSGIX(int target,
                                  int pname,
                                  IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glListParameterivSGIX(GLuint target, GLenum pname, const GLint * params);

glListParameterivSGIX

public void glListParameterivSGIX(int target,
                                  int pname,
                                  int[] params,
                                  int params_offset)

    Entry point (through function pointer) to C language function:
    void glListParameterivSGIX(GLuint target, GLenum pname, const GLint * params);

glLoadIdentity

public void glLoadIdentity()

    Interface to C language function:
    void glLoadIdentity(void);

glLoadIdentityDeformationMapSGIX

public void glLoadIdentityDeformationMapSGIX(int mode)

    Entry point (through function pointer) to C language function:
    void glLoadIdentityDeformationMapSGIX(GLbitfield mode);

glLoadMatrixd

public void glLoadMatrixd(DoubleBuffer m)

    Interface to C language function:
    void glLoadMatrixd(const GLdouble * m);

glLoadMatrixd

public void glLoadMatrixd(double[] m,
                          int m_offset)

    Interface to C language function:
    void glLoadMatrixd(const GLdouble * m);

glLoadMatrixf

public void glLoadMatrixf(FloatBuffer m)

    Interface to C language function:
    void glLoadMatrixf(const GLfloat * m);

glLoadMatrixf

public void glLoadMatrixf(float[] m,
                          int m_offset)

    Interface to C language function:
    void glLoadMatrixf(const GLfloat * m);

glLoadName

public void glLoadName(int name)

    Interface to C language function:
    void glLoadName(GLuint name);

glLoadProgramNV

public void glLoadProgramNV(int target,
                            int id,
                            int len,
                            String program)

    Entry point (through function pointer) to C language function:
    void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program);

glLoadTransposeMatrixd

public void glLoadTransposeMatrixd(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glLoadTransposeMatrixd(const GLdouble * m);

glLoadTransposeMatrixd

public void glLoadTransposeMatrixd(double[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glLoadTransposeMatrixd(const GLdouble * m);

glLoadTransposeMatrixf

public void glLoadTransposeMatrixf(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glLoadTransposeMatrixf(const GLfloat * m);

glLoadTransposeMatrixf

public void glLoadTransposeMatrixf(float[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glLoadTransposeMatrixf(const GLfloat * m);

glLockArraysEXT

public void glLockArraysEXT(int x,
                            int y)

    Entry point (through function pointer) to C language function:
    void glLockArraysEXT(GLint x, GLsizei y);

glLogicOp

public void glLogicOp(int opcode)

    Interface to C language function:
    void glLogicOp(GLenum opcode);

glMap1d

public void glMap1d(int target,
                    double u1,
                    double u2,
                    int stride,
                    int order,
                    DoubleBuffer points)

    Interface to C language function:
    void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);

glMap1d

public void glMap1d(int target,
                    double u1,
                    double u2,
                    int stride,
                    int order,
                    double[] points,
                    int points_offset)

    Interface to C language function:
    void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);

glMap1f

public void glMap1f(int target,
                    float u1,
                    float u2,
                    int stride,
                    int order,
                    FloatBuffer points)

    Interface to C language function:
    void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);

glMap1f

public void glMap1f(int target,
                    float u1,
                    float u2,
                    int stride,
                    int order,
                    float[] points,
                    int points_offset)

    Interface to C language function:
    void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);

glMap2d

public void glMap2d(int target,
                    double u1,
                    double u2,
                    int ustride,
                    int uorder,
                    double v1,
                    double v2,
                    int vstride,
                    int vorder,
                    DoubleBuffer points)

    Interface to C language function:
    void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);

glMap2d

public void glMap2d(int target,
                    double u1,
                    double u2,
                    int ustride,
                    int uorder,
                    double v1,
                    double v2,
                    int vstride,
                    int vorder,
                    double[] points,
                    int points_offset)

    Interface to C language function:
    void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);

glMap2f

public void glMap2f(int target,
                    float u1,
                    float u2,
                    int ustride,
                    int uorder,
                    float v1,
                    float v2,
                    int vstride,
                    int vorder,
                    FloatBuffer points)

    Interface to C language function:
    void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);

glMap2f

public void glMap2f(int target,
                    float u1,
                    float u2,
                    int ustride,
                    int uorder,
                    float v1,
                    float v2,
                    int vstride,
                    int vorder,
                    float[] points,
                    int points_offset)

    Interface to C language function:
    void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);

glMapBuffer

public ByteBuffer glMapBuffer(int target,
                              int access)

    Interface to C language function:
    GLvoid * glMapBuffer(GLenum target, GLenum access);

glMapBufferARB

public ByteBuffer glMapBufferARB(int target,
                                 int access)

    Interface to C language function:
    GLvoid * glMapBufferARB(GLenum target, GLenum access);

glMapControlPointsNV

public void glMapControlPointsNV(int target,
                                 int index,
                                 int type,
                                 int ustride,
                                 int vstride,
                                 int uorder,
                                 int vorder,
                                 boolean packed,
                                 Buffer points)

    Entry point (through function pointer) to C language function:
    void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid * points);

glMapGrid1d

public void glMapGrid1d(int un,
                        double u1,
                        double u2)

    Interface to C language function:
    void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);

glMapGrid1f

public void glMapGrid1f(int un,
                        float u1,
                        float u2)

    Interface to C language function:
    void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);

glMapGrid2d

public void glMapGrid2d(int un,
                        double u1,
                        double u2,
                        int vn,
                        double v1,
                        double v2)

    Interface to C language function:
    void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);

glMapGrid2f

public void glMapGrid2f(int un,
                        float u1,
                        float u2,
                        int vn,
                        float v1,
                        float v2)

    Interface to C language function:
    void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);

glMapParameterfvNV

public void glMapParameterfvNV(int target,
                               int pname,
                               FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params);

glMapParameterfvNV

public void glMapParameterfvNV(int target,
                               int pname,
                               float[] params,
                               int params_offset)

    Entry point (through function pointer) to C language function:
    void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params);

glMapParameterivNV

public void glMapParameterivNV(int target,
                               int pname,
                               IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glMapParameterivNV(GLenum target, GLenum pname, const GLint * params);

glMapParameterivNV

public void glMapParameterivNV(int target,
                               int pname,
                               int[] params,
                               int params_offset)

    Entry point (through function pointer) to C language function:
    void glMapParameterivNV(GLenum target, GLenum pname, const GLint * params);

glMapVertexAttrib1dAPPLE

public void glMapVertexAttrib1dAPPLE(int index,
                                     int size,
                                     double u1,
                                     double u2,
                                     int stride,
                                     int order,
                                     DoubleBuffer points)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);

glMapVertexAttrib1dAPPLE

public void glMapVertexAttrib1dAPPLE(int index,
                                     int size,
                                     double u1,
                                     double u2,
                                     int stride,
                                     int order,
                                     double[] points,
                                     int points_offset)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);

glMapVertexAttrib1fAPPLE

public void glMapVertexAttrib1fAPPLE(int index,
                                     int size,
                                     float u1,
                                     float u2,
                                     int stride,
                                     int order,
                                     FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);

glMapVertexAttrib1fAPPLE

public void glMapVertexAttrib1fAPPLE(int index,
                                     int size,
                                     float u1,
                                     float u2,
                                     int stride,
                                     int order,
                                     float[] points,
                                     int points_offset)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);

glMapVertexAttrib2dAPPLE

public void glMapVertexAttrib2dAPPLE(int index,
                                     int size,
                                     double u1,
                                     double u2,
                                     int ustride,
                                     int uorder,
                                     double v1,
                                     double v2,
                                     int vstride,
                                     int vorder,
                                     DoubleBuffer points)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);

glMapVertexAttrib2dAPPLE

public void glMapVertexAttrib2dAPPLE(int index,
                                     int size,
                                     double u1,
                                     double u2,
                                     int ustride,
                                     int uorder,
                                     double v1,
                                     double v2,
                                     int vstride,
                                     int vorder,
                                     double[] points,
                                     int points_offset)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);

glMapVertexAttrib2fAPPLE

public void glMapVertexAttrib2fAPPLE(int index,
                                     int size,
                                     float u1,
                                     float u2,
                                     int ustride,
                                     int uorder,
                                     float v1,
                                     float v2,
                                     int vstride,
                                     int vorder,
                                     FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);

glMapVertexAttrib2fAPPLE

public void glMapVertexAttrib2fAPPLE(int index,
                                     int size,
                                     float u1,
                                     float u2,
                                     int ustride,
                                     int uorder,
                                     float v1,
                                     float v2,
                                     int vstride,
                                     int vorder,
                                     float[] points,
                                     int points_offset)

    Entry point (through function pointer) to C language function:
    void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);

glMaterialf

public void glMaterialf(int face,
                        int pname,
                        float param)

    Interface to C language function:
    void glMaterialf(GLenum face, GLenum pname, GLfloat param);

glMaterialfv

public void glMaterialfv(int face,
                         int pname,
                         FloatBuffer params)

    Interface to C language function:
    void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params);

glMaterialfv

public void glMaterialfv(int face,
                         int pname,
                         float[] params,
                         int params_offset)

    Interface to C language function:
    void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params);

glMateriali

public void glMateriali(int face,
                        int pname,
                        int param)

    Interface to C language function:
    void glMateriali(GLenum face, GLenum pname, GLint param);

glMaterialiv

public void glMaterialiv(int face,
                         int pname,
                         IntBuffer params)

    Interface to C language function:
    void glMaterialiv(GLenum face, GLenum pname, const GLint * params);

glMaterialiv

public void glMaterialiv(int face,
                         int pname,
                         int[] params,
                         int params_offset)

    Interface to C language function:
    void glMaterialiv(GLenum face, GLenum pname, const GLint * params);

glMatrixIndexPointerARB

public void glMatrixIndexPointerARB(int size,
                                    int type,
                                    int stride,
                                    Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glMatrixIndexPointerARB

public void glMatrixIndexPointerARB(int size,
                                    int type,
                                    int stride,
                                    long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

glMatrixIndexubvARB

public void glMatrixIndexubvARB(int size,
                                ByteBuffer weights)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexubvARB(GLint size, const GLubyte * weights);

glMatrixIndexubvARB

public void glMatrixIndexubvARB(int size,
                                byte[] weights,
                                int weights_offset)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexubvARB(GLint size, const GLubyte * weights);

glMatrixIndexuivARB

public void glMatrixIndexuivARB(int n,
                                IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexuivARB(GLint n, const GLuint * ids);

glMatrixIndexuivARB

public void glMatrixIndexuivARB(int n,
                                int[] ids,
                                int ids_offset)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexuivARB(GLint n, const GLuint * ids);

glMatrixIndexusvARB

public void glMatrixIndexusvARB(int size,
                                ShortBuffer weights)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexusvARB(GLint size, const GLushort * weights);

glMatrixIndexusvARB

public void glMatrixIndexusvARB(int size,
                                short[] weights,
                                int weights_offset)

    Entry point (through function pointer) to C language function:
    void glMatrixIndexusvARB(GLint size, const GLushort * weights);

glMatrixMode

public void glMatrixMode(int mode)

    Interface to C language function:
    void glMatrixMode(GLenum mode);

glMinmax

public void glMinmax(int target,
                     int internalformat,
                     boolean sink)

    Entry point (through function pointer) to C language function:
    void glMinmax(GLenum target, GLenum internalformat, GLboolean sink);

glMultMatrixd

public void glMultMatrixd(DoubleBuffer m)

    Interface to C language function:
    void glMultMatrixd(const GLdouble * m);

glMultMatrixd

public void glMultMatrixd(double[] m,
                          int m_offset)

    Interface to C language function:
    void glMultMatrixd(const GLdouble * m);

glMultMatrixf

public void glMultMatrixf(FloatBuffer m)

    Interface to C language function:
    void glMultMatrixf(const GLfloat * m);

glMultMatrixf

public void glMultMatrixf(float[] m,
                          int m_offset)

    Interface to C language function:
    void glMultMatrixf(const GLfloat * m);

glMultTransposeMatrixd

public void glMultTransposeMatrixd(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glMultTransposeMatrixd(const GLdouble * m);

glMultTransposeMatrixd

public void glMultTransposeMatrixd(double[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glMultTransposeMatrixd(const GLdouble * m);

glMultTransposeMatrixf

public void glMultTransposeMatrixf(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glMultTransposeMatrixf(const GLfloat * m);

glMultTransposeMatrixf

public void glMultTransposeMatrixf(float[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glMultTransposeMatrixf(const GLfloat * m);

glMultiDrawArrays

public void glMultiDrawArrays(int mode,
                              IntBuffer first,
                              IntBuffer count,
                              int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawArrays(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount);

glMultiDrawArrays

public void glMultiDrawArrays(int mode,
                              int[] first,
                              int first_offset,
                              int[] count,
                              int count_offset,
                              int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawArrays(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount);

glMultiDrawArraysEXT

public void glMultiDrawArraysEXT(int mode,
                                 IntBuffer first,
                                 IntBuffer count,
                                 int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawArraysEXT(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount);

glMultiDrawArraysEXT

public void glMultiDrawArraysEXT(int mode,
                                 int[] first,
                                 int first_offset,
                                 int[] count,
                                 int count_offset,
                                 int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawArraysEXT(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount);

glMultiDrawElementArrayAPPLE

public void glMultiDrawElementArrayAPPLE(int mode,
                                         IntBuffer first,
                                         IntBuffer count,
                                         int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);

glMultiDrawElementArrayAPPLE

public void glMultiDrawElementArrayAPPLE(int mode,
                                         int[] first,
                                         int first_offset,
                                         int[] count,
                                         int count_offset,
                                         int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);

glMultiDrawElements

public void glMultiDrawElements(int mode,
                                IntBuffer count,
                                int type,
                                Buffer[] indices,
                                int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount);

glMultiDrawElements

public void glMultiDrawElements(int mode,
                                int[] count,
                                int count_offset,
                                int type,
                                Buffer[] indices,
                                int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount);

glMultiDrawElementsEXT

public void glMultiDrawElementsEXT(int mode,
                                   IntBuffer count,
                                   int type,
                                   Buffer[] indices,
                                   int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount);

glMultiDrawElementsEXT

public void glMultiDrawElementsEXT(int mode,
                                   int[] count,
                                   int count_offset,
                                   int type,
                                   Buffer[] indices,
                                   int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount);

glMultiDrawRangeElementArrayAPPLE

public void glMultiDrawRangeElementArrayAPPLE(int mode,
                                              int start,
                                              int end,
                                              IntBuffer first,
                                              IntBuffer count,
                                              int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);

glMultiDrawRangeElementArrayAPPLE

public void glMultiDrawRangeElementArrayAPPLE(int mode,
                                              int start,
                                              int end,
                                              int[] first,
                                              int first_offset,
                                              int[] count,
                                              int count_offset,
                                              int primcount)

    Entry point (through function pointer) to C language function:
    void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);

glMultiModeDrawArraysIBM

public void glMultiModeDrawArraysIBM(IntBuffer mode,
                                     IntBuffer first,
                                     IntBuffer count,
                                     int primcount,
                                     int modestride)

    Entry point (through function pointer) to C language function:
    void glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride);

glMultiModeDrawArraysIBM

public void glMultiModeDrawArraysIBM(int[] mode,
                                     int mode_offset,
                                     int[] first,
                                     int first_offset,
                                     int[] count,
                                     int count_offset,
                                     int primcount,
                                     int modestride)

    Entry point (through function pointer) to C language function:
    void glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride);

glMultiModeDrawElementsIBM

public void glMultiModeDrawElementsIBM(IntBuffer mode,
                                       IntBuffer count,
                                       int type,
                                       Buffer[] indices,
                                       int primcount,
                                       int modestride)

    Entry point (through function pointer) to C language function:
    void glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei primcount, GLint modestride);

glMultiModeDrawElementsIBM

public void glMultiModeDrawElementsIBM(int[] mode,
                                       int mode_offset,
                                       int[] count,
                                       int count_offset,
                                       int type,
                                       Buffer[] indices,
                                       int primcount,
                                       int modestride)

    Entry point (through function pointer) to C language function:
    void glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei primcount, GLint modestride);

glMultiTexCoord1d

public void glMultiTexCoord1d(int target,
                              double s)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1d(GLenum target, GLdouble s);

glMultiTexCoord1dv

public void glMultiTexCoord1dv(int target,
                               DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1dv(GLenum target, const GLdouble * v);

glMultiTexCoord1dv

public void glMultiTexCoord1dv(int target,
                               double[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1dv(GLenum target, const GLdouble * v);

glMultiTexCoord1f

public void glMultiTexCoord1f(int target,
                              float s)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1f(GLenum target, GLfloat s);

glMultiTexCoord1fv

public void glMultiTexCoord1fv(int target,
                               FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1fv(GLenum target, const GLfloat * v);

glMultiTexCoord1fv

public void glMultiTexCoord1fv(int target,
                               float[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1fv(GLenum target, const GLfloat * v);

glMultiTexCoord1hNV

public void glMultiTexCoord1hNV(int target,
                                short s)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1hNV(GLenum target, GLhalfNV s);

glMultiTexCoord1hvNV

public void glMultiTexCoord1hvNV(int index,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord1hvNV

public void glMultiTexCoord1hvNV(int index,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord1i

public void glMultiTexCoord1i(int target,
                              int s)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1i(GLenum target, GLint s);

glMultiTexCoord1iv

public void glMultiTexCoord1iv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1iv(GLenum target, const GLint * v);

glMultiTexCoord1iv

public void glMultiTexCoord1iv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1iv(GLenum target, const GLint * v);

glMultiTexCoord1s

public void glMultiTexCoord1s(int target,
                              short s)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1s(GLenum target, GLshort s);

glMultiTexCoord1sv

public void glMultiTexCoord1sv(int target,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1sv(GLenum target, const GLshort * v);

glMultiTexCoord1sv

public void glMultiTexCoord1sv(int target,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord1sv(GLenum target, const GLshort * v);

glMultiTexCoord2d

public void glMultiTexCoord2d(int target,
                              double s,
                              double t)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);

glMultiTexCoord2dv

public void glMultiTexCoord2dv(int target,
                               DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2dv(GLenum target, const GLdouble * v);

glMultiTexCoord2dv

public void glMultiTexCoord2dv(int target,
                               double[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2dv(GLenum target, const GLdouble * v);

glMultiTexCoord2f

public void glMultiTexCoord2f(int target,
                              float s,
                              float t)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);

glMultiTexCoord2fv

public void glMultiTexCoord2fv(int target,
                               FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2fv(GLenum target, const GLfloat * v);

glMultiTexCoord2fv

public void glMultiTexCoord2fv(int target,
                               float[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2fv(GLenum target, const GLfloat * v);

glMultiTexCoord2hNV

public void glMultiTexCoord2hNV(int target,
                                short s,
                                short t)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);

glMultiTexCoord2hvNV

public void glMultiTexCoord2hvNV(int index,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord2hvNV

public void glMultiTexCoord2hvNV(int index,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord2i

public void glMultiTexCoord2i(int target,
                              int s,
                              int t)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2i(GLenum target, GLint s, GLint t);

glMultiTexCoord2iv

public void glMultiTexCoord2iv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2iv(GLenum target, const GLint * v);

glMultiTexCoord2iv

public void glMultiTexCoord2iv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2iv(GLenum target, const GLint * v);

glMultiTexCoord2s

public void glMultiTexCoord2s(int target,
                              short s,
                              short t)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);

glMultiTexCoord2sv

public void glMultiTexCoord2sv(int target,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2sv(GLenum target, const GLshort * v);

glMultiTexCoord2sv

public void glMultiTexCoord2sv(int target,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord2sv(GLenum target, const GLshort * v);

glMultiTexCoord3d

public void glMultiTexCoord3d(int target,
                              double s,
                              double t,
                              double r)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);

glMultiTexCoord3dv

public void glMultiTexCoord3dv(int target,
                               DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3dv(GLenum target, const GLdouble * v);

glMultiTexCoord3dv

public void glMultiTexCoord3dv(int target,
                               double[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3dv(GLenum target, const GLdouble * v);

glMultiTexCoord3f

public void glMultiTexCoord3f(int target,
                              float s,
                              float t,
                              float r)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);

glMultiTexCoord3fv

public void glMultiTexCoord3fv(int target,
                               FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3fv(GLenum target, const GLfloat * v);

glMultiTexCoord3fv

public void glMultiTexCoord3fv(int target,
                               float[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3fv(GLenum target, const GLfloat * v);

glMultiTexCoord3hNV

public void glMultiTexCoord3hNV(int target,
                                short s,
                                short t,
                                short r)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);

glMultiTexCoord3hvNV

public void glMultiTexCoord3hvNV(int index,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord3hvNV

public void glMultiTexCoord3hvNV(int index,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord3i

public void glMultiTexCoord3i(int target,
                              int s,
                              int t,
                              int r)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);

glMultiTexCoord3iv

public void glMultiTexCoord3iv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3iv(GLenum target, const GLint * v);

glMultiTexCoord3iv

public void glMultiTexCoord3iv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3iv(GLenum target, const GLint * v);

glMultiTexCoord3s

public void glMultiTexCoord3s(int target,
                              short s,
                              short t,
                              short r)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);

glMultiTexCoord3sv

public void glMultiTexCoord3sv(int target,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3sv(GLenum target, const GLshort * v);

glMultiTexCoord3sv

public void glMultiTexCoord3sv(int target,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord3sv(GLenum target, const GLshort * v);

glMultiTexCoord4d

public void glMultiTexCoord4d(int target,
                              double s,
                              double t,
                              double r,
                              double q)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glMultiTexCoord4dv

public void glMultiTexCoord4dv(int target,
                               DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4dv(GLenum target, const GLdouble * v);

glMultiTexCoord4dv

public void glMultiTexCoord4dv(int target,
                               double[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4dv(GLenum target, const GLdouble * v);

glMultiTexCoord4f

public void glMultiTexCoord4f(int target,
                              float s,
                              float t,
                              float r,
                              float q)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glMultiTexCoord4fv

public void glMultiTexCoord4fv(int target,
                               FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4fv(GLenum target, const GLfloat * v);

glMultiTexCoord4fv

public void glMultiTexCoord4fv(int target,
                               float[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4fv(GLenum target, const GLfloat * v);

glMultiTexCoord4hNV

public void glMultiTexCoord4hNV(int target,
                                short s,
                                short t,
                                short r,
                                short q)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);

glMultiTexCoord4hvNV

public void glMultiTexCoord4hvNV(int index,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord4hvNV

public void glMultiTexCoord4hvNV(int index,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4hvNV(GLenum index, const GLhalfNV * v);

glMultiTexCoord4i

public void glMultiTexCoord4i(int target,
                              int start,
                              int x,
                              int y,
                              int width)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4i(GLenum target, GLint start, GLint x, GLint y, GLint width);

glMultiTexCoord4iv

public void glMultiTexCoord4iv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4iv(GLenum target, const GLint * v);

glMultiTexCoord4iv

public void glMultiTexCoord4iv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4iv(GLenum target, const GLint * v);

glMultiTexCoord4s

public void glMultiTexCoord4s(int target,
                              short s,
                              short t,
                              short r,
                              short q)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

glMultiTexCoord4sv

public void glMultiTexCoord4sv(int target,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4sv(GLenum target, const GLshort * v);

glMultiTexCoord4sv

public void glMultiTexCoord4sv(int target,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glMultiTexCoord4sv(GLenum target, const GLshort * v);

glNewBufferRegion

public int glNewBufferRegion(int type)

    Entry point (through function pointer) to C language function:
    GLuint glNewBufferRegion(GLenum type);

glNewList

public void glNewList(int list,
                      int mode)

    Interface to C language function:
    void glNewList(GLuint list, GLenum mode);

glNewObjectBufferATI

public int glNewObjectBufferATI(int size,
                                Buffer pointer,
                                int usage)

    Entry point (through function pointer) to C language function:
    GLuint glNewObjectBufferATI(GLsizei size, const GLvoid * pointer, GLenum usage);

glNormal3b

public void glNormal3b(byte nx,
                       byte ny,
                       byte nz)

    Interface to C language function:
    void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);

glNormal3bv

public void glNormal3bv(ByteBuffer v)

    Interface to C language function:
    void glNormal3bv(const GLbyte * v);

glNormal3bv

public void glNormal3bv(byte[] v,
                        int v_offset)

    Interface to C language function:
    void glNormal3bv(const GLbyte * v);

glNormal3d

public void glNormal3d(double nx,
                       double ny,
                       double nz)

    Interface to C language function:
    void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);

glNormal3dv

public void glNormal3dv(DoubleBuffer v)

    Interface to C language function:
    void glNormal3dv(const GLdouble * v);

glNormal3dv

public void glNormal3dv(double[] v,
                        int v_offset)

    Interface to C language function:
    void glNormal3dv(const GLdouble * v);

glNormal3f

public void glNormal3f(float nx,
                       float ny,
                       float nz)

    Interface to C language function:
    void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);

glNormal3fVertex3fSUN

public void glNormal3fVertex3fSUN(float r,
                                  float g,
                                  float b,
                                  float x,
                                  float y,
                                  float z)

    Entry point (through function pointer) to C language function:
    void glNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

glNormal3fVertex3fvSUN

public void glNormal3fVertex3fvSUN(FloatBuffer c,
                                   FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glNormal3fVertex3fvSUN

public void glNormal3fVertex3fvSUN(float[] c,
                                   int c_offset,
                                   float[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glNormal3fv

public void glNormal3fv(FloatBuffer v)

    Interface to C language function:
    void glNormal3fv(const GLfloat * v);

glNormal3fv

public void glNormal3fv(float[] v,
                        int v_offset)

    Interface to C language function:
    void glNormal3fv(const GLfloat * v);

glNormal3hNV

public void glNormal3hNV(short red,
                         short green,
                         short blue)

    Entry point (through function pointer) to C language function:
    void glNormal3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

glNormal3hvNV

public void glNormal3hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormal3hvNV(const GLhalfNV * v);

glNormal3hvNV

public void glNormal3hvNV(short[] v,
                          int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormal3hvNV(const GLhalfNV * v);

glNormal3i

public void glNormal3i(int nx,
                       int ny,
                       int nz)

    Interface to C language function:
    void glNormal3i(GLint nx, GLint ny, GLint nz);

glNormal3iv

public void glNormal3iv(IntBuffer v)

    Interface to C language function:
    void glNormal3iv(const GLint * v);

glNormal3iv

public void glNormal3iv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glNormal3iv(const GLint * v);

glNormal3s

public void glNormal3s(short nx,
                       short ny,
                       short nz)

    Interface to C language function:
    void glNormal3s(GLshort nx, GLshort ny, GLshort nz);

glNormal3sv

public void glNormal3sv(ShortBuffer v)

    Interface to C language function:
    void glNormal3sv(const GLshort * v);

glNormal3sv

public void glNormal3sv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glNormal3sv(const GLshort * v);

glNormalPointer

public void glNormalPointer(int type,
                            int stride,
                            Buffer ptr)

    Interface to C language function:
    void glNormalPointer(GLenum type, GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glNormalPointer

public void glNormalPointer(int type,
                            int stride,
                            long ptr_buffer_offset)

    Interface to C language function:
    void glNormalPointer(GLenum type, GLsizei stride, const GLvoid * ptr);

glNormalStream3bATI

public void glNormalStream3bATI(int stream,
                                byte nx,
                                byte ny,
                                byte nz)

    Entry point (through function pointer) to C language function:
    void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);

glNormalStream3bvATI

public void glNormalStream3bvATI(int index,
                                 ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormalStream3bvATI(GLenum index, const GLbyte * v);

glNormalStream3bvATI

public void glNormalStream3bvATI(int index,
                                 byte[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormalStream3bvATI(GLenum index, const GLbyte * v);

glNormalStream3dATI

public void glNormalStream3dATI(int target,
                                double s,
                                double t,
                                double r)

    Entry point (through function pointer) to C language function:
    void glNormalStream3dATI(GLenum target, GLdouble s, GLdouble t, GLdouble r);

glNormalStream3dvATI

public void glNormalStream3dvATI(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormalStream3dvATI(GLenum target, const GLdouble * v);

glNormalStream3dvATI

public void glNormalStream3dvATI(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormalStream3dvATI(GLenum target, const GLdouble * v);

glNormalStream3fATI

public void glNormalStream3fATI(int target,
                                float s,
                                float t,
                                float r)

    Entry point (through function pointer) to C language function:
    void glNormalStream3fATI(GLenum target, GLfloat s, GLfloat t, GLfloat r);

glNormalStream3fvATI

public void glNormalStream3fvATI(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormalStream3fvATI(GLenum target, const GLfloat * v);

glNormalStream3fvATI

public void glNormalStream3fvATI(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormalStream3fvATI(GLenum target, const GLfloat * v);

glNormalStream3iATI

public void glNormalStream3iATI(int target,
                                int s,
                                int t,
                                int r)

    Entry point (through function pointer) to C language function:
    void glNormalStream3iATI(GLenum target, GLint s, GLint t, GLint r);

glNormalStream3ivATI

public void glNormalStream3ivATI(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormalStream3ivATI(GLenum target, const GLint * v);

glNormalStream3ivATI

public void glNormalStream3ivATI(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormalStream3ivATI(GLenum target, const GLint * v);

glNormalStream3sATI

public void glNormalStream3sATI(int target,
                                short s,
                                short t,
                                short r)

    Entry point (through function pointer) to C language function:
    void glNormalStream3sATI(GLenum target, GLshort s, GLshort t, GLshort r);

glNormalStream3svATI

public void glNormalStream3svATI(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glNormalStream3svATI(GLenum target, const GLshort * v);

glNormalStream3svATI

public void glNormalStream3svATI(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glNormalStream3svATI(GLenum target, const GLshort * v);

glOrtho

public void glOrtho(double left,
                    double right,
                    double bottom,
                    double top,
                    double near_val,
                    double far_val)

    Interface to C language function:
    void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);

glPNTrianglesfATI

public void glPNTrianglesfATI(int target,
                              float s)

    Entry point (through function pointer) to C language function:
    void glPNTrianglesfATI(GLenum target, GLfloat s);

glPNTrianglesiATI

public void glPNTrianglesiATI(int target,
                              int s)

    Entry point (through function pointer) to C language function:
    void glPNTrianglesiATI(GLenum target, GLint s);

glPassTexCoordATI

public void glPassTexCoordATI(int red,
                              int green,
                              int blue)

    Entry point (through function pointer) to C language function:
    void glPassTexCoordATI(GLuint red, GLuint green, GLenum blue);

glPassThrough

public void glPassThrough(float token)

    Interface to C language function:
    void glPassThrough(GLfloat token);

glPixelDataRangeNV

public void glPixelDataRangeNV(int target,
                               int level,
                               Buffer img)

    Entry point (through function pointer) to C language function:
    void glPixelDataRangeNV(GLenum target, GLsizei level, GLvoid * img);

    Parameters:
        img - a direct Buffer

glPixelMapfv

public void glPixelMapfv(int map,
                         int mapsize,
                         FloatBuffer values)

    Interface to C language function:
    void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat * values);

glPixelMapfv

public void glPixelMapfv(int map,
                         int mapsize,
                         float[] values,
                         int values_offset)

    Interface to C language function:
    void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat * values);

glPixelMapfv

public void glPixelMapfv(int map,
                         int mapsize,
                         long values_buffer_offset)

    Interface to C language function:
    void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat * values);

glPixelMapuiv

public void glPixelMapuiv(int map,
                          int mapsize,
                          IntBuffer values)

    Interface to C language function:
    void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint * values);

glPixelMapuiv

public void glPixelMapuiv(int map,
                          int mapsize,
                          int[] values,
                          int values_offset)

    Interface to C language function:
    void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint * values);

glPixelMapuiv

public void glPixelMapuiv(int map,
                          int mapsize,
                          long values_buffer_offset)

    Interface to C language function:
    void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint * values);

glPixelMapusv

public void glPixelMapusv(int map,
                          int mapsize,
                          ShortBuffer values)

    Interface to C language function:
    void glPixelMapusv(GLenum map, GLint mapsize, const GLushort * values);

glPixelMapusv

public void glPixelMapusv(int map,
                          int mapsize,
                          short[] values,
                          int values_offset)

    Interface to C language function:
    void glPixelMapusv(GLenum map, GLint mapsize, const GLushort * values);

glPixelMapusv

public void glPixelMapusv(int map,
                          int mapsize,
                          long values_buffer_offset)

    Interface to C language function:
    void glPixelMapusv(GLenum map, GLint mapsize, const GLushort * values);

glPixelStoref

public void glPixelStoref(int pname,
                          float param)

    Interface to C language function:
    void glPixelStoref(GLenum pname, GLfloat param);

glPixelStorei

public void glPixelStorei(int pname,
                          int param)

    Interface to C language function:
    void glPixelStorei(GLenum pname, GLint param);

glPixelTexGenParameterfSGIS

public void glPixelTexGenParameterfSGIS(int target,
                                        float s)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameterfSGIS(GLenum target, GLfloat s);

glPixelTexGenParameterfvSGIS

public void glPixelTexGenParameterfvSGIS(int target,
                                         FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameterfvSGIS(GLenum target, const GLfloat * v);

glPixelTexGenParameterfvSGIS

public void glPixelTexGenParameterfvSGIS(int target,
                                         float[] v,
                                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameterfvSGIS(GLenum target, const GLfloat * v);

glPixelTexGenParameteriSGIS

public void glPixelTexGenParameteriSGIS(int target,
                                        int s)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameteriSGIS(GLenum target, GLint s);

glPixelTexGenParameterivSGIS

public void glPixelTexGenParameterivSGIS(int target,
                                         IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameterivSGIS(GLenum target, const GLint * v);

glPixelTexGenParameterivSGIS

public void glPixelTexGenParameterivSGIS(int target,
                                         int[] v,
                                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenParameterivSGIS(GLenum target, const GLint * v);

glPixelTexGenSGIX

public void glPixelTexGenSGIX(int mode)

    Entry point (through function pointer) to C language function:
    void glPixelTexGenSGIX(GLenum mode);

glPixelTransferf

public void glPixelTransferf(int pname,
                             float param)

    Interface to C language function:
    void glPixelTransferf(GLenum pname, GLfloat param);

glPixelTransferi

public void glPixelTransferi(int pname,
                             int param)

    Interface to C language function:
    void glPixelTransferi(GLenum pname, GLint param);

glPixelTransformParameterfEXT

public void glPixelTransformParameterfEXT(int target,
                                          int pname,
                                          float params)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat params);

glPixelTransformParameterfvEXT

public void glPixelTransformParameterfvEXT(int target,
                                           int pname,
                                           FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params);

glPixelTransformParameterfvEXT

public void glPixelTransformParameterfvEXT(int target,
                                           int pname,
                                           float[] params,
                                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params);

glPixelTransformParameteriEXT

public void glPixelTransformParameteriEXT(int target,
                                          int pname,
                                          int params)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint params);

glPixelTransformParameterivEXT

public void glPixelTransformParameterivEXT(int target,
                                           int pname,
                                           IntBuffer params)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params);

glPixelTransformParameterivEXT

public void glPixelTransformParameterivEXT(int target,
                                           int pname,
                                           int[] params,
                                           int params_offset)

    Entry point (through function pointer) to C language function:
    void glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params);

glPixelZoom

public void glPixelZoom(float xfactor,
                        float yfactor)

    Interface to C language function:
    void glPixelZoom(GLfloat xfactor, GLfloat yfactor);

glPointParameterf

public void glPointParameterf(int target,
                              float s)

    Entry point (through function pointer) to C language function:
    void glPointParameterf(GLenum target, GLfloat s);

glPointParameterfARB

public void glPointParameterfARB(int target,
                                 float s)

    Entry point (through function pointer) to C language function:
    void glPointParameterfARB(GLenum target, GLfloat s);

glPointParameterfEXT

public void glPointParameterfEXT(int target,
                                 float s)

    Entry point (through function pointer) to C language function:
    void glPointParameterfEXT(GLenum target, GLfloat s);

glPointParameterfSGIS

public void glPointParameterfSGIS(int target,
                                  float s)

    Entry point (through function pointer) to C language function:
    void glPointParameterfSGIS(GLenum target, GLfloat s);

glPointParameterfv

public void glPointParameterfv(int target,
                               FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameterfv(GLenum target, const GLfloat * v);

glPointParameterfv

public void glPointParameterfv(int target,
                               float[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameterfv(GLenum target, const GLfloat * v);

glPointParameterfvARB

public void glPointParameterfvARB(int target,
                                  FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvARB(GLenum target, const GLfloat * v);

glPointParameterfvARB

public void glPointParameterfvARB(int target,
                                  float[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvARB(GLenum target, const GLfloat * v);

glPointParameterfvEXT

public void glPointParameterfvEXT(int target,
                                  FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvEXT(GLenum target, const GLfloat * v);

glPointParameterfvEXT

public void glPointParameterfvEXT(int target,
                                  float[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvEXT(GLenum target, const GLfloat * v);

glPointParameterfvSGIS

public void glPointParameterfvSGIS(int target,
                                   FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvSGIS(GLenum target, const GLfloat * v);

glPointParameterfvSGIS

public void glPointParameterfvSGIS(int target,
                                   float[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameterfvSGIS(GLenum target, const GLfloat * v);

glPointParameteri

public void glPointParameteri(int target,
                              int s)

    Entry point (through function pointer) to C language function:
    void glPointParameteri(GLenum target, GLint s);

glPointParameteriNV

public void glPointParameteriNV(int target,
                                int s)

    Entry point (through function pointer) to C language function:
    void glPointParameteriNV(GLenum target, GLint s);

glPointParameteriv

public void glPointParameteriv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameteriv(GLenum target, const GLint * v);

glPointParameteriv

public void glPointParameteriv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameteriv(GLenum target, const GLint * v);

glPointParameterivNV

public void glPointParameterivNV(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glPointParameterivNV(GLenum target, const GLint * v);

glPointParameterivNV

public void glPointParameterivNV(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glPointParameterivNV(GLenum target, const GLint * v);

glPointSize

public void glPointSize(float size)

    Interface to C language function:
    void glPointSize(GLfloat size);

glPollAsyncSGIX

public int glPollAsyncSGIX(IntBuffer markerp)

    Entry point (through function pointer) to C language function:
    GLint glPollAsyncSGIX(GLuint * markerp);

glPollAsyncSGIX

public int glPollAsyncSGIX(int[] markerp,
                           int markerp_offset)

    Entry point (through function pointer) to C language function:
    GLint glPollAsyncSGIX(GLuint * markerp);

glPollInstrumentsSGIX

public int glPollInstrumentsSGIX(IntBuffer marker_p)

    Entry point (through function pointer) to C language function:
    GLint glPollInstrumentsSGIX(GLint * marker_p);

glPollInstrumentsSGIX

public int glPollInstrumentsSGIX(int[] marker_p,
                                 int marker_p_offset)

    Entry point (through function pointer) to C language function:
    GLint glPollInstrumentsSGIX(GLint * marker_p);

glPolygonMode

public void glPolygonMode(int face,
                          int mode)

    Interface to C language function:
    void glPolygonMode(GLenum face, GLenum mode);

glPolygonOffset

public void glPolygonOffset(float factor,
                            float units)

    Interface to C language function:
    void glPolygonOffset(GLfloat factor, GLfloat units);

glPolygonStipple

public void glPolygonStipple(ByteBuffer mask)

    Interface to C language function:
    void glPolygonStipple(const GLubyte * mask);

glPolygonStipple

public void glPolygonStipple(byte[] mask,
                             int mask_offset)

    Interface to C language function:
    void glPolygonStipple(const GLubyte * mask);

glPolygonStipple

public void glPolygonStipple(long mask_buffer_offset)

    Interface to C language function:
    void glPolygonStipple(const GLubyte * mask);

glPopAttrib

public void glPopAttrib()

    Interface to C language function:
    void glPopAttrib(void);

glPopClientAttrib

public void glPopClientAttrib()

    Interface to C language function:
    void glPopClientAttrib(void);

glPopMatrix

public void glPopMatrix()

    Interface to C language function:
    void glPopMatrix(void);

glPopName

public void glPopName()

    Interface to C language function:
    void glPopName(void);

glPrimitiveRestartIndexNV

public void glPrimitiveRestartIndexNV(int mode)

    Entry point (through function pointer) to C language function:
    void glPrimitiveRestartIndexNV(GLuint mode);

glPrimitiveRestartNV

public void glPrimitiveRestartNV()

    Entry point (through function pointer) to C language function:
    void glPrimitiveRestartNV(void);

glPrioritizeTextures

public void glPrioritizeTextures(int n,
                                 IntBuffer textures,
                                 FloatBuffer priorities)

    Interface to C language function:
    void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities);

glPrioritizeTextures

public void glPrioritizeTextures(int n,
                                 int[] textures,
                                 int textures_offset,
                                 float[] priorities,
                                 int priorities_offset)

    Interface to C language function:
    void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities);

glProgramEnvParameter4dARB

public void glProgramEnvParameter4dARB(int target,
                                       int index,
                                       double x,
                                       double y,
                                       double z,
                                       double w)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glProgramEnvParameter4dvARB

public void glProgramEnvParameter4dvARB(int target,
                                        int index,
                                        DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);

glProgramEnvParameter4dvARB

public void glProgramEnvParameter4dvARB(int target,
                                        int index,
                                        double[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);

glProgramEnvParameter4fARB

public void glProgramEnvParameter4fARB(int target,
                                       int index,
                                       float x,
                                       float y,
                                       float z,
                                       float w)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glProgramEnvParameter4fvARB

public void glProgramEnvParameter4fvARB(int target,
                                        int pname,
                                        FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4fvARB(GLenum target, GLuint pname, const GLfloat * params);

glProgramEnvParameter4fvARB

public void glProgramEnvParameter4fvARB(int target,
                                        int pname,
                                        float[] params,
                                        int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramEnvParameter4fvARB(GLenum target, GLuint pname, const GLfloat * params);

glProgramLocalParameter4dARB

public void glProgramLocalParameter4dARB(int target,
                                         int index,
                                         double x,
                                         double y,
                                         double z,
                                         double w)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glProgramLocalParameter4dvARB

public void glProgramLocalParameter4dvARB(int target,
                                          int index,
                                          DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);

glProgramLocalParameter4dvARB

public void glProgramLocalParameter4dvARB(int target,
                                          int index,
                                          double[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);

glProgramLocalParameter4fARB

public void glProgramLocalParameter4fARB(int target,
                                         int index,
                                         float x,
                                         float y,
                                         float z,
                                         float w)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glProgramLocalParameter4fvARB

public void glProgramLocalParameter4fvARB(int target,
                                          int pname,
                                          FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4fvARB(GLenum target, GLuint pname, const GLfloat * params);

glProgramLocalParameter4fvARB

public void glProgramLocalParameter4fvARB(int target,
                                          int pname,
                                          float[] params,
                                          int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramLocalParameter4fvARB(GLenum target, GLuint pname, const GLfloat * params);

glProgramNamedParameter4dNV

public void glProgramNamedParameter4dNV(int id,
                                        int len,
                                        String name,
                                        double x,
                                        double y,
                                        double z,
                                        double w)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glProgramNamedParameter4dvNV

public void glProgramNamedParameter4dvNV(int id,
                                         int len,
                                         String name,
                                         DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);

glProgramNamedParameter4dvNV

public void glProgramNamedParameter4dvNV(int id,
                                         int len,
                                         String name,
                                         double[] v,
                                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);

glProgramNamedParameter4fNV

public void glProgramNamedParameter4fNV(int id,
                                        int len,
                                        String name,
                                        float x,
                                        float y,
                                        float z,
                                        float w)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glProgramNamedParameter4fvNV

public void glProgramNamedParameter4fvNV(int id,
                                         int len,
                                         String name,
                                         FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);

glProgramNamedParameter4fvNV

public void glProgramNamedParameter4fvNV(int id,
                                         int len,
                                         String name,
                                         float[] v,
                                         int v_offset)

    Entry point (through function pointer) to C language function:
    void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);

glProgramParameter4dNV

public void glProgramParameter4dNV(int target,
                                   int index,
                                   double x,
                                   double y,
                                   double z,
                                   double w)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glProgramParameter4dvNV

public void glProgramParameter4dvNV(int target,
                                    int index,
                                    DoubleBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * params);

glProgramParameter4dvNV

public void glProgramParameter4dvNV(int target,
                                    int index,
                                    double[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * params);

glProgramParameter4fNV

public void glProgramParameter4fNV(int target,
                                   int index,
                                   float x,
                                   float y,
                                   float z,
                                   float w)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glProgramParameter4fvNV

public void glProgramParameter4fvNV(int target,
                                    int pname,
                                    FloatBuffer params)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4fvNV(GLenum target, GLuint pname, const GLfloat * params);

glProgramParameter4fvNV

public void glProgramParameter4fvNV(int target,
                                    int pname,
                                    float[] params,
                                    int params_offset)

    Entry point (through function pointer) to C language function:
    void glProgramParameter4fvNV(GLenum target, GLuint pname, const GLfloat * params);

glProgramParameters4dvNV

public void glProgramParameters4dvNV(int target,
                                     int index,
                                     int count,
                                     DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble * v);

glProgramParameters4dvNV

public void glProgramParameters4dvNV(int target,
                                     int index,
                                     int count,
                                     double[] v,
                                     int v_offset)

    Entry point (through function pointer) to C language function:
    void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble * v);

glProgramParameters4fvNV

public void glProgramParameters4fvNV(int target,
                                     int index,
                                     int count,
                                     FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat * v);

glProgramParameters4fvNV

public void glProgramParameters4fvNV(int target,
                                     int index,
                                     int count,
                                     float[] v,
                                     int v_offset)

    Entry point (through function pointer) to C language function:
    void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat * v);

glProgramStringARB

public void glProgramStringARB(int target,
                               int format,
                               int len,
                               String string)

    Entry point (through function pointer) to C language function:
    void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid * string);

glPushAttrib

public void glPushAttrib(int mask)

    Interface to C language function:
    void glPushAttrib(GLbitfield mask);

glPushClientAttrib

public void glPushClientAttrib(int mask)

    Interface to C language function:
    void glPushClientAttrib(GLbitfield mask);

glPushMatrix

public void glPushMatrix()

    Interface to C language function:
    void glPushMatrix(void);

glPushName

public void glPushName(int name)

    Interface to C language function:
    void glPushName(GLuint name);

glRasterPos2d

public void glRasterPos2d(double x,
                          double y)

    Interface to C language function:
    void glRasterPos2d(GLdouble x, GLdouble y);

glRasterPos2dv

public void glRasterPos2dv(DoubleBuffer v)

    Interface to C language function:
    void glRasterPos2dv(const GLdouble * v);

glRasterPos2dv

public void glRasterPos2dv(double[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos2dv(const GLdouble * v);

glRasterPos2f

public void glRasterPos2f(float x,
                          float y)

    Interface to C language function:
    void glRasterPos2f(GLfloat x, GLfloat y);

glRasterPos2fv

public void glRasterPos2fv(FloatBuffer v)

    Interface to C language function:
    void glRasterPos2fv(const GLfloat * v);

glRasterPos2fv

public void glRasterPos2fv(float[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos2fv(const GLfloat * v);

glRasterPos2i

public void glRasterPos2i(int x,
                          int y)

    Interface to C language function:
    void glRasterPos2i(GLint x, GLint y);

glRasterPos2iv

public void glRasterPos2iv(IntBuffer v)

    Interface to C language function:
    void glRasterPos2iv(const GLint * v);

glRasterPos2iv

public void glRasterPos2iv(int[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos2iv(const GLint * v);

glRasterPos2s

public void glRasterPos2s(short x,
                          short y)

    Interface to C language function:
    void glRasterPos2s(GLshort x, GLshort y);

glRasterPos2sv

public void glRasterPos2sv(ShortBuffer v)

    Interface to C language function:
    void glRasterPos2sv(const GLshort * v);

glRasterPos2sv

public void glRasterPos2sv(short[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos2sv(const GLshort * v);

glRasterPos3d

public void glRasterPos3d(double x,
                          double y,
                          double z)

    Interface to C language function:
    void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);

glRasterPos3dv

public void glRasterPos3dv(DoubleBuffer v)

    Interface to C language function:
    void glRasterPos3dv(const GLdouble * v);

glRasterPos3dv

public void glRasterPos3dv(double[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos3dv(const GLdouble * v);

glRasterPos3f

public void glRasterPos3f(float x,
                          float y,
                          float z)

    Interface to C language function:
    void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);

glRasterPos3fv

public void glRasterPos3fv(FloatBuffer v)

    Interface to C language function:
    void glRasterPos3fv(const GLfloat * v);

glRasterPos3fv

public void glRasterPos3fv(float[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos3fv(const GLfloat * v);

glRasterPos3i

public void glRasterPos3i(int x,
                          int y,
                          int z)

    Interface to C language function:
    void glRasterPos3i(GLint x, GLint y, GLint z);

glRasterPos3iv

public void glRasterPos3iv(IntBuffer v)

    Interface to C language function:
    void glRasterPos3iv(const GLint * v);

glRasterPos3iv

public void glRasterPos3iv(int[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos3iv(const GLint * v);

glRasterPos3s

public void glRasterPos3s(short x,
                          short y,
                          short z)

    Interface to C language function:
    void glRasterPos3s(GLshort x, GLshort y, GLshort z);

glRasterPos3sv

public void glRasterPos3sv(ShortBuffer v)

    Interface to C language function:
    void glRasterPos3sv(const GLshort * v);

glRasterPos3sv

public void glRasterPos3sv(short[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos3sv(const GLshort * v);

glRasterPos4d

public void glRasterPos4d(double x,
                          double y,
                          double z,
                          double w)

    Interface to C language function:
    void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glRasterPos4dv

public void glRasterPos4dv(DoubleBuffer v)

    Interface to C language function:
    void glRasterPos4dv(const GLdouble * v);

glRasterPos4dv

public void glRasterPos4dv(double[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos4dv(const GLdouble * v);

glRasterPos4f

public void glRasterPos4f(float x,
                          float y,
                          float z,
                          float w)

    Interface to C language function:
    void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glRasterPos4fv

public void glRasterPos4fv(FloatBuffer v)

    Interface to C language function:
    void glRasterPos4fv(const GLfloat * v);

glRasterPos4fv

public void glRasterPos4fv(float[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos4fv(const GLfloat * v);

glRasterPos4i

public void glRasterPos4i(int x,
                          int y,
                          int z,
                          int w)

    Interface to C language function:
    void glRasterPos4i(GLint x, GLint y, GLint z, GLint w);

glRasterPos4iv

public void glRasterPos4iv(IntBuffer v)

    Interface to C language function:
    void glRasterPos4iv(const GLint * v);

glRasterPos4iv

public void glRasterPos4iv(int[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos4iv(const GLint * v);

glRasterPos4s

public void glRasterPos4s(short x,
                          short y,
                          short z,
                          short w)

    Interface to C language function:
    void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);

glRasterPos4sv

public void glRasterPos4sv(ShortBuffer v)

    Interface to C language function:
    void glRasterPos4sv(const GLshort * v);

glRasterPos4sv

public void glRasterPos4sv(short[] v,
                           int v_offset)

    Interface to C language function:
    void glRasterPos4sv(const GLshort * v);

glReadBuffer

public void glReadBuffer(int mode)

    Interface to C language function:
    void glReadBuffer(GLenum mode);

glReadBufferRegion

public void glReadBufferRegion(int target,
                               int start,
                               int x,
                               int y,
                               int width)

    Entry point (through function pointer) to C language function:
    void glReadBufferRegion(GLuint target, GLint start, GLint x, GLsizei y, GLsizei width);

glReadInstrumentsSGIX

public void glReadInstrumentsSGIX(int count)

    Entry point (through function pointer) to C language function:
    void glReadInstrumentsSGIX(GLint count);

glReadPixels

public void glReadPixels(int x,
                         int y,
                         int width,
                         int height,
                         int format,
                         int type,
                         Buffer pixels)

    Interface to C language function:
    void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);

glReadPixels

public void glReadPixels(int x,
                         int y,
                         int width,
                         int height,
                         int format,
                         int type,
                         long pixels_buffer_offset)

    Interface to C language function:
    void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);

glRectd

public void glRectd(double x1,
                    double y1,
                    double x2,
                    double y2)

    Interface to C language function:
    void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);

glRectdv

public void glRectdv(DoubleBuffer v1,
                     DoubleBuffer v2)

    Interface to C language function:
    void glRectdv(const GLdouble * v1, const GLdouble * v2);

glRectdv

public void glRectdv(double[] v1,
                     int v1_offset,
                     double[] v2,
                     int v2_offset)

    Interface to C language function:
    void glRectdv(const GLdouble * v1, const GLdouble * v2);

glRectf

public void glRectf(float x1,
                    float y1,
                    float x2,
                    float y2)

    Interface to C language function:
    void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);

glRectfv

public void glRectfv(FloatBuffer v1,
                     FloatBuffer v2)

    Interface to C language function:
    void glRectfv(const GLfloat * v1, const GLfloat * v2);

glRectfv

public void glRectfv(float[] v1,
                     int v1_offset,
                     float[] v2,
                     int v2_offset)

    Interface to C language function:
    void glRectfv(const GLfloat * v1, const GLfloat * v2);

glRecti

public void glRecti(int x1,
                    int y1,
                    int x2,
                    int y2)

    Interface to C language function:
    void glRecti(GLint x1, GLint y1, GLint x2, GLint y2);

glRectiv

public void glRectiv(IntBuffer v1,
                     IntBuffer v2)

    Interface to C language function:
    void glRectiv(const GLint * v1, const GLint * v2);

glRectiv

public void glRectiv(int[] v1,
                     int v1_offset,
                     int[] v2,
                     int v2_offset)

    Interface to C language function:
    void glRectiv(const GLint * v1, const GLint * v2);

glRects

public void glRects(short x1,
                    short y1,
                    short x2,
                    short y2)

    Interface to C language function:
    void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);

glRectsv

public void glRectsv(ShortBuffer v1,
                     ShortBuffer v2)

    Interface to C language function:
    void glRectsv(const GLshort * v1, const GLshort * v2);

glRectsv

public void glRectsv(short[] v1,
                     int v1_offset,
                     short[] v2,
                     int v2_offset)

    Interface to C language function:
    void glRectsv(const GLshort * v1, const GLshort * v2);

glReferencePlaneSGIX

public void glReferencePlaneSGIX(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glReferencePlaneSGIX(const GLdouble * m);

glReferencePlaneSGIX

public void glReferencePlaneSGIX(double[] m,
                                 int m_offset)

    Entry point (through function pointer) to C language function:
    void glReferencePlaneSGIX(const GLdouble * m);

glRenderMode

public int glRenderMode(int mode)

    Interface to C language function:
    GLint glRenderMode(GLenum mode);

glRenderbufferStorageEXT

public void glRenderbufferStorageEXT(int target,
                                     int internalformat,
                                     int width,
                                     int height)

    Entry point (through function pointer) to C language function:
    void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);

glReplacementCodeuiColor3fVertex3fSUN

public void glReplacementCodeuiColor3fVertex3fSUN(int rc,
                                                  float r,
                                                  float g,
                                                  float b,
                                                  float x,
                                                  float y,
                                                  float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiColor3fVertex3fvSUN

public void glReplacementCodeuiColor3fVertex3fvSUN(IntBuffer rc,
                                                   FloatBuffer c,
                                                   FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiColor3fVertex3fvSUN

public void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc,
                                                   int rc_offset,
                                                   float[] c,
                                                   int c_offset,
                                                   float[] v,
                                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiColor4fNormal3fVertex3fSUN

public void glReplacementCodeuiColor4fNormal3fVertex3fSUN(int rc,
                                                          float r,
                                                          float g,
                                                          float b,
                                                          float a,
                                                          float nx,
                                                          float ny,
                                                          float nz,
                                                          float x,
                                                          float y,
                                                          float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiColor4fNormal3fVertex3fvSUN

public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntBuffer rc,
                                                           FloatBuffer c,
                                                           FloatBuffer n,
                                                           FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiColor4fNormal3fVertex3fvSUN

public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc,
                                                           int rc_offset,
                                                           float[] c,
                                                           int c_offset,
                                                           float[] n,
                                                           int n_offset,
                                                           float[] v,
                                                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiColor4ubVertex3fSUN

public void glReplacementCodeuiColor4ubVertex3fSUN(int rc,
                                                   byte r,
                                                   byte g,
                                                   byte b,
                                                   byte a,
                                                   float x,
                                                   float y,
                                                   float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiColor4ubVertex3fvSUN

public void glReplacementCodeuiColor4ubVertex3fvSUN(IntBuffer rc,
                                                    ByteBuffer c,
                                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v);

glReplacementCodeuiColor4ubVertex3fvSUN

public void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc,
                                                    int rc_offset,
                                                    byte[] c,
                                                    int c_offset,
                                                    float[] v,
                                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v);

glReplacementCodeuiNormal3fVertex3fSUN

public void glReplacementCodeuiNormal3fVertex3fSUN(int rc,
                                                   float r,
                                                   float g,
                                                   float b,
                                                   float x,
                                                   float y,
                                                   float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiNormal3fVertex3fvSUN

public void glReplacementCodeuiNormal3fVertex3fvSUN(IntBuffer rc,
                                                    FloatBuffer c,
                                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiNormal3fVertex3fvSUN

public void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc,
                                                    int rc_offset,
                                                    float[] c,
                                                    int c_offset,
                                                    float[] v,
                                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN

public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(int rc,
                                                                    float s,
                                                                    float t,
                                                                    float r,
                                                                    float g,
                                                                    float b,
                                                                    float a,
                                                                    float nx,
                                                                    float ny,
                                                                    float nz,
                                                                    float x,
                                                                    float y,
                                                                    float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntBuffer rc,
                                                                     FloatBuffer tc,
                                                                     FloatBuffer c,
                                                                     FloatBuffer n,
                                                                     FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc,
                                                                     int rc_offset,
                                                                     float[] tc,
                                                                     int tc_offset,
                                                                     float[] c,
                                                                     int c_offset,
                                                                     float[] n,
                                                                     int n_offset,
                                                                     float[] v,
                                                                     int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN

public void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(int rc,
                                                             float s,
                                                             float t,
                                                             float nx,
                                                             float ny,
                                                             float nz,
                                                             float x,
                                                             float y,
                                                             float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntBuffer rc,
                                                              FloatBuffer c,
                                                              FloatBuffer n,
                                                              FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc,
                                                              int rc_offset,
                                                              float[] c,
                                                              int c_offset,
                                                              float[] n,
                                                              int n_offset,
                                                              float[] v,
                                                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glReplacementCodeuiTexCoord2fVertex3fSUN

public void glReplacementCodeuiTexCoord2fVertex3fSUN(int rc,
                                                     float s,
                                                     float t,
                                                     float x,
                                                     float y,
                                                     float z)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);

glReplacementCodeuiTexCoord2fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntBuffer rc,
                                                      FloatBuffer c,
                                                      FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiTexCoord2fVertex3fvSUN

public void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc,
                                                      int rc_offset,
                                                      float[] c,
                                                      int c_offset,
                                                      float[] v,
                                                      int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v);

glReplacementCodeuiVertex3fSUN

public void glReplacementCodeuiVertex3fSUN(int target,
                                           float s,
                                           float t,
                                           float r)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiVertex3fSUN(GLuint target, GLfloat s, GLfloat t, GLfloat r);

glReplacementCodeuiVertex3fvSUN

public void glReplacementCodeuiVertex3fvSUN(IntBuffer rc,
                                            FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v);

glReplacementCodeuiVertex3fvSUN

public void glReplacementCodeuiVertex3fvSUN(int[] rc,
                                            int rc_offset,
                                            float[] v,
                                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v);

glRequestResidentProgramsNV

public void glRequestResidentProgramsNV(int n,
                                        IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glRequestResidentProgramsNV(GLsizei n, const GLuint * ids);

glRequestResidentProgramsNV

public void glRequestResidentProgramsNV(int n,
                                        int[] ids,
                                        int ids_offset)

    Entry point (through function pointer) to C language function:
    void glRequestResidentProgramsNV(GLsizei n, const GLuint * ids);

glResetHistogram

public void glResetHistogram(int mode)

    Entry point (through function pointer) to C language function:
    void glResetHistogram(GLenum mode);

glResetMinmax

public void glResetMinmax(int mode)

    Entry point (through function pointer) to C language function:
    void glResetMinmax(GLenum mode);

glResizeBuffersMESA

public void glResizeBuffersMESA()

    Entry point (through function pointer) to C language function:
    void glResizeBuffersMESA(void);

glRotated

public void glRotated(double angle,
                      double x,
                      double y,
                      double z)

    Interface to C language function:
    void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);

glRotatef

public void glRotatef(float angle,
                      float x,
                      float y,
                      float z)

    Interface to C language function:
    void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);

glSampleCoverage

public void glSampleCoverage(float value,
                             boolean invert)

    Entry point (through function pointer) to C language function:
    void glSampleCoverage(GLclampf value, GLboolean invert);

glSampleMapATI

public void glSampleMapATI(int red,
                           int green,
                           int blue)

    Entry point (through function pointer) to C language function:
    void glSampleMapATI(GLuint red, GLuint green, GLenum blue);

glSampleMaskEXT

public void glSampleMaskEXT(float value,
                            boolean invert)

    Entry point (through function pointer) to C language function:
    void glSampleMaskEXT(GLclampf value, GLboolean invert);

glSampleMaskSGIS

public void glSampleMaskSGIS(float value,
                             boolean invert)

    Entry point (through function pointer) to C language function:
    void glSampleMaskSGIS(GLclampf value, GLboolean invert);

glSamplePatternEXT

public void glSamplePatternEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glSamplePatternEXT(GLenum mode);

glSamplePatternSGIS

public void glSamplePatternSGIS(int mode)

    Entry point (through function pointer) to C language function:
    void glSamplePatternSGIS(GLenum mode);

glScaled

public void glScaled(double x,
                     double y,
                     double z)

    Interface to C language function:
    void glScaled(GLdouble x, GLdouble y, GLdouble z);

glScalef

public void glScalef(float x,
                     float y,
                     float z)

    Interface to C language function:
    void glScalef(GLfloat x, GLfloat y, GLfloat z);

glScissor

public void glScissor(int x,
                      int y,
                      int width,
                      int height)

    Interface to C language function:
    void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);

glSecondaryColor3b

public void glSecondaryColor3b(byte red,
                               byte green,
                               byte blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);

glSecondaryColor3bEXT

public void glSecondaryColor3bEXT(byte red,
                                  byte green,
                                  byte blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);

glSecondaryColor3bv

public void glSecondaryColor3bv(ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3bv(const GLbyte * v);

glSecondaryColor3bv

public void glSecondaryColor3bv(byte[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3bv(const GLbyte * v);

glSecondaryColor3bvEXT

public void glSecondaryColor3bvEXT(ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3bvEXT(const GLbyte * v);

glSecondaryColor3bvEXT

public void glSecondaryColor3bvEXT(byte[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3bvEXT(const GLbyte * v);

glSecondaryColor3d

public void glSecondaryColor3d(double red,
                               double green,
                               double blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);

glSecondaryColor3dEXT

public void glSecondaryColor3dEXT(double red,
                                  double green,
                                  double blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);

glSecondaryColor3dv

public void glSecondaryColor3dv(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3dv(const GLdouble * m);

glSecondaryColor3dv

public void glSecondaryColor3dv(double[] m,
                                int m_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3dv(const GLdouble * m);

glSecondaryColor3dvEXT

public void glSecondaryColor3dvEXT(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3dvEXT(const GLdouble * m);

glSecondaryColor3dvEXT

public void glSecondaryColor3dvEXT(double[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3dvEXT(const GLdouble * m);

glSecondaryColor3f

public void glSecondaryColor3f(float red,
                               float green,
                               float blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);

glSecondaryColor3fEXT

public void glSecondaryColor3fEXT(float red,
                                  float green,
                                  float blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);

glSecondaryColor3fv

public void glSecondaryColor3fv(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3fv(const GLfloat * m);

glSecondaryColor3fv

public void glSecondaryColor3fv(float[] m,
                                int m_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3fv(const GLfloat * m);

glSecondaryColor3fvEXT

public void glSecondaryColor3fvEXT(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3fvEXT(const GLfloat * m);

glSecondaryColor3fvEXT

public void glSecondaryColor3fvEXT(float[] m,
                                   int m_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3fvEXT(const GLfloat * m);

glSecondaryColor3hNV

public void glSecondaryColor3hNV(short red,
                                 short green,
                                 short blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

glSecondaryColor3hvNV

public void glSecondaryColor3hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3hvNV(const GLhalfNV * v);

glSecondaryColor3hvNV

public void glSecondaryColor3hvNV(short[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3hvNV(const GLhalfNV * v);

glSecondaryColor3i

public void glSecondaryColor3i(int red,
                               int green,
                               int blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3i(GLint red, GLint green, GLint blue);

glSecondaryColor3iEXT

public void glSecondaryColor3iEXT(int red,
                                  int green,
                                  int blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);

glSecondaryColor3iv

public void glSecondaryColor3iv(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3iv(const GLint * v);

glSecondaryColor3iv

public void glSecondaryColor3iv(int[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3iv(const GLint * v);

glSecondaryColor3ivEXT

public void glSecondaryColor3ivEXT(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ivEXT(const GLint * v);

glSecondaryColor3ivEXT

public void glSecondaryColor3ivEXT(int[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ivEXT(const GLint * v);

glSecondaryColor3s

public void glSecondaryColor3s(short red,
                               short green,
                               short blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);

glSecondaryColor3sEXT

public void glSecondaryColor3sEXT(short red,
                                  short green,
                                  short blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);

glSecondaryColor3sv

public void glSecondaryColor3sv(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3sv(const GLshort * v);

glSecondaryColor3sv

public void glSecondaryColor3sv(short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3sv(const GLshort * v);

glSecondaryColor3svEXT

public void glSecondaryColor3svEXT(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3svEXT(const GLshort * v);

glSecondaryColor3svEXT

public void glSecondaryColor3svEXT(short[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3svEXT(const GLshort * v);

glSecondaryColor3ub

public void glSecondaryColor3ub(byte red,
                                byte green,
                                byte blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);

glSecondaryColor3ubEXT

public void glSecondaryColor3ubEXT(byte red,
                                   byte green,
                                   byte blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);

glSecondaryColor3ubv

public void glSecondaryColor3ubv(ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ubv(const GLubyte * v);

glSecondaryColor3ubv

public void glSecondaryColor3ubv(byte[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ubv(const GLubyte * v);

glSecondaryColor3ubvEXT

public void glSecondaryColor3ubvEXT(ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ubvEXT(const GLubyte * v);

glSecondaryColor3ubvEXT

public void glSecondaryColor3ubvEXT(byte[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ubvEXT(const GLubyte * v);

glSecondaryColor3ui

public void glSecondaryColor3ui(int red,
                                int green,
                                int blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);

glSecondaryColor3uiEXT

public void glSecondaryColor3uiEXT(int red,
                                   int green,
                                   int blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);

glSecondaryColor3uiv

public void glSecondaryColor3uiv(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3uiv(const GLuint * v);

glSecondaryColor3uiv

public void glSecondaryColor3uiv(int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3uiv(const GLuint * v);

glSecondaryColor3uivEXT

public void glSecondaryColor3uivEXT(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3uivEXT(const GLuint * v);

glSecondaryColor3uivEXT

public void glSecondaryColor3uivEXT(int[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3uivEXT(const GLuint * v);

glSecondaryColor3us

public void glSecondaryColor3us(short red,
                                short green,
                                short blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);

glSecondaryColor3usEXT

public void glSecondaryColor3usEXT(short red,
                                   short green,
                                   short blue)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);

glSecondaryColor3usv

public void glSecondaryColor3usv(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3usv(const GLushort * v);

glSecondaryColor3usv

public void glSecondaryColor3usv(short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3usv(const GLushort * v);

glSecondaryColor3usvEXT

public void glSecondaryColor3usvEXT(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3usvEXT(const GLushort * v);

glSecondaryColor3usvEXT

public void glSecondaryColor3usvEXT(short[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColor3usvEXT(const GLushort * v);

glSecondaryColorPointer

public void glSecondaryColorPointer(int size,
                                    int type,
                                    int stride,
                                    Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glSecondaryColorPointer

public void glSecondaryColorPointer(int size,
                                    int type,
                                    int stride,
                                    long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

glSecondaryColorPointerEXT

public void glSecondaryColorPointerEXT(int size,
                                       int type,
                                       int stride,
                                       Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glSecondaryColorPointerEXT

public void glSecondaryColorPointerEXT(int size,
                                       int type,
                                       int stride,
                                       long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

glSelectBuffer

public void glSelectBuffer(int size,
                           IntBuffer buffer)

    Interface to C language function:
    void glSelectBuffer(GLsizei size, GLuint * buffer);

    Parameters:
        buffer - a direct IntBuffer

glSeparableFilter2D

public void glSeparableFilter2D(int target,
                                int internalformat,
                                int width,
                                int height,
                                int format,
                                int type,
                                Buffer row,
                                Buffer column)

    Entry point (through function pointer) to C language function:
    void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column);

glSeparableFilter2D

public void glSeparableFilter2D(int target,
                                int internalformat,
                                int width,
                                int height,
                                int format,
                                int type,
                                long row_buffer_offset,
                                long column_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column);

glSetFenceAPPLE

public void glSetFenceAPPLE(int mode)

    Entry point (through function pointer) to C language function:
    void glSetFenceAPPLE(GLuint mode);

glSetFenceNV

public void glSetFenceNV(int target,
                         int id)

    Entry point (through function pointer) to C language function:
    void glSetFenceNV(GLuint target, GLenum id);

glSetFragmentShaderConstantATI

public void glSetFragmentShaderConstantATI(int target,
                                           FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glSetFragmentShaderConstantATI(GLuint target, const GLfloat * v);

glSetFragmentShaderConstantATI

public void glSetFragmentShaderConstantATI(int target,
                                           float[] v,
                                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glSetFragmentShaderConstantATI(GLuint target, const GLfloat * v);

glSetInvariantEXT

public void glSetInvariantEXT(int id,
                              int type,
                              Buffer addr)

    Entry point (through function pointer) to C language function:
    void glSetInvariantEXT(GLuint id, GLenum type, const GLvoid * addr);

glSetLocalConstantEXT

public void glSetLocalConstantEXT(int id,
                                  int type,
                                  Buffer addr)

    Entry point (through function pointer) to C language function:
    void glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid * addr);

glShadeModel

public void glShadeModel(int mode)

    Interface to C language function:
    void glShadeModel(GLenum mode);

glShaderOp1EXT

public void glShaderOp1EXT(int red,
                           int green,
                           int blue)

    Entry point (through function pointer) to C language function:
    void glShaderOp1EXT(GLenum red, GLuint green, GLuint blue);

glShaderOp2EXT

public void glShaderOp2EXT(int sfactorRGB,
                           int dfactorRGB,
                           int sfactorAlpha,
                           int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glShaderOp2EXT(GLenum sfactorRGB, GLuint dfactorRGB, GLuint sfactorAlpha, GLuint dfactorAlpha);

glShaderOp3EXT

public void glShaderOp3EXT(int op,
                           int res,
                           int arg1,
                           int arg2,
                           int arg3)

    Entry point (through function pointer) to C language function:
    void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);

glShaderSource

public void glShaderSource(int shader,
                           int count,
                           String[] string,
                           IntBuffer length)

    Entry point (through function pointer) to C language function:
    void glShaderSource(GLuint shader, GLsizei count, const GLchar * * string, const GLint * length);

glShaderSource

public void glShaderSource(int shader,
                           int count,
                           String[] string,
                           int[] length,
                           int length_offset)

    Entry point (through function pointer) to C language function:
    void glShaderSource(GLuint shader, GLsizei count, const GLchar * * string, const GLint * length);

glShaderSourceARB

public void glShaderSourceARB(int shader,
                              int count,
                              String[] string,
                              IntBuffer length)

    Entry point (through function pointer) to C language function:
    void glShaderSourceARB(GLhandleARB shader, GLsizei count, const GLcharARB * * string, const GLint * length);

glShaderSourceARB

public void glShaderSourceARB(int shader,
                              int count,
                              String[] string,
                              int[] length,
                              int length_offset)

    Entry point (through function pointer) to C language function:
    void glShaderSourceARB(GLhandleARB shader, GLsizei count, const GLcharARB * * string, const GLint * length);

glSharpenTexFuncSGIS

public void glSharpenTexFuncSGIS(int target,
                                 int n,
                                 FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points);

glSharpenTexFuncSGIS

public void glSharpenTexFuncSGIS(int target,
                                 int n,
                                 float[] points,
                                 int points_offset)

    Entry point (through function pointer) to C language function:
    void glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points);

glSpriteParameterfSGIX

public void glSpriteParameterfSGIX(int target,
                                   float s)

    Entry point (through function pointer) to C language function:
    void glSpriteParameterfSGIX(GLenum target, GLfloat s);

glSpriteParameterfvSGIX

public void glSpriteParameterfvSGIX(int target,
                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glSpriteParameterfvSGIX(GLenum target, const GLfloat * v);

glSpriteParameterfvSGIX

public void glSpriteParameterfvSGIX(int target,
                                    float[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glSpriteParameterfvSGIX(GLenum target, const GLfloat * v);

glSpriteParameteriSGIX

public void glSpriteParameteriSGIX(int target,
                                   int s)

    Entry point (through function pointer) to C language function:
    void glSpriteParameteriSGIX(GLenum target, GLint s);

glSpriteParameterivSGIX

public void glSpriteParameterivSGIX(int target,
                                    IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glSpriteParameterivSGIX(GLenum target, const GLint * v);

glSpriteParameterivSGIX

public void glSpriteParameterivSGIX(int target,
                                    int[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glSpriteParameterivSGIX(GLenum target, const GLint * v);

glStartInstrumentsSGIX

public void glStartInstrumentsSGIX()

    Entry point (through function pointer) to C language function:
    void glStartInstrumentsSGIX(void);

glStencilFunc

public void glStencilFunc(int func,
                          int ref,
                          int mask)

    Interface to C language function:
    void glStencilFunc(GLenum func, GLint ref, GLuint mask);

glStencilFuncSeparate

public void glStencilFuncSeparate(int frontfunc,
                                  int backfunc,
                                  int ref,
                                  int mask)

    Entry point (through function pointer) to C language function:
    void glStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);

glStencilFuncSeparateATI

public void glStencilFuncSeparateATI(int frontfunc,
                                     int backfunc,
                                     int ref,
                                     int mask)

    Entry point (through function pointer) to C language function:
    void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);

glStencilMask

public void glStencilMask(int mask)

    Interface to C language function:
    void glStencilMask(GLuint mask);

glStencilMaskSeparate

public void glStencilMaskSeparate(int target,
                                  int id)

    Entry point (through function pointer) to C language function:
    void glStencilMaskSeparate(GLenum target, GLuint id);

glStencilOp

public void glStencilOp(int fail,
                        int zfail,
                        int zpass)

    Interface to C language function:
    void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);

glStencilOpSeparate

public void glStencilOpSeparate(int sfactorRGB,
                                int dfactorRGB,
                                int sfactorAlpha,
                                int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glStencilOpSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glStencilOpSeparateATI

public void glStencilOpSeparateATI(int sfactorRGB,
                                   int dfactorRGB,
                                   int sfactorAlpha,
                                   int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glStencilOpSeparateATI(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glStopInstrumentsSGIX

public void glStopInstrumentsSGIX(int count)

    Entry point (through function pointer) to C language function:
    void glStopInstrumentsSGIX(GLint count);

glStringMarkerGREMEDY

public void glStringMarkerGREMEDY(int length,
                                  Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glStringMarkerGREMEDY(GLsizei length, const GLvoid * pointer);

glSwapAPPLE

public void glSwapAPPLE()

    Entry point (through function pointer) to C language function:
    void glSwapAPPLE(void);

glSwizzleEXT

public void glSwizzleEXT(int stage,
                         int portion,
                         int variable,
                         int input,
                         int mapping,
                         int componentUsage)

    Entry point (through function pointer) to C language function:
    void glSwizzleEXT(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);

glTagSampleBufferSGIX

public void glTagSampleBufferSGIX()

    Entry point (through function pointer) to C language function:
    void glTagSampleBufferSGIX(void);

glTbufferMask3DFX

public void glTbufferMask3DFX(int mode)

    Entry point (through function pointer) to C language function:
    void glTbufferMask3DFX(GLuint mode);

glTestFenceAPPLE

public boolean glTestFenceAPPLE(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glTestFenceAPPLE(GLuint id);

glTestFenceNV

public boolean glTestFenceNV(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glTestFenceNV(GLuint id);

glTestObjectAPPLE

public boolean glTestObjectAPPLE(int id,
                                 int cap)

    Entry point (through function pointer) to C language function:
    GLboolean glTestObjectAPPLE(GLenum id, GLuint cap);

glTexBumpParameterfvATI

public void glTexBumpParameterfvATI(int target,
                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexBumpParameterfvATI(GLenum target, const GLfloat * v);

glTexBumpParameterfvATI

public void glTexBumpParameterfvATI(int target,
                                    float[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexBumpParameterfvATI(GLenum target, const GLfloat * v);

glTexBumpParameterivATI

public void glTexBumpParameterivATI(int target,
                                    IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexBumpParameterivATI(GLenum target, const GLint * v);

glTexBumpParameterivATI

public void glTexBumpParameterivATI(int target,
                                    int[] v,
                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexBumpParameterivATI(GLenum target, const GLint * v);

glTexCoord1d

public void glTexCoord1d(double s)

    Interface to C language function:
    void glTexCoord1d(GLdouble s);

glTexCoord1dv

public void glTexCoord1dv(DoubleBuffer v)

    Interface to C language function:
    void glTexCoord1dv(const GLdouble * v);

glTexCoord1dv

public void glTexCoord1dv(double[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord1dv(const GLdouble * v);

glTexCoord1f

public void glTexCoord1f(float s)

    Interface to C language function:
    void glTexCoord1f(GLfloat s);

glTexCoord1fv

public void glTexCoord1fv(FloatBuffer v)

    Interface to C language function:
    void glTexCoord1fv(const GLfloat * v);

glTexCoord1fv

public void glTexCoord1fv(float[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord1fv(const GLfloat * v);

glTexCoord1hNV

public void glTexCoord1hNV(short factor)

    Entry point (through function pointer) to C language function:
    void glTexCoord1hNV(GLhalfNV factor);

glTexCoord1hvNV

public void glTexCoord1hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord1hvNV(const GLhalfNV * v);

glTexCoord1hvNV

public void glTexCoord1hvNV(short[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord1hvNV(const GLhalfNV * v);

glTexCoord1i

public void glTexCoord1i(int s)

    Interface to C language function:
    void glTexCoord1i(GLint s);

glTexCoord1iv

public void glTexCoord1iv(IntBuffer v)

    Interface to C language function:
    void glTexCoord1iv(const GLint * v);

glTexCoord1iv

public void glTexCoord1iv(int[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord1iv(const GLint * v);

glTexCoord1s

public void glTexCoord1s(short s)

    Interface to C language function:
    void glTexCoord1s(GLshort s);

glTexCoord1sv

public void glTexCoord1sv(ShortBuffer v)

    Interface to C language function:
    void glTexCoord1sv(const GLshort * v);

glTexCoord1sv

public void glTexCoord1sv(short[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord1sv(const GLshort * v);

glTexCoord2d

public void glTexCoord2d(double s,
                         double t)

    Interface to C language function:
    void glTexCoord2d(GLdouble s, GLdouble t);

glTexCoord2dv

public void glTexCoord2dv(DoubleBuffer v)

    Interface to C language function:
    void glTexCoord2dv(const GLdouble * v);

glTexCoord2dv

public void glTexCoord2dv(double[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord2dv(const GLdouble * v);

glTexCoord2f

public void glTexCoord2f(float s,
                         float t)

    Interface to C language function:
    void glTexCoord2f(GLfloat s, GLfloat t);

glTexCoord2fColor3fVertex3fSUN

public void glTexCoord2fColor3fVertex3fSUN(float s,
                                           float t,
                                           float p,
                                           float q,
                                           float x,
                                           float y,
                                           float z,
                                           float w)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glTexCoord2fColor3fVertex3fvSUN

public void glTexCoord2fColor3fVertex3fvSUN(FloatBuffer c,
                                            FloatBuffer n,
                                            FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fColor3fVertex3fvSUN

public void glTexCoord2fColor3fVertex3fvSUN(float[] c,
                                            int c_offset,
                                            float[] n,
                                            int n_offset,
                                            float[] v,
                                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fColor4fNormal3fVertex3fSUN

public void glTexCoord2fColor4fNormal3fVertex3fSUN(float s,
                                                   float t,
                                                   float r,
                                                   float g,
                                                   float b,
                                                   float a,
                                                   float nx,
                                                   float ny,
                                                   float nz,
                                                   float x,
                                                   float y,
                                                   float z)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

glTexCoord2fColor4fNormal3fVertex3fvSUN

public void glTexCoord2fColor4fNormal3fVertex3fvSUN(FloatBuffer tc,
                                                    FloatBuffer c,
                                                    FloatBuffer n,
                                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fColor4fNormal3fVertex3fvSUN

public void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc,
                                                    int tc_offset,
                                                    float[] c,
                                                    int c_offset,
                                                    float[] n,
                                                    int n_offset,
                                                    float[] v,
                                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fColor4ubVertex3fSUN

public void glTexCoord2fColor4ubVertex3fSUN(float s,
                                            float t,
                                            byte r,
                                            byte g,
                                            byte b,
                                            byte a,
                                            float x,
                                            float y,
                                            float z)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

glTexCoord2fColor4ubVertex3fvSUN

public void glTexCoord2fColor4ubVertex3fvSUN(FloatBuffer tc,
                                             ByteBuffer c,
                                             FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v);

glTexCoord2fColor4ubVertex3fvSUN

public void glTexCoord2fColor4ubVertex3fvSUN(float[] tc,
                                             int tc_offset,
                                             byte[] c,
                                             int c_offset,
                                             float[] v,
                                             int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v);

glTexCoord2fNormal3fVertex3fSUN

public void glTexCoord2fNormal3fVertex3fSUN(float s,
                                            float t,
                                            float p,
                                            float q,
                                            float x,
                                            float y,
                                            float z,
                                            float w)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glTexCoord2fNormal3fVertex3fvSUN

public void glTexCoord2fNormal3fVertex3fvSUN(FloatBuffer c,
                                             FloatBuffer n,
                                             FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fNormal3fVertex3fvSUN

public void glTexCoord2fNormal3fVertex3fvSUN(float[] c,
                                             int c_offset,
                                             float[] n,
                                             int n_offset,
                                             float[] v,
                                             int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord2fVertex3fSUN

public void glTexCoord2fVertex3fSUN(float s,
                                    float t,
                                    float x,
                                    float y,
                                    float z)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);

glTexCoord2fVertex3fvSUN

public void glTexCoord2fVertex3fvSUN(FloatBuffer c,
                                     FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glTexCoord2fVertex3fvSUN

public void glTexCoord2fVertex3fvSUN(float[] c,
                                     int c_offset,
                                     float[] v,
                                     int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2fVertex3fvSUN(const GLfloat * c, const GLfloat * v);

glTexCoord2fv

public void glTexCoord2fv(FloatBuffer v)

    Interface to C language function:
    void glTexCoord2fv(const GLfloat * v);

glTexCoord2fv

public void glTexCoord2fv(float[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord2fv(const GLfloat * v);

glTexCoord2hNV

public void glTexCoord2hNV(short x,
                           short y)

    Entry point (through function pointer) to C language function:
    void glTexCoord2hNV(GLhalfNV x, GLhalfNV y);

glTexCoord2hvNV

public void glTexCoord2hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord2hvNV(const GLhalfNV * v);

glTexCoord2hvNV

public void glTexCoord2hvNV(short[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord2hvNV(const GLhalfNV * v);

glTexCoord2i

public void glTexCoord2i(int s,
                         int t)

    Interface to C language function:
    void glTexCoord2i(GLint s, GLint t);

glTexCoord2iv

public void glTexCoord2iv(IntBuffer v)

    Interface to C language function:
    void glTexCoord2iv(const GLint * v);

glTexCoord2iv

public void glTexCoord2iv(int[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord2iv(const GLint * v);

glTexCoord2s

public void glTexCoord2s(short s,
                         short t)

    Interface to C language function:
    void glTexCoord2s(GLshort s, GLshort t);

glTexCoord2sv

public void glTexCoord2sv(ShortBuffer v)

    Interface to C language function:
    void glTexCoord2sv(const GLshort * v);

glTexCoord2sv

public void glTexCoord2sv(short[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord2sv(const GLshort * v);

glTexCoord3d

public void glTexCoord3d(double s,
                         double t,
                         double r)

    Interface to C language function:
    void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);

glTexCoord3dv

public void glTexCoord3dv(DoubleBuffer v)

    Interface to C language function:
    void glTexCoord3dv(const GLdouble * v);

glTexCoord3dv

public void glTexCoord3dv(double[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord3dv(const GLdouble * v);

glTexCoord3f

public void glTexCoord3f(float s,
                         float t,
                         float r)

    Interface to C language function:
    void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);

glTexCoord3fv

public void glTexCoord3fv(FloatBuffer v)

    Interface to C language function:
    void glTexCoord3fv(const GLfloat * v);

glTexCoord3fv

public void glTexCoord3fv(float[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord3fv(const GLfloat * v);

glTexCoord3hNV

public void glTexCoord3hNV(short red,
                           short green,
                           short blue)

    Entry point (through function pointer) to C language function:
    void glTexCoord3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

glTexCoord3hvNV

public void glTexCoord3hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord3hvNV(const GLhalfNV * v);

glTexCoord3hvNV

public void glTexCoord3hvNV(short[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord3hvNV(const GLhalfNV * v);

glTexCoord3i

public void glTexCoord3i(int s,
                         int t,
                         int r)

    Interface to C language function:
    void glTexCoord3i(GLint s, GLint t, GLint r);

glTexCoord3iv

public void glTexCoord3iv(IntBuffer v)

    Interface to C language function:
    void glTexCoord3iv(const GLint * v);

glTexCoord3iv

public void glTexCoord3iv(int[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord3iv(const GLint * v);

glTexCoord3s

public void glTexCoord3s(short s,
                         short t,
                         short r)

    Interface to C language function:
    void glTexCoord3s(GLshort s, GLshort t, GLshort r);

glTexCoord3sv

public void glTexCoord3sv(ShortBuffer v)

    Interface to C language function:
    void glTexCoord3sv(const GLshort * v);

glTexCoord3sv

public void glTexCoord3sv(short[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord3sv(const GLshort * v);

glTexCoord4d

public void glTexCoord4d(double s,
                         double t,
                         double r,
                         double q)

    Interface to C language function:
    void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glTexCoord4dv

public void glTexCoord4dv(DoubleBuffer v)

    Interface to C language function:
    void glTexCoord4dv(const GLdouble * v);

glTexCoord4dv

public void glTexCoord4dv(double[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord4dv(const GLdouble * v);

glTexCoord4f

public void glTexCoord4f(float s,
                         float t,
                         float r,
                         float q)

    Interface to C language function:
    void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glTexCoord4fColor4fNormal3fVertex4fSUN

public void glTexCoord4fColor4fNormal3fVertex4fSUN(float s,
                                                   float t,
                                                   float p,
                                                   float q,
                                                   float r,
                                                   float g,
                                                   float b,
                                                   float a,
                                                   float nx,
                                                   float ny,
                                                   float nz,
                                                   float x,
                                                   float y,
                                                   float z,
                                                   float w)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glTexCoord4fColor4fNormal3fVertex4fvSUN

public void glTexCoord4fColor4fNormal3fVertex4fvSUN(FloatBuffer tc,
                                                    FloatBuffer c,
                                                    FloatBuffer n,
                                                    FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord4fColor4fNormal3fVertex4fvSUN

public void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc,
                                                    int tc_offset,
                                                    float[] c,
                                                    int c_offset,
                                                    float[] n,
                                                    int n_offset,
                                                    float[] v,
                                                    int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

glTexCoord4fVertex4fSUN

public void glTexCoord4fVertex4fSUN(float s,
                                    float t,
                                    float p,
                                    float q,
                                    float x,
                                    float y,
                                    float z,
                                    float w)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glTexCoord4fVertex4fvSUN

public void glTexCoord4fVertex4fvSUN(FloatBuffer c,
                                     FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fVertex4fvSUN(const GLfloat * c, const GLfloat * v);

glTexCoord4fVertex4fvSUN

public void glTexCoord4fVertex4fvSUN(float[] c,
                                     int c_offset,
                                     float[] v,
                                     int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord4fVertex4fvSUN(const GLfloat * c, const GLfloat * v);

glTexCoord4fv

public void glTexCoord4fv(FloatBuffer v)

    Interface to C language function:
    void glTexCoord4fv(const GLfloat * v);

glTexCoord4fv

public void glTexCoord4fv(float[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord4fv(const GLfloat * v);

glTexCoord4hNV

public void glTexCoord4hNV(short x,
                           short y,
                           short z,
                           short w)

    Entry point (through function pointer) to C language function:
    void glTexCoord4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);

glTexCoord4hvNV

public void glTexCoord4hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glTexCoord4hvNV(const GLhalfNV * v);

glTexCoord4hvNV

public void glTexCoord4hvNV(short[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glTexCoord4hvNV(const GLhalfNV * v);

glTexCoord4i

public void glTexCoord4i(int s,
                         int t,
                         int r,
                         int q)

    Interface to C language function:
    void glTexCoord4i(GLint s, GLint t, GLint r, GLint q);

glTexCoord4iv

public void glTexCoord4iv(IntBuffer v)

    Interface to C language function:
    void glTexCoord4iv(const GLint * v);

glTexCoord4iv

public void glTexCoord4iv(int[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord4iv(const GLint * v);

glTexCoord4s

public void glTexCoord4s(short s,
                         short t,
                         short r,
                         short q)

    Interface to C language function:
    void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);

glTexCoord4sv

public void glTexCoord4sv(ShortBuffer v)

    Interface to C language function:
    void glTexCoord4sv(const GLshort * v);

glTexCoord4sv

public void glTexCoord4sv(short[] v,
                          int v_offset)

    Interface to C language function:
    void glTexCoord4sv(const GLshort * v);

glTexCoordPointer

public void glTexCoordPointer(int size,
                              int type,
                              int stride,
                              Buffer ptr)

    Interface to C language function:
    void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glTexCoordPointer

public void glTexCoordPointer(int size,
                              int type,
                              int stride,
                              long ptr_buffer_offset)

    Interface to C language function:
    void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

glTexEnvf

public void glTexEnvf(int target,
                      int pname,
                      float param)

    Interface to C language function:
    void glTexEnvf(GLenum target, GLenum pname, GLfloat param);

glTexEnvfv

public void glTexEnvfv(int target,
                       int pname,
                       FloatBuffer params)

    Interface to C language function:
    void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params);

glTexEnvfv

public void glTexEnvfv(int target,
                       int pname,
                       float[] params,
                       int params_offset)

    Interface to C language function:
    void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params);

glTexEnvi

public void glTexEnvi(int target,
                      int pname,
                      int param)

    Interface to C language function:
    void glTexEnvi(GLenum target, GLenum pname, GLint param);

glTexEnviv

public void glTexEnviv(int target,
                       int pname,
                       IntBuffer params)

    Interface to C language function:
    void glTexEnviv(GLenum target, GLenum pname, const GLint * params);

glTexEnviv

public void glTexEnviv(int target,
                       int pname,
                       int[] params,
                       int params_offset)

    Interface to C language function:
    void glTexEnviv(GLenum target, GLenum pname, const GLint * params);

glTexFilterFuncSGIS

public void glTexFilterFuncSGIS(int target,
                                int filter,
                                int n,
                                FloatBuffer weights)

    Entry point (through function pointer) to C language function:
    void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights);

glTexFilterFuncSGIS

public void glTexFilterFuncSGIS(int target,
                                int filter,
                                int n,
                                float[] weights,
                                int weights_offset)

    Entry point (through function pointer) to C language function:
    void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights);

glTexGend

public void glTexGend(int coord,
                      int pname,
                      double param)

    Interface to C language function:
    void glTexGend(GLenum coord, GLenum pname, GLdouble param);

glTexGendv

public void glTexGendv(int coord,
                       int pname,
                       DoubleBuffer params)

    Interface to C language function:
    void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params);

glTexGendv

public void glTexGendv(int coord,
                       int pname,
                       double[] params,
                       int params_offset)

    Interface to C language function:
    void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params);

glTexGenf

public void glTexGenf(int coord,
                      int pname,
                      float param)

    Interface to C language function:
    void glTexGenf(GLenum coord, GLenum pname, GLfloat param);

glTexGenfv

public void glTexGenfv(int coord,
                       int pname,
                       FloatBuffer params)

    Interface to C language function:
    void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params);

glTexGenfv

public void glTexGenfv(int coord,
                       int pname,
                       float[] params,
                       int params_offset)

    Interface to C language function:
    void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params);

glTexGeni

public void glTexGeni(int coord,
                      int pname,
                      int param)

    Interface to C language function:
    void glTexGeni(GLenum coord, GLenum pname, GLint param);

glTexGeniv

public void glTexGeniv(int coord,
                       int pname,
                       IntBuffer params)

    Interface to C language function:
    void glTexGeniv(GLenum coord, GLenum pname, const GLint * params);

glTexGeniv

public void glTexGeniv(int coord,
                       int pname,
                       int[] params,
                       int params_offset)

    Interface to C language function:
    void glTexGeniv(GLenum coord, GLenum pname, const GLint * params);

glTexImage1D

public void glTexImage1D(int target,
                         int level,
                         int internalFormat,
                         int width,
                         int border,
                         int format,
                         int type,
                         Buffer pixels)

    Interface to C language function:
    void glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage1D

public void glTexImage1D(int target,
                         int level,
                         int internalFormat,
                         int width,
                         int border,
                         int format,
                         int type,
                         long pixels_buffer_offset)

    Interface to C language function:
    void glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage2D

public void glTexImage2D(int target,
                         int level,
                         int internalFormat,
                         int width,
                         int height,
                         int border,
                         int format,
                         int type,
                         Buffer pixels)

    Interface to C language function:
    void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage2D

public void glTexImage2D(int target,
                         int level,
                         int internalFormat,
                         int width,
                         int height,
                         int border,
                         int format,
                         int type,
                         long pixels_buffer_offset)

    Interface to C language function:
    void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage3D

public void glTexImage3D(int target,
                         int level,
                         int internalformat,
                         int width,
                         int height,
                         int depth,
                         int border,
                         int format,
                         int type,
                         Buffer pixels)

    Entry point (through function pointer) to C language function:
    void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage3D

public void glTexImage3D(int target,
                         int level,
                         int internalformat,
                         int width,
                         int height,
                         int depth,
                         int border,
                         int format,
                         int type,
                         long pixels_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexImage4DSGIS

public void glTexImage4DSGIS(int target,
                             int level,
                             int internalformat,
                             int width,
                             int height,
                             int depth,
                             int size4d,
                             int border,
                             int format,
                             int type,
                             Buffer pixels)

    Entry point (through function pointer) to C language function:
    void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid * pixels);

glTexParameterf

public void glTexParameterf(int target,
                            int pname,
                            float param)

    Interface to C language function:
    void glTexParameterf(GLenum target, GLenum pname, GLfloat param);

glTexParameterfv

public void glTexParameterfv(int target,
                             int pname,
                             FloatBuffer params)

    Interface to C language function:
    void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glTexParameterfv

public void glTexParameterfv(int target,
                             int pname,
                             float[] params,
                             int params_offset)

    Interface to C language function:
    void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params);

glTexParameteri

public void glTexParameteri(int target,
                            int pname,
                            int param)

    Interface to C language function:
    void glTexParameteri(GLenum target, GLenum pname, GLint param);

glTexParameteriv

public void glTexParameteriv(int target,
                             int pname,
                             IntBuffer params)

    Interface to C language function:
    void glTexParameteriv(GLenum target, GLenum pname, const GLint * params);

glTexParameteriv

public void glTexParameteriv(int target,
                             int pname,
                             int[] params,
                             int params_offset)

    Interface to C language function:
    void glTexParameteriv(GLenum target, GLenum pname, const GLint * params);

glTexSubImage1D

public void glTexSubImage1D(int target,
                            int level,
                            int xoffset,
                            int width,
                            int format,
                            int type,
                            Buffer pixels)

    Interface to C language function:
    void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage1D

public void glTexSubImage1D(int target,
                            int level,
                            int xoffset,
                            int width,
                            int format,
                            int type,
                            long pixels_buffer_offset)

    Interface to C language function:
    void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage2D

public void glTexSubImage2D(int target,
                            int level,
                            int xoffset,
                            int yoffset,
                            int width,
                            int height,
                            int format,
                            int type,
                            Buffer pixels)

    Interface to C language function:
    void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage2D

public void glTexSubImage2D(int target,
                            int level,
                            int xoffset,
                            int yoffset,
                            int width,
                            int height,
                            int format,
                            int type,
                            long pixels_buffer_offset)

    Interface to C language function:
    void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage3D

public void glTexSubImage3D(int target,
                            int level,
                            int xoffset,
                            int yoffset,
                            int zoffset,
                            int width,
                            int height,
                            int depth,
                            int format,
                            int type,
                            Buffer pixels)

    Entry point (through function pointer) to C language function:
    void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage3D

public void glTexSubImage3D(int target,
                            int level,
                            int xoffset,
                            int yoffset,
                            int zoffset,
                            int width,
                            int height,
                            int depth,
                            int format,
                            int type,
                            long pixels_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);

glTexSubImage4DSGIS

public void glTexSubImage4DSGIS(int target,
                                int level,
                                int xoffset,
                                int yoffset,
                                int zoffset,
                                int woffset,
                                int width,
                                int height,
                                int depth,
                                int size4d,
                                int format,
                                int type,
                                Buffer pixels)

    Entry point (through function pointer) to C language function:
    void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid * pixels);

glTextureColorMaskSGIS

public void glTextureColorMaskSGIS(boolean red,
                                   boolean green,
                                   boolean blue,
                                   boolean alpha)

    Entry point (through function pointer) to C language function:
    void glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

glTextureLightEXT

public void glTextureLightEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glTextureLightEXT(GLenum mode);

glTextureMaterialEXT

public void glTextureMaterialEXT(int target,
                                 int id)

    Entry point (through function pointer) to C language function:
    void glTextureMaterialEXT(GLenum target, GLenum id);

glTextureNormalEXT

public void glTextureNormalEXT(int mode)

    Entry point (through function pointer) to C language function:
    void glTextureNormalEXT(GLenum mode);

glTextureRangeAPPLE

public void glTextureRangeAPPLE(int target,
                                int length,
                                Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid * pointer);

glTrackMatrixNV

public void glTrackMatrixNV(int sfactorRGB,
                            int dfactorRGB,
                            int sfactorAlpha,
                            int dfactorAlpha)

    Entry point (through function pointer) to C language function:
    void glTrackMatrixNV(GLenum sfactorRGB, GLuint dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

glTranslated

public void glTranslated(double x,
                         double y,
                         double z)

    Interface to C language function:
    void glTranslated(GLdouble x, GLdouble y, GLdouble z);

glTranslatef

public void glTranslatef(float x,
                         float y,
                         float z)

    Interface to C language function:
    void glTranslatef(GLfloat x, GLfloat y, GLfloat z);

glUniform1f

public void glUniform1f(int location,
                        float v0)

    Entry point (through function pointer) to C language function:
    void glUniform1f(GLint location, GLfloat v0);

glUniform1fARB

public void glUniform1fARB(int location,
                           float v0)

    Entry point (through function pointer) to C language function:
    void glUniform1fARB(GLint location, GLfloat v0);

glUniform1fv

public void glUniform1fv(int location,
                         int count,
                         FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform1fv(GLint location, GLsizei count, const GLfloat * value);

glUniform1fv

public void glUniform1fv(int location,
                         int count,
                         float[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform1fv(GLint location, GLsizei count, const GLfloat * value);

glUniform1fvARB

public void glUniform1fvARB(int location,
                            int count,
                            FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform1fvARB

public void glUniform1fvARB(int location,
                            int count,
                            float[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform1i

public void glUniform1i(int x,
                        int y)

    Entry point (through function pointer) to C language function:
    void glUniform1i(GLint x, GLint y);

glUniform1iARB

public void glUniform1iARB(int x,
                           int y)

    Entry point (through function pointer) to C language function:
    void glUniform1iARB(GLint x, GLint y);

glUniform1iv

public void glUniform1iv(int location,
                         int count,
                         IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform1iv(GLint location, GLsizei count, const GLint * value);

glUniform1iv

public void glUniform1iv(int location,
                         int count,
                         int[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform1iv(GLint location, GLsizei count, const GLint * value);

glUniform1ivARB

public void glUniform1ivARB(int location,
                            int count,
                            IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform1ivARB(GLint location, GLsizei count, const GLint * value);

glUniform1ivARB

public void glUniform1ivARB(int location,
                            int count,
                            int[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform1ivARB(GLint location, GLsizei count, const GLint * value);

glUniform2f

public void glUniform2f(int location,
                        float v0,
                        float v1)

    Entry point (through function pointer) to C language function:
    void glUniform2f(GLint location, GLfloat v0, GLfloat v1);

glUniform2fARB

public void glUniform2fARB(int location,
                           float v0,
                           float v1)

    Entry point (through function pointer) to C language function:
    void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);

glUniform2fv

public void glUniform2fv(int location,
                         int count,
                         FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform2fv(GLint location, GLsizei count, const GLfloat * value);

glUniform2fv

public void glUniform2fv(int location,
                         int count,
                         float[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform2fv(GLint location, GLsizei count, const GLfloat * value);

glUniform2fvARB

public void glUniform2fvARB(int location,
                            int count,
                            FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform2fvARB

public void glUniform2fvARB(int location,
                            int count,
                            float[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform2i

public void glUniform2i(int red,
                        int green,
                        int blue)

    Entry point (through function pointer) to C language function:
    void glUniform2i(GLint red, GLint green, GLint blue);

glUniform2iARB

public void glUniform2iARB(int red,
                           int green,
                           int blue)

    Entry point (through function pointer) to C language function:
    void glUniform2iARB(GLint red, GLint green, GLint blue);

glUniform2iv

public void glUniform2iv(int location,
                         int count,
                         IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform2iv(GLint location, GLsizei count, const GLint * value);

glUniform2iv

public void glUniform2iv(int location,
                         int count,
                         int[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform2iv(GLint location, GLsizei count, const GLint * value);

glUniform2ivARB

public void glUniform2ivARB(int location,
                            int count,
                            IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform2ivARB(GLint location, GLsizei count, const GLint * value);

glUniform2ivARB

public void glUniform2ivARB(int location,
                            int count,
                            int[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform2ivARB(GLint location, GLsizei count, const GLint * value);

glUniform3f

public void glUniform3f(int location,
                        float v0,
                        float v1,
                        float v2)

    Entry point (through function pointer) to C language function:
    void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

glUniform3fARB

public void glUniform3fARB(int location,
                           float v0,
                           float v1,
                           float v2)

    Entry point (through function pointer) to C language function:
    void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

glUniform3fv

public void glUniform3fv(int location,
                         int count,
                         FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform3fv(GLint location, GLsizei count, const GLfloat * value);

glUniform3fv

public void glUniform3fv(int location,
                         int count,
                         float[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform3fv(GLint location, GLsizei count, const GLfloat * value);

glUniform3fvARB

public void glUniform3fvARB(int location,
                            int count,
                            FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform3fvARB

public void glUniform3fvARB(int location,
                            int count,
                            float[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform3i

public void glUniform3i(int location,
                        int v0,
                        int v1,
                        int v2)

    Entry point (through function pointer) to C language function:
    void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);

glUniform3iARB

public void glUniform3iARB(int location,
                           int v0,
                           int v1,
                           int v2)

    Entry point (through function pointer) to C language function:
    void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);

glUniform3iv

public void glUniform3iv(int location,
                         int count,
                         IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform3iv(GLint location, GLsizei count, const GLint * value);

glUniform3iv

public void glUniform3iv(int location,
                         int count,
                         int[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform3iv(GLint location, GLsizei count, const GLint * value);

glUniform3ivARB

public void glUniform3ivARB(int location,
                            int count,
                            IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform3ivARB(GLint location, GLsizei count, const GLint * value);

glUniform3ivARB

public void glUniform3ivARB(int location,
                            int count,
                            int[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform3ivARB(GLint location, GLsizei count, const GLint * value);

glUniform4f

public void glUniform4f(int location,
                        float v0,
                        float v1,
                        float v2,
                        float v3)

    Entry point (through function pointer) to C language function:
    void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

glUniform4fARB

public void glUniform4fARB(int location,
                           float v0,
                           float v1,
                           float v2,
                           float v3)

    Entry point (through function pointer) to C language function:
    void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

glUniform4fv

public void glUniform4fv(int location,
                         int count,
                         FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform4fv(GLint location, GLsizei count, const GLfloat * value);

glUniform4fv

public void glUniform4fv(int location,
                         int count,
                         float[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform4fv(GLint location, GLsizei count, const GLfloat * value);

glUniform4fvARB

public void glUniform4fvARB(int location,
                            int count,
                            FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform4fvARB

public void glUniform4fvARB(int location,
                            int count,
                            float[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value);

glUniform4i

public void glUniform4i(int location,
                        int v0,
                        int v1,
                        int v2,
                        int v3)

    Entry point (through function pointer) to C language function:
    void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

glUniform4iARB

public void glUniform4iARB(int location,
                           int v0,
                           int v1,
                           int v2,
                           int v3)

    Entry point (through function pointer) to C language function:
    void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

glUniform4iv

public void glUniform4iv(int location,
                         int count,
                         IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform4iv(GLint location, GLsizei count, const GLint * value);

glUniform4iv

public void glUniform4iv(int location,
                         int count,
                         int[] value,
                         int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform4iv(GLint location, GLsizei count, const GLint * value);

glUniform4ivARB

public void glUniform4ivARB(int location,
                            int count,
                            IntBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniform4ivARB(GLint location, GLsizei count, const GLint * value);

glUniform4ivARB

public void glUniform4ivARB(int location,
                            int count,
                            int[] value,
                            int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniform4ivARB(GLint location, GLsizei count, const GLint * value);

glUniformMatrix2fv

public void glUniformMatrix2fv(int location,
                               int count,
                               boolean transpose,
                               FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix2fv

public void glUniformMatrix2fv(int location,
                               int count,
                               boolean transpose,
                               float[] value,
                               int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix2fvARB

public void glUniformMatrix2fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix2fvARB

public void glUniformMatrix2fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  float[] value,
                                  int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix3fv

public void glUniformMatrix3fv(int location,
                               int count,
                               boolean transpose,
                               FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix3fv

public void glUniformMatrix3fv(int location,
                               int count,
                               boolean transpose,
                               float[] value,
                               int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix3fvARB

public void glUniformMatrix3fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix3fvARB

public void glUniformMatrix3fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  float[] value,
                                  int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix4fv

public void glUniformMatrix4fv(int location,
                               int count,
                               boolean transpose,
                               FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix4fv

public void glUniformMatrix4fv(int location,
                               int count,
                               boolean transpose,
                               float[] value,
                               int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix4fvARB

public void glUniformMatrix4fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  FloatBuffer value)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUniformMatrix4fvARB

public void glUniformMatrix4fvARB(int location,
                                  int count,
                                  boolean transpose,
                                  float[] value,
                                  int value_offset)

    Entry point (through function pointer) to C language function:
    void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

glUnlockArraysEXT

public void glUnlockArraysEXT()

    Entry point (through function pointer) to C language function:
    void glUnlockArraysEXT(void);

glUnmapBuffer

public boolean glUnmapBuffer(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glUnmapBuffer(GLenum id);

glUnmapBufferARB

public boolean glUnmapBufferARB(int id)

    Entry point (through function pointer) to C language function:
    GLboolean glUnmapBufferARB(GLenum id);

glUpdateObjectBufferATI

public void glUpdateObjectBufferATI(int buffer,
                                    int offset,
                                    int size,
                                    Buffer pointer,
                                    int preserve)

    Entry point (through function pointer) to C language function:
    void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid * pointer, GLenum preserve);

glUseProgram

public void glUseProgram(int mode)

    Entry point (through function pointer) to C language function:
    void glUseProgram(GLuint mode);

glUseProgramObjectARB

public void glUseProgramObjectARB(int mode)

    Entry point (through function pointer) to C language function:
    void glUseProgramObjectARB(GLhandleARB mode);

glValidateProgram

public void glValidateProgram(int mode)

    Entry point (through function pointer) to C language function:
    void glValidateProgram(GLuint mode);

glValidateProgramARB

public void glValidateProgramARB(int mode)

    Entry point (through function pointer) to C language function:
    void glValidateProgramARB(GLhandleARB mode);

glVariantArrayObjectATI

public void glVariantArrayObjectATI(int id,
                                    int type,
                                    int stride,
                                    int buffer,
                                    int offset)

    Entry point (through function pointer) to C language function:
    void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);

glVariantPointerEXT

public void glVariantPointerEXT(int id,
                                int type,
                                int stride,
                                Buffer addr)

    Entry point (through function pointer) to C language function:
    void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid * addr);

glVariantPointerEXT

public void glVariantPointerEXT(int id,
                                int type,
                                int stride,
                                long addr_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid * addr);

glVariantbvEXT

public void glVariantbvEXT(int index,
                           ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantbvEXT(GLuint index, const GLbyte * v);

glVariantbvEXT

public void glVariantbvEXT(int index,
                           byte[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantbvEXT(GLuint index, const GLbyte * v);

glVariantdvEXT

public void glVariantdvEXT(int target,
                           DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantdvEXT(GLuint target, const GLdouble * v);

glVariantdvEXT

public void glVariantdvEXT(int target,
                           double[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantdvEXT(GLuint target, const GLdouble * v);

glVariantfvEXT

public void glVariantfvEXT(int target,
                           FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantfvEXT(GLuint target, const GLfloat * v);

glVariantfvEXT

public void glVariantfvEXT(int target,
                           float[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantfvEXT(GLuint target, const GLfloat * v);

glVariantivEXT

public void glVariantivEXT(int target,
                           IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantivEXT(GLuint target, const GLint * v);

glVariantivEXT

public void glVariantivEXT(int target,
                           int[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantivEXT(GLuint target, const GLint * v);

glVariantsvEXT

public void glVariantsvEXT(int target,
                           ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantsvEXT(GLuint target, const GLshort * v);

glVariantsvEXT

public void glVariantsvEXT(int target,
                           short[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantsvEXT(GLuint target, const GLshort * v);

glVariantubvEXT

public void glVariantubvEXT(int index,
                            ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantubvEXT(GLuint index, const GLubyte * v);

glVariantubvEXT

public void glVariantubvEXT(int index,
                            byte[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantubvEXT(GLuint index, const GLubyte * v);

glVariantuivEXT

public void glVariantuivEXT(int index,
                            IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantuivEXT(GLuint index, const GLuint * v);

glVariantuivEXT

public void glVariantuivEXT(int index,
                            int[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantuivEXT(GLuint index, const GLuint * v);

glVariantusvEXT

public void glVariantusvEXT(int index,
                            ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVariantusvEXT(GLuint index, const GLushort * v);

glVariantusvEXT

public void glVariantusvEXT(int index,
                            short[] v,
                            int v_offset)

    Entry point (through function pointer) to C language function:
    void glVariantusvEXT(GLuint index, const GLushort * v);

glVertex2d

public void glVertex2d(double x,
                       double y)

    Interface to C language function:
    void glVertex2d(GLdouble x, GLdouble y);

glVertex2dv

public void glVertex2dv(DoubleBuffer v)

    Interface to C language function:
    void glVertex2dv(const GLdouble * v);

glVertex2dv

public void glVertex2dv(double[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex2dv(const GLdouble * v);

glVertex2f

public void glVertex2f(float x,
                       float y)

    Interface to C language function:
    void glVertex2f(GLfloat x, GLfloat y);

glVertex2fv

public void glVertex2fv(FloatBuffer v)

    Interface to C language function:
    void glVertex2fv(const GLfloat * v);

glVertex2fv

public void glVertex2fv(float[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex2fv(const GLfloat * v);

glVertex2hNV

public void glVertex2hNV(short x,
                         short y)

    Entry point (through function pointer) to C language function:
    void glVertex2hNV(GLhalfNV x, GLhalfNV y);

glVertex2hvNV

public void glVertex2hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertex2hvNV(const GLhalfNV * v);

glVertex2hvNV

public void glVertex2hvNV(short[] v,
                          int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertex2hvNV(const GLhalfNV * v);

glVertex2i

public void glVertex2i(int x,
                       int y)

    Interface to C language function:
    void glVertex2i(GLint x, GLint y);

glVertex2iv

public void glVertex2iv(IntBuffer v)

    Interface to C language function:
    void glVertex2iv(const GLint * v);

glVertex2iv

public void glVertex2iv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex2iv(const GLint * v);

glVertex2s

public void glVertex2s(short x,
                       short y)

    Interface to C language function:
    void glVertex2s(GLshort x, GLshort y);

glVertex2sv

public void glVertex2sv(ShortBuffer v)

    Interface to C language function:
    void glVertex2sv(const GLshort * v);

glVertex2sv

public void glVertex2sv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex2sv(const GLshort * v);

glVertex3d

public void glVertex3d(double x,
                       double y,
                       double z)

    Interface to C language function:
    void glVertex3d(GLdouble x, GLdouble y, GLdouble z);

glVertex3dv

public void glVertex3dv(DoubleBuffer v)

    Interface to C language function:
    void glVertex3dv(const GLdouble * v);

glVertex3dv

public void glVertex3dv(double[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex3dv(const GLdouble * v);

glVertex3f

public void glVertex3f(float x,
                       float y,
                       float z)

    Interface to C language function:
    void glVertex3f(GLfloat x, GLfloat y, GLfloat z);

glVertex3fv

public void glVertex3fv(FloatBuffer v)

    Interface to C language function:
    void glVertex3fv(const GLfloat * v);

glVertex3fv

public void glVertex3fv(float[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex3fv(const GLfloat * v);

glVertex3hNV

public void glVertex3hNV(short red,
                         short green,
                         short blue)

    Entry point (through function pointer) to C language function:
    void glVertex3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

glVertex3hvNV

public void glVertex3hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertex3hvNV(const GLhalfNV * v);

glVertex3hvNV

public void glVertex3hvNV(short[] v,
                          int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertex3hvNV(const GLhalfNV * v);

glVertex3i

public void glVertex3i(int x,
                       int y,
                       int z)

    Interface to C language function:
    void glVertex3i(GLint x, GLint y, GLint z);

glVertex3iv

public void glVertex3iv(IntBuffer v)

    Interface to C language function:
    void glVertex3iv(const GLint * v);

glVertex3iv

public void glVertex3iv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex3iv(const GLint * v);

glVertex3s

public void glVertex3s(short x,
                       short y,
                       short z)

    Interface to C language function:
    void glVertex3s(GLshort x, GLshort y, GLshort z);

glVertex3sv

public void glVertex3sv(ShortBuffer v)

    Interface to C language function:
    void glVertex3sv(const GLshort * v);

glVertex3sv

public void glVertex3sv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex3sv(const GLshort * v);

glVertex4d

public void glVertex4d(double x,
                       double y,
                       double z,
                       double w)

    Interface to C language function:
    void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glVertex4dv

public void glVertex4dv(DoubleBuffer v)

    Interface to C language function:
    void glVertex4dv(const GLdouble * v);

glVertex4dv

public void glVertex4dv(double[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex4dv(const GLdouble * v);

glVertex4f

public void glVertex4f(float x,
                       float y,
                       float z,
                       float w)

    Interface to C language function:
    void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

glVertex4fv

public void glVertex4fv(FloatBuffer v)

    Interface to C language function:
    void glVertex4fv(const GLfloat * v);

glVertex4fv

public void glVertex4fv(float[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex4fv(const GLfloat * v);

glVertex4hNV

public void glVertex4hNV(short x,
                         short y,
                         short z,
                         short w)

    Entry point (through function pointer) to C language function:
    void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);

glVertex4hvNV

public void glVertex4hvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertex4hvNV(const GLhalfNV * v);

glVertex4hvNV

public void glVertex4hvNV(short[] v,
                          int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertex4hvNV(const GLhalfNV * v);

glVertex4i

public void glVertex4i(int x,
                       int y,
                       int z,
                       int w)

    Interface to C language function:
    void glVertex4i(GLint x, GLint y, GLint z, GLint w);

glVertex4iv

public void glVertex4iv(IntBuffer v)

    Interface to C language function:
    void glVertex4iv(const GLint * v);

glVertex4iv

public void glVertex4iv(int[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex4iv(const GLint * v);

glVertex4s

public void glVertex4s(short x,
                       short y,
                       short z,
                       short w)

    Interface to C language function:
    void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);

glVertex4sv

public void glVertex4sv(ShortBuffer v)

    Interface to C language function:
    void glVertex4sv(const GLshort * v);

glVertex4sv

public void glVertex4sv(short[] v,
                        int v_offset)

    Interface to C language function:
    void glVertex4sv(const GLshort * v);

glVertexArrayParameteriAPPLE

public void glVertexArrayParameteriAPPLE(int target,
                                         int s)

    Entry point (through function pointer) to C language function:
    void glVertexArrayParameteriAPPLE(GLenum target, GLint s);

glVertexArrayRangeAPPLE

public void glVertexArrayRangeAPPLE(int length,
                                    Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexArrayRangeAPPLE(GLsizei length, GLvoid * pointer);

glVertexArrayRangeNV

public void glVertexArrayRangeNV(int length,
                                 Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexArrayRangeNV(GLsizei length, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glVertexAttrib1d

public void glVertexAttrib1d(int target,
                             double s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1d(GLuint target, GLdouble s);

glVertexAttrib1dARB

public void glVertexAttrib1dARB(int target,
                                double s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dARB(GLuint target, GLdouble s);

glVertexAttrib1dNV

public void glVertexAttrib1dNV(int target,
                               double s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dNV(GLuint target, GLdouble s);

glVertexAttrib1dv

public void glVertexAttrib1dv(int target,
                              DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dv(GLuint target, const GLdouble * v);

glVertexAttrib1dv

public void glVertexAttrib1dv(int target,
                              double[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dv(GLuint target, const GLdouble * v);

glVertexAttrib1dvARB

public void glVertexAttrib1dvARB(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dvARB(GLuint target, const GLdouble * v);

glVertexAttrib1dvARB

public void glVertexAttrib1dvARB(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dvARB(GLuint target, const GLdouble * v);

glVertexAttrib1dvNV

public void glVertexAttrib1dvNV(int target,
                                DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dvNV(GLuint target, const GLdouble * v);

glVertexAttrib1dvNV

public void glVertexAttrib1dvNV(int target,
                                double[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1dvNV(GLuint target, const GLdouble * v);

glVertexAttrib1f

public void glVertexAttrib1f(int target,
                             float s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1f(GLuint target, GLfloat s);

glVertexAttrib1fARB

public void glVertexAttrib1fARB(int target,
                                float s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fARB(GLuint target, GLfloat s);

glVertexAttrib1fNV

public void glVertexAttrib1fNV(int target,
                               float s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fNV(GLuint target, GLfloat s);

glVertexAttrib1fv

public void glVertexAttrib1fv(int target,
                              FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fv(GLuint target, const GLfloat * v);

glVertexAttrib1fv

public void glVertexAttrib1fv(int target,
                              float[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fv(GLuint target, const GLfloat * v);

glVertexAttrib1fvARB

public void glVertexAttrib1fvARB(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fvARB(GLuint target, const GLfloat * v);

glVertexAttrib1fvARB

public void glVertexAttrib1fvARB(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fvARB(GLuint target, const GLfloat * v);

glVertexAttrib1fvNV

public void glVertexAttrib1fvNV(int target,
                                FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fvNV(GLuint target, const GLfloat * v);

glVertexAttrib1fvNV

public void glVertexAttrib1fvNV(int target,
                                float[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1fvNV(GLuint target, const GLfloat * v);

glVertexAttrib1hNV

public void glVertexAttrib1hNV(int target,
                               short s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1hNV(GLuint target, GLhalfNV s);

glVertexAttrib1hvNV

public void glVertexAttrib1hvNV(int index,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib1hvNV

public void glVertexAttrib1hvNV(int index,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib1s

public void glVertexAttrib1s(int target,
                             short s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1s(GLuint target, GLshort s);

glVertexAttrib1sARB

public void glVertexAttrib1sARB(int target,
                                short s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1sARB(GLuint target, GLshort s);

glVertexAttrib1sNV

public void glVertexAttrib1sNV(int target,
                               short s)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1sNV(GLuint target, GLshort s);

glVertexAttrib1sv

public void glVertexAttrib1sv(int target,
                              ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1sv(GLuint target, const GLshort * v);

glVertexAttrib1sv

public void glVertexAttrib1sv(int target,
                              short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1sv(GLuint target, const GLshort * v);

glVertexAttrib1svARB

public void glVertexAttrib1svARB(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1svARB(GLuint target, const GLshort * v);

glVertexAttrib1svARB

public void glVertexAttrib1svARB(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1svARB(GLuint target, const GLshort * v);

glVertexAttrib1svNV

public void glVertexAttrib1svNV(int target,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1svNV(GLuint target, const GLshort * v);

glVertexAttrib1svNV

public void glVertexAttrib1svNV(int target,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib1svNV(GLuint target, const GLshort * v);

glVertexAttrib2d

public void glVertexAttrib2d(int target,
                             double s,
                             double t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2d(GLuint target, GLdouble s, GLdouble t);

glVertexAttrib2dARB

public void glVertexAttrib2dARB(int target,
                                double s,
                                double t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dARB(GLuint target, GLdouble s, GLdouble t);

glVertexAttrib2dNV

public void glVertexAttrib2dNV(int target,
                               double s,
                               double t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dNV(GLuint target, GLdouble s, GLdouble t);

glVertexAttrib2dv

public void glVertexAttrib2dv(int target,
                              DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dv(GLuint target, const GLdouble * v);

glVertexAttrib2dv

public void glVertexAttrib2dv(int target,
                              double[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dv(GLuint target, const GLdouble * v);

glVertexAttrib2dvARB

public void glVertexAttrib2dvARB(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dvARB(GLuint target, const GLdouble * v);

glVertexAttrib2dvARB

public void glVertexAttrib2dvARB(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dvARB(GLuint target, const GLdouble * v);

glVertexAttrib2dvNV

public void glVertexAttrib2dvNV(int target,
                                DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dvNV(GLuint target, const GLdouble * v);

glVertexAttrib2dvNV

public void glVertexAttrib2dvNV(int target,
                                double[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2dvNV(GLuint target, const GLdouble * v);

glVertexAttrib2f

public void glVertexAttrib2f(int target,
                             float s,
                             float t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2f(GLuint target, GLfloat s, GLfloat t);

glVertexAttrib2fARB

public void glVertexAttrib2fARB(int target,
                                float s,
                                float t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fARB(GLuint target, GLfloat s, GLfloat t);

glVertexAttrib2fNV

public void glVertexAttrib2fNV(int target,
                               float s,
                               float t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fNV(GLuint target, GLfloat s, GLfloat t);

glVertexAttrib2fv

public void glVertexAttrib2fv(int target,
                              FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fv(GLuint target, const GLfloat * v);

glVertexAttrib2fv

public void glVertexAttrib2fv(int target,
                              float[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fv(GLuint target, const GLfloat * v);

glVertexAttrib2fvARB

public void glVertexAttrib2fvARB(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fvARB(GLuint target, const GLfloat * v);

glVertexAttrib2fvARB

public void glVertexAttrib2fvARB(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fvARB(GLuint target, const GLfloat * v);

glVertexAttrib2fvNV

public void glVertexAttrib2fvNV(int target,
                                FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fvNV(GLuint target, const GLfloat * v);

glVertexAttrib2fvNV

public void glVertexAttrib2fvNV(int target,
                                float[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2fvNV(GLuint target, const GLfloat * v);

glVertexAttrib2hNV

public void glVertexAttrib2hNV(int target,
                               short s,
                               short t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2hNV(GLuint target, GLhalfNV s, GLhalfNV t);

glVertexAttrib2hvNV

public void glVertexAttrib2hvNV(int index,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib2hvNV

public void glVertexAttrib2hvNV(int index,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib2s

public void glVertexAttrib2s(int target,
                             short s,
                             short t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2s(GLuint target, GLshort s, GLshort t);

glVertexAttrib2sARB

public void glVertexAttrib2sARB(int target,
                                short s,
                                short t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2sARB(GLuint target, GLshort s, GLshort t);

glVertexAttrib2sNV

public void glVertexAttrib2sNV(int target,
                               short s,
                               short t)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2sNV(GLuint target, GLshort s, GLshort t);

glVertexAttrib2sv

public void glVertexAttrib2sv(int target,
                              ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2sv(GLuint target, const GLshort * v);

glVertexAttrib2sv

public void glVertexAttrib2sv(int target,
                              short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2sv(GLuint target, const GLshort * v);

glVertexAttrib2svARB

public void glVertexAttrib2svARB(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2svARB(GLuint target, const GLshort * v);

glVertexAttrib2svARB

public void glVertexAttrib2svARB(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2svARB(GLuint target, const GLshort * v);

glVertexAttrib2svNV

public void glVertexAttrib2svNV(int target,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2svNV(GLuint target, const GLshort * v);

glVertexAttrib2svNV

public void glVertexAttrib2svNV(int target,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib2svNV(GLuint target, const GLshort * v);

glVertexAttrib3d

public void glVertexAttrib3d(int target,
                             double s,
                             double t,
                             double r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3d(GLuint target, GLdouble s, GLdouble t, GLdouble r);

glVertexAttrib3dARB

public void glVertexAttrib3dARB(int target,
                                double s,
                                double t,
                                double r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dARB(GLuint target, GLdouble s, GLdouble t, GLdouble r);

glVertexAttrib3dNV

public void glVertexAttrib3dNV(int target,
                               double s,
                               double t,
                               double r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dNV(GLuint target, GLdouble s, GLdouble t, GLdouble r);

glVertexAttrib3dv

public void glVertexAttrib3dv(int target,
                              DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dv(GLuint target, const GLdouble * v);

glVertexAttrib3dv

public void glVertexAttrib3dv(int target,
                              double[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dv(GLuint target, const GLdouble * v);

glVertexAttrib3dvARB

public void glVertexAttrib3dvARB(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dvARB(GLuint target, const GLdouble * v);

glVertexAttrib3dvARB

public void glVertexAttrib3dvARB(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dvARB(GLuint target, const GLdouble * v);

glVertexAttrib3dvNV

public void glVertexAttrib3dvNV(int target,
                                DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dvNV(GLuint target, const GLdouble * v);

glVertexAttrib3dvNV

public void glVertexAttrib3dvNV(int target,
                                double[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3dvNV(GLuint target, const GLdouble * v);

glVertexAttrib3f

public void glVertexAttrib3f(int target,
                             float s,
                             float t,
                             float r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3f(GLuint target, GLfloat s, GLfloat t, GLfloat r);

glVertexAttrib3fARB

public void glVertexAttrib3fARB(int target,
                                float s,
                                float t,
                                float r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fARB(GLuint target, GLfloat s, GLfloat t, GLfloat r);

glVertexAttrib3fNV

public void glVertexAttrib3fNV(int target,
                               float s,
                               float t,
                               float r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fNV(GLuint target, GLfloat s, GLfloat t, GLfloat r);

glVertexAttrib3fv

public void glVertexAttrib3fv(int target,
                              FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fv(GLuint target, const GLfloat * v);

glVertexAttrib3fv

public void glVertexAttrib3fv(int target,
                              float[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fv(GLuint target, const GLfloat * v);

glVertexAttrib3fvARB

public void glVertexAttrib3fvARB(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fvARB(GLuint target, const GLfloat * v);

glVertexAttrib3fvARB

public void glVertexAttrib3fvARB(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fvARB(GLuint target, const GLfloat * v);

glVertexAttrib3fvNV

public void glVertexAttrib3fvNV(int target,
                                FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fvNV(GLuint target, const GLfloat * v);

glVertexAttrib3fvNV

public void glVertexAttrib3fvNV(int target,
                                float[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3fvNV(GLuint target, const GLfloat * v);

glVertexAttrib3hNV

public void glVertexAttrib3hNV(int target,
                               short s,
                               short t,
                               short r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3hNV(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r);

glVertexAttrib3hvNV

public void glVertexAttrib3hvNV(int index,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib3hvNV

public void glVertexAttrib3hvNV(int index,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib3s

public void glVertexAttrib3s(int target,
                             short s,
                             short t,
                             short r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3s(GLuint target, GLshort s, GLshort t, GLshort r);

glVertexAttrib3sARB

public void glVertexAttrib3sARB(int target,
                                short s,
                                short t,
                                short r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3sARB(GLuint target, GLshort s, GLshort t, GLshort r);

glVertexAttrib3sNV

public void glVertexAttrib3sNV(int target,
                               short s,
                               short t,
                               short r)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3sNV(GLuint target, GLshort s, GLshort t, GLshort r);

glVertexAttrib3sv

public void glVertexAttrib3sv(int target,
                              ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3sv(GLuint target, const GLshort * v);

glVertexAttrib3sv

public void glVertexAttrib3sv(int target,
                              short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3sv(GLuint target, const GLshort * v);

glVertexAttrib3svARB

public void glVertexAttrib3svARB(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3svARB(GLuint target, const GLshort * v);

glVertexAttrib3svARB

public void glVertexAttrib3svARB(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3svARB(GLuint target, const GLshort * v);

glVertexAttrib3svNV

public void glVertexAttrib3svNV(int target,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3svNV(GLuint target, const GLshort * v);

glVertexAttrib3svNV

public void glVertexAttrib3svNV(int target,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib3svNV(GLuint target, const GLshort * v);

glVertexAttrib4Nbv

public void glVertexAttrib4Nbv(int index,
                               ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nbv(GLuint index, const GLbyte * v);

glVertexAttrib4Nbv

public void glVertexAttrib4Nbv(int index,
                               byte[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nbv(GLuint index, const GLbyte * v);

glVertexAttrib4NbvARB

public void glVertexAttrib4NbvARB(int index,
                                  ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NbvARB(GLuint index, const GLbyte * v);

glVertexAttrib4NbvARB

public void glVertexAttrib4NbvARB(int index,
                                  byte[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NbvARB(GLuint index, const GLbyte * v);

glVertexAttrib4Niv

public void glVertexAttrib4Niv(int target,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Niv(GLuint target, const GLint * v);

glVertexAttrib4Niv

public void glVertexAttrib4Niv(int target,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Niv(GLuint target, const GLint * v);

glVertexAttrib4NivARB

public void glVertexAttrib4NivARB(int target,
                                  IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NivARB(GLuint target, const GLint * v);

glVertexAttrib4NivARB

public void glVertexAttrib4NivARB(int target,
                                  int[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NivARB(GLuint target, const GLint * v);

glVertexAttrib4Nsv

public void glVertexAttrib4Nsv(int target,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nsv(GLuint target, const GLshort * v);

glVertexAttrib4Nsv

public void glVertexAttrib4Nsv(int target,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nsv(GLuint target, const GLshort * v);

glVertexAttrib4NsvARB

public void glVertexAttrib4NsvARB(int target,
                                  ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NsvARB(GLuint target, const GLshort * v);

glVertexAttrib4NsvARB

public void glVertexAttrib4NsvARB(int target,
                                  short[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NsvARB(GLuint target, const GLshort * v);

glVertexAttrib4Nub

public void glVertexAttrib4Nub(int index,
                               byte x,
                               byte y,
                               byte z,
                               byte w)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

glVertexAttrib4NubARB

public void glVertexAttrib4NubARB(int index,
                                  byte x,
                                  byte y,
                                  byte z,
                                  byte w)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

glVertexAttrib4Nubv

public void glVertexAttrib4Nubv(int index,
                                ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nubv(GLuint index, const GLubyte * v);

glVertexAttrib4Nubv

public void glVertexAttrib4Nubv(int index,
                                byte[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nubv(GLuint index, const GLubyte * v);

glVertexAttrib4NubvARB

public void glVertexAttrib4NubvARB(int index,
                                   ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NubvARB(GLuint index, const GLubyte * v);

glVertexAttrib4NubvARB

public void glVertexAttrib4NubvARB(int index,
                                   byte[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NubvARB(GLuint index, const GLubyte * v);

glVertexAttrib4Nuiv

public void glVertexAttrib4Nuiv(int index,
                                IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nuiv(GLuint index, const GLuint * v);

glVertexAttrib4Nuiv

public void glVertexAttrib4Nuiv(int index,
                                int[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nuiv(GLuint index, const GLuint * v);

glVertexAttrib4NuivARB

public void glVertexAttrib4NuivARB(int index,
                                   IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NuivARB(GLuint index, const GLuint * v);

glVertexAttrib4NuivARB

public void glVertexAttrib4NuivARB(int index,
                                   int[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NuivARB(GLuint index, const GLuint * v);

glVertexAttrib4Nusv

public void glVertexAttrib4Nusv(int index,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nusv(GLuint index, const GLushort * v);

glVertexAttrib4Nusv

public void glVertexAttrib4Nusv(int index,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4Nusv(GLuint index, const GLushort * v);

glVertexAttrib4NusvARB

public void glVertexAttrib4NusvARB(int index,
                                   ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NusvARB(GLuint index, const GLushort * v);

glVertexAttrib4NusvARB

public void glVertexAttrib4NusvARB(int index,
                                   short[] v,
                                   int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4NusvARB(GLuint index, const GLushort * v);

glVertexAttrib4bv

public void glVertexAttrib4bv(int index,
                              ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4bv(GLuint index, const GLbyte * v);

glVertexAttrib4bv

public void glVertexAttrib4bv(int index,
                              byte[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4bv(GLuint index, const GLbyte * v);

glVertexAttrib4bvARB

public void glVertexAttrib4bvARB(int index,
                                 ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4bvARB(GLuint index, const GLbyte * v);

glVertexAttrib4bvARB

public void glVertexAttrib4bvARB(int index,
                                 byte[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4bvARB(GLuint index, const GLbyte * v);

glVertexAttrib4d

public void glVertexAttrib4d(int target,
                             double s,
                             double t,
                             double r,
                             double q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4d(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glVertexAttrib4dARB

public void glVertexAttrib4dARB(int target,
                                double s,
                                double t,
                                double r,
                                double q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dARB(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glVertexAttrib4dNV

public void glVertexAttrib4dNV(int target,
                               double s,
                               double t,
                               double r,
                               double q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dNV(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glVertexAttrib4dv

public void glVertexAttrib4dv(int target,
                              DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dv(GLuint target, const GLdouble * v);

glVertexAttrib4dv

public void glVertexAttrib4dv(int target,
                              double[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dv(GLuint target, const GLdouble * v);

glVertexAttrib4dvARB

public void glVertexAttrib4dvARB(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dvARB(GLuint target, const GLdouble * v);

glVertexAttrib4dvARB

public void glVertexAttrib4dvARB(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dvARB(GLuint target, const GLdouble * v);

glVertexAttrib4dvNV

public void glVertexAttrib4dvNV(int target,
                                DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dvNV(GLuint target, const GLdouble * v);

glVertexAttrib4dvNV

public void glVertexAttrib4dvNV(int target,
                                double[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4dvNV(GLuint target, const GLdouble * v);

glVertexAttrib4f

public void glVertexAttrib4f(int target,
                             float s,
                             float t,
                             float r,
                             float q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4f(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glVertexAttrib4fARB

public void glVertexAttrib4fARB(int target,
                                float s,
                                float t,
                                float r,
                                float q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fARB(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glVertexAttrib4fNV

public void glVertexAttrib4fNV(int target,
                               float s,
                               float t,
                               float r,
                               float q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fNV(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glVertexAttrib4fv

public void glVertexAttrib4fv(int target,
                              FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fv(GLuint target, const GLfloat * v);

glVertexAttrib4fv

public void glVertexAttrib4fv(int target,
                              float[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fv(GLuint target, const GLfloat * v);

glVertexAttrib4fvARB

public void glVertexAttrib4fvARB(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fvARB(GLuint target, const GLfloat * v);

glVertexAttrib4fvARB

public void glVertexAttrib4fvARB(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fvARB(GLuint target, const GLfloat * v);

glVertexAttrib4fvNV

public void glVertexAttrib4fvNV(int target,
                                FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fvNV(GLuint target, const GLfloat * v);

glVertexAttrib4fvNV

public void glVertexAttrib4fvNV(int target,
                                float[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4fvNV(GLuint target, const GLfloat * v);

glVertexAttrib4hNV

public void glVertexAttrib4hNV(int target,
                               short s,
                               short t,
                               short r,
                               short q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4hNV(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);

glVertexAttrib4hvNV

public void glVertexAttrib4hvNV(int index,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib4hvNV

public void glVertexAttrib4hvNV(int index,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v);

glVertexAttrib4iv

public void glVertexAttrib4iv(int target,
                              IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4iv(GLuint target, const GLint * v);

glVertexAttrib4iv

public void glVertexAttrib4iv(int target,
                              int[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4iv(GLuint target, const GLint * v);

glVertexAttrib4ivARB

public void glVertexAttrib4ivARB(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ivARB(GLuint target, const GLint * v);

glVertexAttrib4ivARB

public void glVertexAttrib4ivARB(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ivARB(GLuint target, const GLint * v);

glVertexAttrib4s

public void glVertexAttrib4s(int target,
                             short s,
                             short t,
                             short r,
                             short q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4s(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q);

glVertexAttrib4sARB

public void glVertexAttrib4sARB(int target,
                                short s,
                                short t,
                                short r,
                                short q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4sARB(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q);

glVertexAttrib4sNV

public void glVertexAttrib4sNV(int target,
                               short s,
                               short t,
                               short r,
                               short q)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4sNV(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q);

glVertexAttrib4sv

public void glVertexAttrib4sv(int target,
                              ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4sv(GLuint target, const GLshort * v);

glVertexAttrib4sv

public void glVertexAttrib4sv(int target,
                              short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4sv(GLuint target, const GLshort * v);

glVertexAttrib4svARB

public void glVertexAttrib4svARB(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4svARB(GLuint target, const GLshort * v);

glVertexAttrib4svARB

public void glVertexAttrib4svARB(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4svARB(GLuint target, const GLshort * v);

glVertexAttrib4svNV

public void glVertexAttrib4svNV(int target,
                                ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4svNV(GLuint target, const GLshort * v);

glVertexAttrib4svNV

public void glVertexAttrib4svNV(int target,
                                short[] v,
                                int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4svNV(GLuint target, const GLshort * v);

glVertexAttrib4ubNV

public void glVertexAttrib4ubNV(int index,
                                byte x,
                                byte y,
                                byte z,
                                byte w)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

glVertexAttrib4ubv

public void glVertexAttrib4ubv(int index,
                               ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubv(GLuint index, const GLubyte * v);

glVertexAttrib4ubv

public void glVertexAttrib4ubv(int index,
                               byte[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubv(GLuint index, const GLubyte * v);

glVertexAttrib4ubvARB

public void glVertexAttrib4ubvARB(int index,
                                  ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubvARB(GLuint index, const GLubyte * v);

glVertexAttrib4ubvARB

public void glVertexAttrib4ubvARB(int index,
                                  byte[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubvARB(GLuint index, const GLubyte * v);

glVertexAttrib4ubvNV

public void glVertexAttrib4ubvNV(int index,
                                 ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubvNV(GLuint index, const GLubyte * v);

glVertexAttrib4ubvNV

public void glVertexAttrib4ubvNV(int index,
                                 byte[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4ubvNV(GLuint index, const GLubyte * v);

glVertexAttrib4uiv

public void glVertexAttrib4uiv(int index,
                               IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4uiv(GLuint index, const GLuint * v);

glVertexAttrib4uiv

public void glVertexAttrib4uiv(int index,
                               int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4uiv(GLuint index, const GLuint * v);

glVertexAttrib4uivARB

public void glVertexAttrib4uivARB(int index,
                                  IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4uivARB(GLuint index, const GLuint * v);

glVertexAttrib4uivARB

public void glVertexAttrib4uivARB(int index,
                                  int[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4uivARB(GLuint index, const GLuint * v);

glVertexAttrib4usv

public void glVertexAttrib4usv(int index,
                               ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4usv(GLuint index, const GLushort * v);

glVertexAttrib4usv

public void glVertexAttrib4usv(int index,
                               short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4usv(GLuint index, const GLushort * v);

glVertexAttrib4usvARB

public void glVertexAttrib4usvARB(int index,
                                  ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4usvARB(GLuint index, const GLushort * v);

glVertexAttrib4usvARB

public void glVertexAttrib4usvARB(int index,
                                  short[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttrib4usvARB(GLuint index, const GLushort * v);

glVertexAttribArrayObjectATI

public void glVertexAttribArrayObjectATI(int index,
                                         int size,
                                         int type,
                                         boolean normalized,
                                         int stride,
                                         int buffer,
                                         int offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);

glVertexAttribPointer

public void glVertexAttribPointer(int index,
                                  int size,
                                  int type,
                                  boolean normalized,
                                  int stride,
                                  Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);

glVertexAttribPointer

public void glVertexAttribPointer(int index,
                                  int size,
                                  int type,
                                  boolean normalized,
                                  int stride,
                                  long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);

glVertexAttribPointerARB

public void glVertexAttribPointerARB(int index,
                                     int size,
                                     int type,
                                     boolean normalized,
                                     int stride,
                                     Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glVertexAttribPointerARB

public void glVertexAttribPointerARB(int index,
                                     int size,
                                     int type,
                                     boolean normalized,
                                     int stride,
                                     long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);

glVertexAttribPointerNV

public void glVertexAttribPointerNV(int index,
                                    int fsize,
                                    int type,
                                    int stride,
                                    Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glVertexAttribPointerNV

public void glVertexAttribPointerNV(int index,
                                    int fsize,
                                    int type,
                                    int stride,
                                    long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid * pointer);

glVertexAttribs1dvNV

public void glVertexAttribs1dvNV(int index,
                                 int count,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs1dvNV

public void glVertexAttribs1dvNV(int index,
                                 int count,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs1fvNV

public void glVertexAttribs1fvNV(int target,
                                 int n,
                                 FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs1fvNV

public void glVertexAttribs1fvNV(int target,
                                 int n,
                                 float[] points,
                                 int points_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs1hvNV

public void glVertexAttribs1hvNV(int index,
                                 int n,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs1hvNV

public void glVertexAttribs1hvNV(int index,
                                 int n,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs1svNV

public void glVertexAttribs1svNV(int index,
                                 int count,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs1svNV

public void glVertexAttribs1svNV(int index,
                                 int count,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs2dvNV

public void glVertexAttribs2dvNV(int index,
                                 int count,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs2dvNV

public void glVertexAttribs2dvNV(int index,
                                 int count,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs2fvNV

public void glVertexAttribs2fvNV(int target,
                                 int n,
                                 FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs2fvNV

public void glVertexAttribs2fvNV(int target,
                                 int n,
                                 float[] points,
                                 int points_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs2hvNV

public void glVertexAttribs2hvNV(int index,
                                 int n,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs2hvNV

public void glVertexAttribs2hvNV(int index,
                                 int n,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs2svNV

public void glVertexAttribs2svNV(int index,
                                 int count,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs2svNV

public void glVertexAttribs2svNV(int index,
                                 int count,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs3dvNV

public void glVertexAttribs3dvNV(int index,
                                 int count,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs3dvNV

public void glVertexAttribs3dvNV(int index,
                                 int count,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs3fvNV

public void glVertexAttribs3fvNV(int target,
                                 int n,
                                 FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs3fvNV

public void glVertexAttribs3fvNV(int target,
                                 int n,
                                 float[] points,
                                 int points_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs3hvNV

public void glVertexAttribs3hvNV(int index,
                                 int n,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs3hvNV

public void glVertexAttribs3hvNV(int index,
                                 int n,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs3svNV

public void glVertexAttribs3svNV(int index,
                                 int count,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs3svNV

public void glVertexAttribs3svNV(int index,
                                 int count,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs4dvNV

public void glVertexAttribs4dvNV(int index,
                                 int count,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs4dvNV

public void glVertexAttribs4dvNV(int index,
                                 int count,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v);

glVertexAttribs4fvNV

public void glVertexAttribs4fvNV(int target,
                                 int n,
                                 FloatBuffer points)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs4fvNV

public void glVertexAttribs4fvNV(int target,
                                 int n,
                                 float[] points,
                                 int points_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4fvNV(GLuint target, GLsizei n, const GLfloat * points);

glVertexAttribs4hvNV

public void glVertexAttribs4hvNV(int index,
                                 int n,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs4hvNV

public void glVertexAttribs4hvNV(int index,
                                 int n,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v);

glVertexAttribs4svNV

public void glVertexAttribs4svNV(int index,
                                 int count,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs4svNV

public void glVertexAttribs4svNV(int index,
                                 int count,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v);

glVertexAttribs4ubvNV

public void glVertexAttribs4ubvNV(int index,
                                  int count,
                                  ByteBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v);

glVertexAttribs4ubvNV

public void glVertexAttribs4ubvNV(int index,
                                  int count,
                                  byte[] v,
                                  int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v);

glVertexBlendARB

public void glVertexBlendARB(int count)

    Entry point (through function pointer) to C language function:
    void glVertexBlendARB(GLint count);

glVertexBlendEnvfATI

public void glVertexBlendEnvfATI(int target,
                                 float s)

    Entry point (through function pointer) to C language function:
    void glVertexBlendEnvfATI(GLenum target, GLfloat s);

glVertexBlendEnviATI

public void glVertexBlendEnviATI(int target,
                                 int s)

    Entry point (through function pointer) to C language function:
    void glVertexBlendEnviATI(GLenum target, GLint s);

glVertexPointer

public void glVertexPointer(int size,
                            int type,
                            int stride,
                            Buffer ptr)

    Interface to C language function:
    void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

    Parameters:
        ptr - a direct Buffer

glVertexPointer

public void glVertexPointer(int size,
                            int type,
                            int stride,
                            long ptr_buffer_offset)

    Interface to C language function:
    void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * ptr);

glVertexStream1dATI

public void glVertexStream1dATI(int target,
                                double s)

    Entry point (through function pointer) to C language function:
    void glVertexStream1dATI(GLenum target, GLdouble s);

glVertexStream1dvATI

public void glVertexStream1dvATI(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream1dvATI(GLenum target, const GLdouble * v);

glVertexStream1dvATI

public void glVertexStream1dvATI(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream1dvATI(GLenum target, const GLdouble * v);

glVertexStream1fATI

public void glVertexStream1fATI(int target,
                                float s)

    Entry point (through function pointer) to C language function:
    void glVertexStream1fATI(GLenum target, GLfloat s);

glVertexStream1fvATI

public void glVertexStream1fvATI(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream1fvATI(GLenum target, const GLfloat * v);

glVertexStream1fvATI

public void glVertexStream1fvATI(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream1fvATI(GLenum target, const GLfloat * v);

glVertexStream1iATI

public void glVertexStream1iATI(int target,
                                int s)

    Entry point (through function pointer) to C language function:
    void glVertexStream1iATI(GLenum target, GLint s);

glVertexStream1ivATI

public void glVertexStream1ivATI(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream1ivATI(GLenum target, const GLint * v);

glVertexStream1ivATI

public void glVertexStream1ivATI(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream1ivATI(GLenum target, const GLint * v);

glVertexStream1sATI

public void glVertexStream1sATI(int target,
                                short s)

    Entry point (through function pointer) to C language function:
    void glVertexStream1sATI(GLenum target, GLshort s);

glVertexStream1svATI

public void glVertexStream1svATI(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream1svATI(GLenum target, const GLshort * v);

glVertexStream1svATI

public void glVertexStream1svATI(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream1svATI(GLenum target, const GLshort * v);

glVertexStream2dATI

public void glVertexStream2dATI(int target,
                                double s,
                                double t)

    Entry point (through function pointer) to C language function:
    void glVertexStream2dATI(GLenum target, GLdouble s, GLdouble t);

glVertexStream2dvATI

public void glVertexStream2dvATI(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream2dvATI(GLenum target, const GLdouble * v);

glVertexStream2dvATI

public void glVertexStream2dvATI(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream2dvATI(GLenum target, const GLdouble * v);

glVertexStream2fATI

public void glVertexStream2fATI(int target,
                                float s,
                                float t)

    Entry point (through function pointer) to C language function:
    void glVertexStream2fATI(GLenum target, GLfloat s, GLfloat t);

glVertexStream2fvATI

public void glVertexStream2fvATI(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream2fvATI(GLenum target, const GLfloat * v);

glVertexStream2fvATI

public void glVertexStream2fvATI(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream2fvATI(GLenum target, const GLfloat * v);

glVertexStream2iATI

public void glVertexStream2iATI(int target,
                                int s,
                                int t)

    Entry point (through function pointer) to C language function:
    void glVertexStream2iATI(GLenum target, GLint s, GLint t);

glVertexStream2ivATI

public void glVertexStream2ivATI(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream2ivATI(GLenum target, const GLint * v);

glVertexStream2ivATI

public void glVertexStream2ivATI(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream2ivATI(GLenum target, const GLint * v);

glVertexStream2sATI

public void glVertexStream2sATI(int target,
                                short s,
                                short t)

    Entry point (through function pointer) to C language function:
    void glVertexStream2sATI(GLenum target, GLshort s, GLshort t);

glVertexStream2svATI

public void glVertexStream2svATI(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream2svATI(GLenum target, const GLshort * v);

glVertexStream2svATI

public void glVertexStream2svATI(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream2svATI(GLenum target, const GLshort * v);

glVertexStream3dATI

public void glVertexStream3dATI(int target,
                                double s,
                                double t,
                                double r)

    Entry point (through function pointer) to C language function:
    void glVertexStream3dATI(GLenum target, GLdouble s, GLdouble t, GLdouble r);

glVertexStream3dvATI

public void glVertexStream3dvATI(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream3dvATI(GLenum target, const GLdouble * v);

glVertexStream3dvATI

public void glVertexStream3dvATI(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream3dvATI(GLenum target, const GLdouble * v);

glVertexStream3fATI

public void glVertexStream3fATI(int target,
                                float s,
                                float t,
                                float r)

    Entry point (through function pointer) to C language function:
    void glVertexStream3fATI(GLenum target, GLfloat s, GLfloat t, GLfloat r);

glVertexStream3fvATI

public void glVertexStream3fvATI(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream3fvATI(GLenum target, const GLfloat * v);

glVertexStream3fvATI

public void glVertexStream3fvATI(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream3fvATI(GLenum target, const GLfloat * v);

glVertexStream3iATI

public void glVertexStream3iATI(int target,
                                int s,
                                int t,
                                int r)

    Entry point (through function pointer) to C language function:
    void glVertexStream3iATI(GLenum target, GLint s, GLint t, GLint r);

glVertexStream3ivATI

public void glVertexStream3ivATI(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream3ivATI(GLenum target, const GLint * v);

glVertexStream3ivATI

public void glVertexStream3ivATI(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream3ivATI(GLenum target, const GLint * v);

glVertexStream3sATI

public void glVertexStream3sATI(int target,
                                short s,
                                short t,
                                short r)

    Entry point (through function pointer) to C language function:
    void glVertexStream3sATI(GLenum target, GLshort s, GLshort t, GLshort r);

glVertexStream3svATI

public void glVertexStream3svATI(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream3svATI(GLenum target, const GLshort * v);

glVertexStream3svATI

public void glVertexStream3svATI(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream3svATI(GLenum target, const GLshort * v);

glVertexStream4dATI

public void glVertexStream4dATI(int target,
                                double s,
                                double t,
                                double r,
                                double q)

    Entry point (through function pointer) to C language function:
    void glVertexStream4dATI(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

glVertexStream4dvATI

public void glVertexStream4dvATI(int target,
                                 DoubleBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream4dvATI(GLenum target, const GLdouble * v);

glVertexStream4dvATI

public void glVertexStream4dvATI(int target,
                                 double[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream4dvATI(GLenum target, const GLdouble * v);

glVertexStream4fATI

public void glVertexStream4fATI(int target,
                                float s,
                                float t,
                                float r,
                                float q)

    Entry point (through function pointer) to C language function:
    void glVertexStream4fATI(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

glVertexStream4fvATI

public void glVertexStream4fvATI(int target,
                                 FloatBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream4fvATI(GLenum target, const GLfloat * v);

glVertexStream4fvATI

public void glVertexStream4fvATI(int target,
                                 float[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream4fvATI(GLenum target, const GLfloat * v);

glVertexStream4iATI

public void glVertexStream4iATI(int target,
                                int start,
                                int x,
                                int y,
                                int width)

    Entry point (through function pointer) to C language function:
    void glVertexStream4iATI(GLenum target, GLint start, GLint x, GLint y, GLint width);

glVertexStream4ivATI

public void glVertexStream4ivATI(int target,
                                 IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream4ivATI(GLenum target, const GLint * v);

glVertexStream4ivATI

public void glVertexStream4ivATI(int target,
                                 int[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream4ivATI(GLenum target, const GLint * v);

glVertexStream4sATI

public void glVertexStream4sATI(int target,
                                short s,
                                short t,
                                short r,
                                short q)

    Entry point (through function pointer) to C language function:
    void glVertexStream4sATI(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

glVertexStream4svATI

public void glVertexStream4svATI(int target,
                                 ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexStream4svATI(GLenum target, const GLshort * v);

glVertexStream4svATI

public void glVertexStream4svATI(int target,
                                 short[] v,
                                 int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexStream4svATI(GLenum target, const GLshort * v);

glVertexWeightPointerEXT

public void glVertexWeightPointerEXT(int size,
                                     int type,
                                     int stride,
                                     Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glVertexWeightPointerEXT

public void glVertexWeightPointerEXT(int size,
                                     int type,
                                     int stride,
                                     long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid * pointer);

glVertexWeightfEXT

public void glVertexWeightfEXT(float coord)

    Entry point (through function pointer) to C language function:
    void glVertexWeightfEXT(GLfloat coord);

glVertexWeightfvEXT

public void glVertexWeightfvEXT(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glVertexWeightfvEXT(const GLfloat * m);

glVertexWeightfvEXT

public void glVertexWeightfvEXT(float[] m,
                                int m_offset)

    Entry point (through function pointer) to C language function:
    void glVertexWeightfvEXT(const GLfloat * m);

glVertexWeighthNV

public void glVertexWeighthNV(short factor)

    Entry point (through function pointer) to C language function:
    void glVertexWeighthNV(GLhalfNV factor);

glVertexWeighthvNV

public void glVertexWeighthvNV(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glVertexWeighthvNV(const GLhalfNV * v);

glVertexWeighthvNV

public void glVertexWeighthvNV(short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glVertexWeighthvNV(const GLhalfNV * v);

glViewport

public void glViewport(int x,
                       int y,
                       int width,
                       int height)

    Interface to C language function:
    void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);

glWeightPointerARB

public void glWeightPointerARB(int size,
                               int type,
                               int stride,
                               Buffer pointer)

    Entry point (through function pointer) to C language function:
    void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

    Parameters:
        pointer - a direct Buffer

glWeightPointerARB

public void glWeightPointerARB(int size,
                               int type,
                               int stride,
                               long pointer_buffer_offset)

    Entry point (through function pointer) to C language function:
    void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

glWeightbvARB

public void glWeightbvARB(int size,
                          ByteBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightbvARB(GLint size, const GLbyte * weights);

glWeightbvARB

public void glWeightbvARB(int size,
                          byte[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightbvARB(GLint size, const GLbyte * weights);

glWeightdvARB

public void glWeightdvARB(int size,
                          DoubleBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightdvARB(GLint size, const GLdouble * weights);

glWeightdvARB

public void glWeightdvARB(int size,
                          double[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightdvARB(GLint size, const GLdouble * weights);

glWeightfvARB

public void glWeightfvARB(int size,
                          FloatBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightfvARB(GLint size, const GLfloat * weights);

glWeightfvARB

public void glWeightfvARB(int size,
                          float[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightfvARB(GLint size, const GLfloat * weights);

glWeightivARB

public void glWeightivARB(int size,
                          IntBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightivARB(GLint size, const GLint * weights);

glWeightivARB

public void glWeightivARB(int size,
                          int[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightivARB(GLint size, const GLint * weights);

glWeightsvARB

public void glWeightsvARB(int size,
                          ShortBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightsvARB(GLint size, const GLshort * weights);

glWeightsvARB

public void glWeightsvARB(int size,
                          short[] weights,
                          int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightsvARB(GLint size, const GLshort * weights);

glWeightubvARB

public void glWeightubvARB(int size,
                           ByteBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightubvARB(GLint size, const GLubyte * weights);

glWeightubvARB

public void glWeightubvARB(int size,
                           byte[] weights,
                           int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightubvARB(GLint size, const GLubyte * weights);

glWeightuivARB

public void glWeightuivARB(int n,
                           IntBuffer ids)

    Entry point (through function pointer) to C language function:
    void glWeightuivARB(GLint n, const GLuint * ids);

glWeightuivARB

public void glWeightuivARB(int n,
                           int[] ids,
                           int ids_offset)

    Entry point (through function pointer) to C language function:
    void glWeightuivARB(GLint n, const GLuint * ids);

glWeightusvARB

public void glWeightusvARB(int size,
                           ShortBuffer weights)

    Entry point (through function pointer) to C language function:
    void glWeightusvARB(GLint size, const GLushort * weights);

glWeightusvARB

public void glWeightusvARB(int size,
                           short[] weights,
                           int weights_offset)

    Entry point (through function pointer) to C language function:
    void glWeightusvARB(GLint size, const GLushort * weights);

glWindowPos2d

public void glWindowPos2d(double x,
                          double y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2d(GLdouble x, GLdouble y);

glWindowPos2dARB

public void glWindowPos2dARB(double x,
                             double y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dARB(GLdouble x, GLdouble y);

glWindowPos2dMESA

public void glWindowPos2dMESA(double x,
                              double y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dMESA(GLdouble x, GLdouble y);

glWindowPos2dv

public void glWindowPos2dv(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dv(const GLdouble * m);

glWindowPos2dv

public void glWindowPos2dv(double[] m,
                           int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dv(const GLdouble * m);

glWindowPos2dvARB

public void glWindowPos2dvARB(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dvARB(const GLdouble * m);

glWindowPos2dvARB

public void glWindowPos2dvARB(double[] m,
                              int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dvARB(const GLdouble * m);

glWindowPos2dvMESA

public void glWindowPos2dvMESA(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dvMESA(const GLdouble * m);

glWindowPos2dvMESA

public void glWindowPos2dvMESA(double[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2dvMESA(const GLdouble * m);

glWindowPos2f

public void glWindowPos2f(float x,
                          float y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2f(GLfloat x, GLfloat y);

glWindowPos2fARB

public void glWindowPos2fARB(float x,
                             float y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fARB(GLfloat x, GLfloat y);

glWindowPos2fMESA

public void glWindowPos2fMESA(float x,
                              float y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fMESA(GLfloat x, GLfloat y);

glWindowPos2fv

public void glWindowPos2fv(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fv(const GLfloat * m);

glWindowPos2fv

public void glWindowPos2fv(float[] m,
                           int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fv(const GLfloat * m);

glWindowPos2fvARB

public void glWindowPos2fvARB(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fvARB(const GLfloat * m);

glWindowPos2fvARB

public void glWindowPos2fvARB(float[] m,
                              int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fvARB(const GLfloat * m);

glWindowPos2fvMESA

public void glWindowPos2fvMESA(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fvMESA(const GLfloat * m);

glWindowPos2fvMESA

public void glWindowPos2fvMESA(float[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2fvMESA(const GLfloat * m);

glWindowPos2i

public void glWindowPos2i(int x,
                          int y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2i(GLint x, GLint y);

glWindowPos2iARB

public void glWindowPos2iARB(int x,
                             int y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2iARB(GLint x, GLint y);

glWindowPos2iMESA

public void glWindowPos2iMESA(int x,
                              int y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2iMESA(GLint x, GLint y);

glWindowPos2iv

public void glWindowPos2iv(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2iv(const GLint * v);

glWindowPos2iv

public void glWindowPos2iv(int[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2iv(const GLint * v);

glWindowPos2ivARB

public void glWindowPos2ivARB(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2ivARB(const GLint * v);

glWindowPos2ivARB

public void glWindowPos2ivARB(int[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2ivARB(const GLint * v);

glWindowPos2ivMESA

public void glWindowPos2ivMESA(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2ivMESA(const GLint * v);

glWindowPos2ivMESA

public void glWindowPos2ivMESA(int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2ivMESA(const GLint * v);

glWindowPos2s

public void glWindowPos2s(short x,
                          short y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2s(GLshort x, GLshort y);

glWindowPos2sARB

public void glWindowPos2sARB(short x,
                             short y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2sARB(GLshort x, GLshort y);

glWindowPos2sMESA

public void glWindowPos2sMESA(short x,
                              short y)

    Entry point (through function pointer) to C language function:
    void glWindowPos2sMESA(GLshort x, GLshort y);

glWindowPos2sv

public void glWindowPos2sv(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2sv(const GLshort * v);

glWindowPos2sv

public void glWindowPos2sv(short[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2sv(const GLshort * v);

glWindowPos2svARB

public void glWindowPos2svARB(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2svARB(const GLshort * v);

glWindowPos2svARB

public void glWindowPos2svARB(short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2svARB(const GLshort * v);

glWindowPos2svMESA

public void glWindowPos2svMESA(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos2svMESA(const GLshort * v);

glWindowPos2svMESA

public void glWindowPos2svMESA(short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos2svMESA(const GLshort * v);

glWindowPos3d

public void glWindowPos3d(double red,
                          double green,
                          double blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3d(GLdouble red, GLdouble green, GLdouble blue);

glWindowPos3dARB

public void glWindowPos3dARB(double red,
                             double green,
                             double blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dARB(GLdouble red, GLdouble green, GLdouble blue);

glWindowPos3dMESA

public void glWindowPos3dMESA(double red,
                              double green,
                              double blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dMESA(GLdouble red, GLdouble green, GLdouble blue);

glWindowPos3dv

public void glWindowPos3dv(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dv(const GLdouble * m);

glWindowPos3dv

public void glWindowPos3dv(double[] m,
                           int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dv(const GLdouble * m);

glWindowPos3dvARB

public void glWindowPos3dvARB(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dvARB(const GLdouble * m);

glWindowPos3dvARB

public void glWindowPos3dvARB(double[] m,
                              int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dvARB(const GLdouble * m);

glWindowPos3dvMESA

public void glWindowPos3dvMESA(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dvMESA(const GLdouble * m);

glWindowPos3dvMESA

public void glWindowPos3dvMESA(double[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3dvMESA(const GLdouble * m);

glWindowPos3f

public void glWindowPos3f(float red,
                          float green,
                          float blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3f(GLfloat red, GLfloat green, GLfloat blue);

glWindowPos3fARB

public void glWindowPos3fARB(float red,
                             float green,
                             float blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fARB(GLfloat red, GLfloat green, GLfloat blue);

glWindowPos3fMESA

public void glWindowPos3fMESA(float red,
                              float green,
                              float blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fMESA(GLfloat red, GLfloat green, GLfloat blue);

glWindowPos3fv

public void glWindowPos3fv(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fv(const GLfloat * m);

glWindowPos3fv

public void glWindowPos3fv(float[] m,
                           int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fv(const GLfloat * m);

glWindowPos3fvARB

public void glWindowPos3fvARB(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fvARB(const GLfloat * m);

glWindowPos3fvARB

public void glWindowPos3fvARB(float[] m,
                              int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fvARB(const GLfloat * m);

glWindowPos3fvMESA

public void glWindowPos3fvMESA(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fvMESA(const GLfloat * m);

glWindowPos3fvMESA

public void glWindowPos3fvMESA(float[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3fvMESA(const GLfloat * m);

glWindowPos3i

public void glWindowPos3i(int red,
                          int green,
                          int blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3i(GLint red, GLint green, GLint blue);

glWindowPos3iARB

public void glWindowPos3iARB(int red,
                             int green,
                             int blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3iARB(GLint red, GLint green, GLint blue);

glWindowPos3iMESA

public void glWindowPos3iMESA(int red,
                              int green,
                              int blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3iMESA(GLint red, GLint green, GLint blue);

glWindowPos3iv

public void glWindowPos3iv(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3iv(const GLint * v);

glWindowPos3iv

public void glWindowPos3iv(int[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3iv(const GLint * v);

glWindowPos3ivARB

public void glWindowPos3ivARB(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3ivARB(const GLint * v);

glWindowPos3ivARB

public void glWindowPos3ivARB(int[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3ivARB(const GLint * v);

glWindowPos3ivMESA

public void glWindowPos3ivMESA(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3ivMESA(const GLint * v);

glWindowPos3ivMESA

public void glWindowPos3ivMESA(int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3ivMESA(const GLint * v);

glWindowPos3s

public void glWindowPos3s(short red,
                          short green,
                          short blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3s(GLshort red, GLshort green, GLshort blue);

glWindowPos3sARB

public void glWindowPos3sARB(short red,
                             short green,
                             short blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3sARB(GLshort red, GLshort green, GLshort blue);

glWindowPos3sMESA

public void glWindowPos3sMESA(short red,
                              short green,
                              short blue)

    Entry point (through function pointer) to C language function:
    void glWindowPos3sMESA(GLshort red, GLshort green, GLshort blue);

glWindowPos3sv

public void glWindowPos3sv(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3sv(const GLshort * v);

glWindowPos3sv

public void glWindowPos3sv(short[] v,
                           int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3sv(const GLshort * v);

glWindowPos3svARB

public void glWindowPos3svARB(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3svARB(const GLshort * v);

glWindowPos3svARB

public void glWindowPos3svARB(short[] v,
                              int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3svARB(const GLshort * v);

glWindowPos3svMESA

public void glWindowPos3svMESA(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos3svMESA(const GLshort * v);

glWindowPos3svMESA

public void glWindowPos3svMESA(short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos3svMESA(const GLshort * v);

glWindowPos4dMESA

public void glWindowPos4dMESA(double x,
                              double y,
                              double z,
                              double w)

    Entry point (through function pointer) to C language function:
    void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

glWindowPos4dvMESA

public void glWindowPos4dvMESA(DoubleBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos4dvMESA(const GLdouble * m);

glWindowPos4dvMESA

public void glWindowPos4dvMESA(double[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos4dvMESA(const GLdouble * m);

glWindowPos4fMESA

public void glWindowPos4fMESA(float red,
                              float green,
                              float blue,
                              float alpha)

    Entry point (through function pointer) to C language function:
    void glWindowPos4fMESA(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

glWindowPos4fvMESA

public void glWindowPos4fvMESA(FloatBuffer m)

    Entry point (through function pointer) to C language function:
    void glWindowPos4fvMESA(const GLfloat * m);

glWindowPos4fvMESA

public void glWindowPos4fvMESA(float[] m,
                               int m_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos4fvMESA(const GLfloat * m);

glWindowPos4iMESA

public void glWindowPos4iMESA(int location,
                              int v0,
                              int v1,
                              int v2)

    Entry point (through function pointer) to C language function:
    void glWindowPos4iMESA(GLint location, GLint v0, GLint v1, GLint v2);

glWindowPos4ivMESA

public void glWindowPos4ivMESA(IntBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos4ivMESA(const GLint * v);

glWindowPos4ivMESA

public void glWindowPos4ivMESA(int[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos4ivMESA(const GLint * v);

glWindowPos4sMESA

public void glWindowPos4sMESA(short x,
                              short y,
                              short z,
                              short w)

    Entry point (through function pointer) to C language function:
    void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);

glWindowPos4svMESA

public void glWindowPos4svMESA(ShortBuffer v)

    Entry point (through function pointer) to C language function:
    void glWindowPos4svMESA(const GLshort * v);

glWindowPos4svMESA

public void glWindowPos4svMESA(short[] v,
                               int v_offset)

    Entry point (through function pointer) to C language function:
    void glWindowPos4svMESA(const GLshort * v);

glWriteMaskEXT

public void glWriteMaskEXT(int stage,
                           int portion,
                           int variable,
                           int input,
                           int mapping,
                           int componentUsage)

    Entry point (through function pointer) to C language function:
    void glWriteMaskEXT(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);

isFunctionAvailable

public boolean isFunctionAvailable(String glFunctionName)

    Returns true if the specified OpenGL core- or extension-function can be used successfully through this GL instance given the current host (OpenGL client) and display (OpenGL server) configuration.

    By "successfully" we mean that the function is both callable on the machine running the program and available on the current display.

    In order to call a function successfully, the function must be both callable on the machine running the program and available on the display device that is rendering the output (note: on non-networked, single-display machines these two conditions are identical; on networked and/or multi-display machines this becomes more complicated). These conditions are met if the function is either part of the core OpenGL version supported by both the host and display, or it is an OpenGL extension function that both the host and display support.

    A GL function is callable if it is statically linked, or can be dynamically linked at runtime. Whether or not a GL function is available is determined as follows:

        * If the function is an OpenGL core function (i.e., not an extension), glGetString(GL_VERSION) is used to determine the version number of the highest OpenGL specification version that both host and display support, and then the function name is cross-referenced with that specification version to see if it is part of that version.
        * If the function is an OpenGL extension, the function name is cross-referenced with the list returned by glGetString(GL_EXTENSIONS) to see if the function is one of the extensions that is supported on both host and display. 

    NOTE:The availability of a function may change at runtime in response to changes in the display environment. For example, when a window is dragged from one display to another on a multi-display system, or when the properties of the display device are modified (e.g., changing the color depth of the display). Any application that is concerned with handling these situations correctly should confirm availability after a display change before calling a questionable OpenGL function. To detect a change in the display device, please see GLEventListener.displayChanged(GLAutoDrawable,boolean,boolean).

    Parameters:
        glFunctionName - the name of the OpenGL function (e.g., use "glBindRenderbufferEXT" to check if glBindRenderbufferEXT(int,int) is available).

isExtensionAvailable

public boolean isExtensionAvailable(String glExtensionName)

    Returns true if the specified OpenGL extension can be used successfully through this GL instance given the current host (OpenGL client) and display (OpenGL server) configuration.

    Parameters:
        glExtensionName - the name of the OpenGL extension (e.g., "GL_ARB_vertex_program").

glAllocateMemoryNV

public ByteBuffer glAllocateMemoryNV(int arg0,
                                     float arg1,
                                     float arg2,
                                     float arg3)

    Provides platform-independent access to the wglAllocateMemoryNV / glXAllocateMemoryNV extension.

setSwapInterval

public void setSwapInterval(int interval)

    Provides a platform-independent way to specify the minimum swap interval for buffer swaps. An argument of 0 disables sync-to-vertical-refresh completely, while an argument of 1 causes the application to wait until the next vertical refresh until swapping buffers. The default, which is platform-specific, is usually either 0 or 1. This function is not guaranteed to have an effect, and in particular only affects heavyweight onscreen components.

getPlatformGLExtensions

public Object getPlatformGLExtensions()

    Returns an object through which platform-specific OpenGL extensions (WGL, GLX, etc.) may be accessed. The data type of the returned object and its associated capabilities are undefined. Most applications will never need to call this method. It is highly recommended that any applications which do call this method perform all accesses on the returned object reflectively to guard themselves against changes to the implementation.

getExtension

public Object getExtension(String extensionName)

    Returns an object providing access to the specified OpenGL extension. This is intended to provide a mechanism for vendors who which to provide access to new OpenGL extensions without changing the public API of the core package. For example, a user may request access to extension "GL_VENDOR_foo" and receive back an object which implements a vendor-specified interface which can call the OpenGL extension functions corresponding to that extension. It is up to the vendor to specify both the extension name and Java API for accessing it, including which class or interface contains the functions.

    Note: it is the intent to add new extensions as quickly as possible to the core GL API. Therefore it is unlikely that most vendors will use this extension mechanism, but it is being provided for completeness.

